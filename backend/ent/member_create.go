// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/G16/app/ent/bookcourse"
	"github.com/G16/app/ent/equipmentrental"
	"github.com/G16/app/ent/member"
	"github.com/G16/app/ent/payment"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// MemberCreate is the builder for creating a Member entity.
type MemberCreate struct {
	config
	mutation *MemberMutation
	hooks    []Hook
}

// SetMEMBERID sets the MEMBERID field.
func (mc *MemberCreate) SetMEMBERID(s string) *MemberCreate {
	mc.mutation.SetMEMBERID(s)
	return mc
}

// SetNAME sets the NAME field.
func (mc *MemberCreate) SetNAME(s string) *MemberCreate {
	mc.mutation.SetNAME(s)
	return mc
}

// AddPaymentIDs adds the payment edge to Payment by ids.
func (mc *MemberCreate) AddPaymentIDs(ids ...int) *MemberCreate {
	mc.mutation.AddPaymentIDs(ids...)
	return mc
}

// AddPayment adds the payment edges to Payment.
func (mc *MemberCreate) AddPayment(p ...*Payment) *MemberCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mc.AddPaymentIDs(ids...)
}

// AddBookcourseIDs adds the bookcourse edge to Bookcourse by ids.
func (mc *MemberCreate) AddBookcourseIDs(ids ...int) *MemberCreate {
	mc.mutation.AddBookcourseIDs(ids...)
	return mc
}

// AddBookcourse adds the bookcourse edges to Bookcourse.
func (mc *MemberCreate) AddBookcourse(b ...*Bookcourse) *MemberCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mc.AddBookcourseIDs(ids...)
}

// AddEquipmentrentalIDs adds the equipmentrental edge to Equipmentrental by ids.
func (mc *MemberCreate) AddEquipmentrentalIDs(ids ...int) *MemberCreate {
	mc.mutation.AddEquipmentrentalIDs(ids...)
	return mc
}

// AddEquipmentrental adds the equipmentrental edges to Equipmentrental.
func (mc *MemberCreate) AddEquipmentrental(e ...*Equipmentrental) *MemberCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mc.AddEquipmentrentalIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (mc *MemberCreate) Mutation() *MemberMutation {
	return mc.mutation
}

// Save creates the Member in the database.
func (mc *MemberCreate) Save(ctx context.Context) (*Member, error) {
	if _, ok := mc.mutation.MEMBERID(); !ok {
		return nil, &ValidationError{Name: "MEMBERID", err: errors.New("ent: missing required field \"MEMBERID\"")}
	}
	if v, ok := mc.mutation.MEMBERID(); ok {
		if err := member.MEMBERIDValidator(v); err != nil {
			return nil, &ValidationError{Name: "MEMBERID", err: fmt.Errorf("ent: validator failed for field \"MEMBERID\": %w", err)}
		}
	}
	if _, ok := mc.mutation.NAME(); !ok {
		return nil, &ValidationError{Name: "NAME", err: errors.New("ent: missing required field \"NAME\"")}
	}
	if v, ok := mc.mutation.NAME(); ok {
		if err := member.NAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "NAME", err: fmt.Errorf("ent: validator failed for field \"NAME\": %w", err)}
		}
	}
	var (
		err  error
		node *Member
	)
	if len(mc.hooks) == 0 {
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MemberCreate) SaveX(ctx context.Context) *Member {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *MemberCreate) sqlSave(ctx context.Context) (*Member, error) {
	m, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}

func (mc *MemberCreate) createSpec() (*Member, *sqlgraph.CreateSpec) {
	var (
		m     = &Member{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: member.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: member.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.MEMBERID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldMEMBERID,
		})
		m.MEMBERID = value
	}
	if value, ok := mc.mutation.NAME(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldNAME,
		})
		m.NAME = value
	}
	if nodes := mc.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.PaymentTable,
			Columns: []string{member.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.BookcourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.BookcourseTable,
			Columns: []string{member.BookcourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.EquipmentrentalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.EquipmentrentalTable,
			Columns: []string{member.EquipmentrentalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipmentrental.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return m, _spec
}
