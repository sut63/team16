// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/G16/app/ent/promotiontype"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Promotiontype is the model entity for the Promotiontype schema.
type Promotiontype struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TYPE holds the value of the "TYPE" field.
	TYPE string `json:"TYPE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotiontypeQuery when eager-loading is set.
	Edges PromotiontypeEdges `json:"edges"`
}

// PromotiontypeEdges holds the relations/edges for other nodes in the graph.
type PromotiontypeEdges struct {
	// Promotion holds the value of the promotion edge.
	Promotion []*Promotion
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PromotionOrErr returns the Promotion value or an error if the edge
// was not loaded in eager-loading.
func (e PromotiontypeEdges) PromotionOrErr() ([]*Promotion, error) {
	if e.loadedTypes[0] {
		return e.Promotion, nil
	}
	return nil, &NotLoadedError{edge: "promotion"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Promotiontype) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // TYPE
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Promotiontype fields.
func (pr *Promotiontype) assignValues(values ...interface{}) error {
	if m, n := len(values), len(promotiontype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field TYPE", values[0])
	} else if value.Valid {
		pr.TYPE = value.String
	}
	return nil
}

// QueryPromotion queries the promotion edge of the Promotiontype.
func (pr *Promotiontype) QueryPromotion() *PromotionQuery {
	return (&PromotiontypeClient{config: pr.config}).QueryPromotion(pr)
}

// Update returns a builder for updating this Promotiontype.
// Note that, you need to call Promotiontype.Unwrap() before calling this method, if this Promotiontype
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Promotiontype) Update() *PromotiontypeUpdateOne {
	return (&PromotiontypeClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Promotiontype) Unwrap() *Promotiontype {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Promotiontype is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Promotiontype) String() string {
	var builder strings.Builder
	builder.WriteString("Promotiontype(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", TYPE=")
	builder.WriteString(pr.TYPE)
	builder.WriteByte(')')
	return builder.String()
}

// Promotiontypes is a parsable slice of Promotiontype.
type Promotiontypes []*Promotiontype

func (pr Promotiontypes) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
