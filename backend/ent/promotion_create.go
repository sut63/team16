// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/G16/app/ent/payment"
	"github.com/G16/app/ent/promotion"
	"github.com/G16/app/ent/promotionamount"
	"github.com/G16/app/ent/promotiontime"
	"github.com/G16/app/ent/promotiontype"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PromotionCreate is the builder for creating a Promotion entity.
type PromotionCreate struct {
	config
	mutation *PromotionMutation
	hooks    []Hook
}

// SetNAME sets the NAME field.
func (pc *PromotionCreate) SetNAME(s string) *PromotionCreate {
	pc.mutation.SetNAME(s)
	return pc
}

// SetDESC sets the DESC field.
func (pc *PromotionCreate) SetDESC(s string) *PromotionCreate {
	pc.mutation.SetDESC(s)
	return pc
}

// SetCODE sets the CODE field.
func (pc *PromotionCreate) SetCODE(s string) *PromotionCreate {
	pc.mutation.SetCODE(s)
	return pc
}

// SetPromotiontypeID sets the promotiontype edge to Promotiontype by id.
func (pc *PromotionCreate) SetPromotiontypeID(id int) *PromotionCreate {
	pc.mutation.SetPromotiontypeID(id)
	return pc
}

// SetNillablePromotiontypeID sets the promotiontype edge to Promotiontype by id if the given value is not nil.
func (pc *PromotionCreate) SetNillablePromotiontypeID(id *int) *PromotionCreate {
	if id != nil {
		pc = pc.SetPromotiontypeID(*id)
	}
	return pc
}

// SetPromotiontype sets the promotiontype edge to Promotiontype.
func (pc *PromotionCreate) SetPromotiontype(p *Promotiontype) *PromotionCreate {
	return pc.SetPromotiontypeID(p.ID)
}

// SetPromotionamountID sets the promotionamount edge to Promotionamount by id.
func (pc *PromotionCreate) SetPromotionamountID(id int) *PromotionCreate {
	pc.mutation.SetPromotionamountID(id)
	return pc
}

// SetNillablePromotionamountID sets the promotionamount edge to Promotionamount by id if the given value is not nil.
func (pc *PromotionCreate) SetNillablePromotionamountID(id *int) *PromotionCreate {
	if id != nil {
		pc = pc.SetPromotionamountID(*id)
	}
	return pc
}

// SetPromotionamount sets the promotionamount edge to Promotionamount.
func (pc *PromotionCreate) SetPromotionamount(p *Promotionamount) *PromotionCreate {
	return pc.SetPromotionamountID(p.ID)
}

// SetPromotiontimeID sets the promotiontime edge to Promotiontime by id.
func (pc *PromotionCreate) SetPromotiontimeID(id int) *PromotionCreate {
	pc.mutation.SetPromotiontimeID(id)
	return pc
}

// SetNillablePromotiontimeID sets the promotiontime edge to Promotiontime by id if the given value is not nil.
func (pc *PromotionCreate) SetNillablePromotiontimeID(id *int) *PromotionCreate {
	if id != nil {
		pc = pc.SetPromotiontimeID(*id)
	}
	return pc
}

// SetPromotiontime sets the promotiontime edge to Promotiontime.
func (pc *PromotionCreate) SetPromotiontime(p *Promotiontime) *PromotionCreate {
	return pc.SetPromotiontimeID(p.ID)
}

// AddPaymentIDs adds the payment edge to Payment by ids.
func (pc *PromotionCreate) AddPaymentIDs(ids ...int) *PromotionCreate {
	pc.mutation.AddPaymentIDs(ids...)
	return pc
}

// AddPayment adds the payment edges to Payment.
func (pc *PromotionCreate) AddPayment(p ...*Payment) *PromotionCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPaymentIDs(ids...)
}

// Mutation returns the PromotionMutation object of the builder.
func (pc *PromotionCreate) Mutation() *PromotionMutation {
	return pc.mutation
}

// Save creates the Promotion in the database.
func (pc *PromotionCreate) Save(ctx context.Context) (*Promotion, error) {
	if _, ok := pc.mutation.NAME(); !ok {
		return nil, &ValidationError{Name: "NAME", err: errors.New("ent: missing required field \"NAME\"")}
	}
	if v, ok := pc.mutation.NAME(); ok {
		if err := promotion.NAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "NAME", err: fmt.Errorf("ent: validator failed for field \"NAME\": %w", err)}
		}
	}
	if _, ok := pc.mutation.DESC(); !ok {
		return nil, &ValidationError{Name: "DESC", err: errors.New("ent: missing required field \"DESC\"")}
	}
	if v, ok := pc.mutation.DESC(); ok {
		if err := promotion.DESCValidator(v); err != nil {
			return nil, &ValidationError{Name: "DESC", err: fmt.Errorf("ent: validator failed for field \"DESC\": %w", err)}
		}
	}
	if _, ok := pc.mutation.CODE(); !ok {
		return nil, &ValidationError{Name: "CODE", err: errors.New("ent: missing required field \"CODE\"")}
	}
	if v, ok := pc.mutation.CODE(); ok {
		if err := promotion.CODEValidator(v); err != nil {
			return nil, &ValidationError{Name: "CODE", err: fmt.Errorf("ent: validator failed for field \"CODE\": %w", err)}
		}
	}
	var (
		err  error
		node *Promotion
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PromotionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PromotionCreate) SaveX(ctx context.Context) *Promotion {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PromotionCreate) sqlSave(ctx context.Context) (*Promotion, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *PromotionCreate) createSpec() (*Promotion, *sqlgraph.CreateSpec) {
	var (
		pr    = &Promotion{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: promotion.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: promotion.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.NAME(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: promotion.FieldNAME,
		})
		pr.NAME = value
	}
	if value, ok := pc.mutation.DESC(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: promotion.FieldDESC,
		})
		pr.DESC = value
	}
	if value, ok := pc.mutation.CODE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: promotion.FieldCODE,
		})
		pr.CODE = value
	}
	if nodes := pc.mutation.PromotiontypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotion.PromotiontypeTable,
			Columns: []string{promotion.PromotiontypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotiontype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PromotionamountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotion.PromotionamountTable,
			Columns: []string{promotion.PromotionamountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotionamount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PromotiontimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotion.PromotiontimeTable,
			Columns: []string{promotion.PromotiontimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotiontime.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotion.PaymentTable,
			Columns: []string{promotion.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
