// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/G16/app/ent/classifier"
	"github.com/G16/app/ent/employee"
	"github.com/G16/app/ent/equipment"
	"github.com/G16/app/ent/equipmenttype"
	"github.com/G16/app/ent/zone"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Equipment is the model entity for the Equipment schema.
type Equipment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EQUIPMENTNAME holds the value of the "EQUIPMENTNAME" field.
	EQUIPMENTNAME string `json:"EQUIPMENTNAME,omitempty"`
	// EQUIPMENTAMOUNT holds the value of the "EQUIPMENTAMOUNT" field.
	EQUIPMENTAMOUNT int `json:"EQUIPMENTAMOUNT,omitempty"`
	// EQUIPMENTDETAIL holds the value of the "EQUIPMENTDETAIL" field.
	EQUIPMENTDETAIL string `json:"EQUIPMENTDETAIL,omitempty"`
	// EQUIPMENTDATE holds the value of the "EQUIPMENTDATE" field.
	EQUIPMENTDATE time.Time `json:"EQUIPMENTDATE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentQuery when eager-loading is set.
	Edges                   EquipmentEdges `json:"edges"`
	classifier_equipment    *int
	employee_equipment      *int
	equipmenttype_equipment *int
	zone_equipment          *int
}

// EquipmentEdges holds the relations/edges for other nodes in the graph.
type EquipmentEdges struct {
	// Classifier holds the value of the classifier edge.
	Classifier *Classifier
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Equipmenttype holds the value of the equipmenttype edge.
	Equipmenttype *Equipmenttype
	// Zone holds the value of the zone edge.
	Zone *Zone
	// Equipmentrental holds the value of the equipmentrental edge.
	Equipmentrental []*Equipmentrental
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ClassifierOrErr returns the Classifier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) ClassifierOrErr() (*Classifier, error) {
	if e.loadedTypes[0] {
		if e.Classifier == nil {
			// The edge classifier was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: classifier.Label}
		}
		return e.Classifier, nil
	}
	return nil, &NotLoadedError{edge: "classifier"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// EquipmenttypeOrErr returns the Equipmenttype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) EquipmenttypeOrErr() (*Equipmenttype, error) {
	if e.loadedTypes[2] {
		if e.Equipmenttype == nil {
			// The edge equipmenttype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: equipmenttype.Label}
		}
		return e.Equipmenttype, nil
	}
	return nil, &NotLoadedError{edge: "equipmenttype"}
}

// ZoneOrErr returns the Zone value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) ZoneOrErr() (*Zone, error) {
	if e.loadedTypes[3] {
		if e.Zone == nil {
			// The edge zone was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: zone.Label}
		}
		return e.Zone, nil
	}
	return nil, &NotLoadedError{edge: "zone"}
}

// EquipmentrentalOrErr returns the Equipmentrental value or an error if the edge
// was not loaded in eager-loading.
func (e EquipmentEdges) EquipmentrentalOrErr() ([]*Equipmentrental, error) {
	if e.loadedTypes[4] {
		return e.Equipmentrental, nil
	}
	return nil, &NotLoadedError{edge: "equipmentrental"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Equipment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // EQUIPMENTNAME
		&sql.NullInt64{},  // EQUIPMENTAMOUNT
		&sql.NullString{}, // EQUIPMENTDETAIL
		&sql.NullTime{},   // EQUIPMENTDATE
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Equipment) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // classifier_equipment
		&sql.NullInt64{}, // employee_equipment
		&sql.NullInt64{}, // equipmenttype_equipment
		&sql.NullInt64{}, // zone_equipment
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Equipment fields.
func (e *Equipment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(equipment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field EQUIPMENTNAME", values[0])
	} else if value.Valid {
		e.EQUIPMENTNAME = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field EQUIPMENTAMOUNT", values[1])
	} else if value.Valid {
		e.EQUIPMENTAMOUNT = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field EQUIPMENTDETAIL", values[2])
	} else if value.Valid {
		e.EQUIPMENTDETAIL = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field EQUIPMENTDATE", values[3])
	} else if value.Valid {
		e.EQUIPMENTDATE = value.Time
	}
	values = values[4:]
	if len(values) == len(equipment.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field classifier_equipment", value)
		} else if value.Valid {
			e.classifier_equipment = new(int)
			*e.classifier_equipment = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_equipment", value)
		} else if value.Valid {
			e.employee_equipment = new(int)
			*e.employee_equipment = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field equipmenttype_equipment", value)
		} else if value.Valid {
			e.equipmenttype_equipment = new(int)
			*e.equipmenttype_equipment = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field zone_equipment", value)
		} else if value.Valid {
			e.zone_equipment = new(int)
			*e.zone_equipment = int(value.Int64)
		}
	}
	return nil
}

// QueryClassifier queries the classifier edge of the Equipment.
func (e *Equipment) QueryClassifier() *ClassifierQuery {
	return (&EquipmentClient{config: e.config}).QueryClassifier(e)
}

// QueryEmployee queries the employee edge of the Equipment.
func (e *Equipment) QueryEmployee() *EmployeeQuery {
	return (&EquipmentClient{config: e.config}).QueryEmployee(e)
}

// QueryEquipmenttype queries the equipmenttype edge of the Equipment.
func (e *Equipment) QueryEquipmenttype() *EquipmenttypeQuery {
	return (&EquipmentClient{config: e.config}).QueryEquipmenttype(e)
}

// QueryZone queries the zone edge of the Equipment.
func (e *Equipment) QueryZone() *ZoneQuery {
	return (&EquipmentClient{config: e.config}).QueryZone(e)
}

// QueryEquipmentrental queries the equipmentrental edge of the Equipment.
func (e *Equipment) QueryEquipmentrental() *EquipmentrentalQuery {
	return (&EquipmentClient{config: e.config}).QueryEquipmentrental(e)
}

// Update returns a builder for updating this Equipment.
// Note that, you need to call Equipment.Unwrap() before calling this method, if this Equipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Equipment) Update() *EquipmentUpdateOne {
	return (&EquipmentClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Equipment) Unwrap() *Equipment {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Equipment is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Equipment) String() string {
	var builder strings.Builder
	builder.WriteString("Equipment(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", EQUIPMENTNAME=")
	builder.WriteString(e.EQUIPMENTNAME)
	builder.WriteString(", EQUIPMENTAMOUNT=")
	builder.WriteString(fmt.Sprintf("%v", e.EQUIPMENTAMOUNT))
	builder.WriteString(", EQUIPMENTDETAIL=")
	builder.WriteString(e.EQUIPMENTDETAIL)
	builder.WriteString(", EQUIPMENTDATE=")
	builder.WriteString(e.EQUIPMENTDATE.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EquipmentSlice is a parsable slice of Equipment.
type EquipmentSlice []*Equipment

func (e EquipmentSlice) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
