// Code generated by entc, DO NOT EDIT.

package equipmentrental

import (
	"time"

	"github.com/G16/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RENTALAMOUNT applies equality check predicate on the "RENTALAMOUNT" field. It's identical to RENTALAMOUNTEQ.
func RENTALAMOUNT(v int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRENTALAMOUNT), v))
	})
}

// RENTALDATE applies equality check predicate on the "RENTALDATE" field. It's identical to RENTALDATEEQ.
func RENTALDATE(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRENTALDATE), v))
	})
}

// RETURNDATE applies equality check predicate on the "RETURNDATE" field. It's identical to RETURNDATEEQ.
func RETURNDATE(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRETURNDATE), v))
	})
}

// RENTALAMOUNTEQ applies the EQ predicate on the "RENTALAMOUNT" field.
func RENTALAMOUNTEQ(v int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRENTALAMOUNT), v))
	})
}

// RENTALAMOUNTNEQ applies the NEQ predicate on the "RENTALAMOUNT" field.
func RENTALAMOUNTNEQ(v int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRENTALAMOUNT), v))
	})
}

// RENTALAMOUNTIn applies the In predicate on the "RENTALAMOUNT" field.
func RENTALAMOUNTIn(vs ...int) predicate.Equipmentrental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipmentrental(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRENTALAMOUNT), v...))
	})
}

// RENTALAMOUNTNotIn applies the NotIn predicate on the "RENTALAMOUNT" field.
func RENTALAMOUNTNotIn(vs ...int) predicate.Equipmentrental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipmentrental(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRENTALAMOUNT), v...))
	})
}

// RENTALAMOUNTGT applies the GT predicate on the "RENTALAMOUNT" field.
func RENTALAMOUNTGT(v int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRENTALAMOUNT), v))
	})
}

// RENTALAMOUNTGTE applies the GTE predicate on the "RENTALAMOUNT" field.
func RENTALAMOUNTGTE(v int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRENTALAMOUNT), v))
	})
}

// RENTALAMOUNTLT applies the LT predicate on the "RENTALAMOUNT" field.
func RENTALAMOUNTLT(v int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRENTALAMOUNT), v))
	})
}

// RENTALAMOUNTLTE applies the LTE predicate on the "RENTALAMOUNT" field.
func RENTALAMOUNTLTE(v int) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRENTALAMOUNT), v))
	})
}

// RENTALDATEEQ applies the EQ predicate on the "RENTALDATE" field.
func RENTALDATEEQ(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRENTALDATE), v))
	})
}

// RENTALDATENEQ applies the NEQ predicate on the "RENTALDATE" field.
func RENTALDATENEQ(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRENTALDATE), v))
	})
}

// RENTALDATEIn applies the In predicate on the "RENTALDATE" field.
func RENTALDATEIn(vs ...time.Time) predicate.Equipmentrental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipmentrental(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRENTALDATE), v...))
	})
}

// RENTALDATENotIn applies the NotIn predicate on the "RENTALDATE" field.
func RENTALDATENotIn(vs ...time.Time) predicate.Equipmentrental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipmentrental(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRENTALDATE), v...))
	})
}

// RENTALDATEGT applies the GT predicate on the "RENTALDATE" field.
func RENTALDATEGT(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRENTALDATE), v))
	})
}

// RENTALDATEGTE applies the GTE predicate on the "RENTALDATE" field.
func RENTALDATEGTE(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRENTALDATE), v))
	})
}

// RENTALDATELT applies the LT predicate on the "RENTALDATE" field.
func RENTALDATELT(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRENTALDATE), v))
	})
}

// RENTALDATELTE applies the LTE predicate on the "RENTALDATE" field.
func RENTALDATELTE(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRENTALDATE), v))
	})
}

// RETURNDATEEQ applies the EQ predicate on the "RETURNDATE" field.
func RETURNDATEEQ(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRETURNDATE), v))
	})
}

// RETURNDATENEQ applies the NEQ predicate on the "RETURNDATE" field.
func RETURNDATENEQ(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRETURNDATE), v))
	})
}

// RETURNDATEIn applies the In predicate on the "RETURNDATE" field.
func RETURNDATEIn(vs ...time.Time) predicate.Equipmentrental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipmentrental(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRETURNDATE), v...))
	})
}

// RETURNDATENotIn applies the NotIn predicate on the "RETURNDATE" field.
func RETURNDATENotIn(vs ...time.Time) predicate.Equipmentrental {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipmentrental(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRETURNDATE), v...))
	})
}

// RETURNDATEGT applies the GT predicate on the "RETURNDATE" field.
func RETURNDATEGT(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRETURNDATE), v))
	})
}

// RETURNDATEGTE applies the GTE predicate on the "RETURNDATE" field.
func RETURNDATEGTE(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRETURNDATE), v))
	})
}

// RETURNDATELT applies the LT predicate on the "RETURNDATE" field.
func RETURNDATELT(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRETURNDATE), v))
	})
}

// RETURNDATELTE applies the LTE predicate on the "RETURNDATE" field.
func RETURNDATELTE(v time.Time) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRETURNDATE), v))
	})
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMember applies the HasEdge predicate on the "member" edge.
func HasMember() predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.Member) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipmenttype applies the HasEdge predicate on the "equipmenttype" edge.
func HasEquipmenttype() predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmenttypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmenttypeTable, EquipmenttypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmenttypeWith applies the HasEdge predicate on the "equipmenttype" edge with a given conditions (other predicates).
func HasEquipmenttypeWith(preds ...predicate.Equipmenttype) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmenttypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmenttypeTable, EquipmenttypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Equipmentrental) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Equipmentrental) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Equipmentrental) predicate.Equipmentrental {
	return predicate.Equipmentrental(func(s *sql.Selector) {
		p(s.Not())
	})
}
