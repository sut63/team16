// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/G16/app/ent/bookcourse"
	"github.com/G16/app/ent/course"
	"github.com/G16/app/ent/employee"
	"github.com/G16/app/ent/member"
	"github.com/G16/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// BookcourseUpdate is the builder for updating Bookcourse entities.
type BookcourseUpdate struct {
	config
	hooks      []Hook
	mutation   *BookcourseMutation
	predicates []predicate.Bookcourse
}

// Where adds a new predicate for the builder.
func (bu *BookcourseUpdate) Where(ps ...predicate.Bookcourse) *BookcourseUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetBOOKTIME sets the BOOKTIME field.
func (bu *BookcourseUpdate) SetBOOKTIME(t time.Time) *BookcourseUpdate {
	bu.mutation.SetBOOKTIME(t)
	return bu
}

// SetCourseID sets the course edge to Course by id.
func (bu *BookcourseUpdate) SetCourseID(id int) *BookcourseUpdate {
	bu.mutation.SetCourseID(id)
	return bu
}

// SetNillableCourseID sets the course edge to Course by id if the given value is not nil.
func (bu *BookcourseUpdate) SetNillableCourseID(id *int) *BookcourseUpdate {
	if id != nil {
		bu = bu.SetCourseID(*id)
	}
	return bu
}

// SetCourse sets the course edge to Course.
func (bu *BookcourseUpdate) SetCourse(c *Course) *BookcourseUpdate {
	return bu.SetCourseID(c.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (bu *BookcourseUpdate) SetEmployeeID(id int) *BookcourseUpdate {
	bu.mutation.SetEmployeeID(id)
	return bu
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (bu *BookcourseUpdate) SetNillableEmployeeID(id *int) *BookcourseUpdate {
	if id != nil {
		bu = bu.SetEmployeeID(*id)
	}
	return bu
}

// SetEmployee sets the employee edge to Employee.
func (bu *BookcourseUpdate) SetEmployee(e *Employee) *BookcourseUpdate {
	return bu.SetEmployeeID(e.ID)
}

// SetMemberID sets the member edge to Member by id.
func (bu *BookcourseUpdate) SetMemberID(id int) *BookcourseUpdate {
	bu.mutation.SetMemberID(id)
	return bu
}

// SetNillableMemberID sets the member edge to Member by id if the given value is not nil.
func (bu *BookcourseUpdate) SetNillableMemberID(id *int) *BookcourseUpdate {
	if id != nil {
		bu = bu.SetMemberID(*id)
	}
	return bu
}

// SetMember sets the member edge to Member.
func (bu *BookcourseUpdate) SetMember(m *Member) *BookcourseUpdate {
	return bu.SetMemberID(m.ID)
}

// Mutation returns the BookcourseMutation object of the builder.
func (bu *BookcourseUpdate) Mutation() *BookcourseMutation {
	return bu.mutation
}

// ClearCourse clears the course edge to Course.
func (bu *BookcourseUpdate) ClearCourse() *BookcourseUpdate {
	bu.mutation.ClearCourse()
	return bu
}

// ClearEmployee clears the employee edge to Employee.
func (bu *BookcourseUpdate) ClearEmployee() *BookcourseUpdate {
	bu.mutation.ClearEmployee()
	return bu
}

// ClearMember clears the member edge to Member.
func (bu *BookcourseUpdate) ClearMember() *BookcourseUpdate {
	bu.mutation.ClearMember()
	return bu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BookcourseUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookcourseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookcourseUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookcourseUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookcourseUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BookcourseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookcourse.Table,
			Columns: bookcourse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookcourse.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BOOKTIME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookcourse.FieldBOOKTIME,
		})
	}
	if bu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.CourseTable,
			Columns: []string{bookcourse.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.CourseTable,
			Columns: []string{bookcourse.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.EmployeeTable,
			Columns: []string{bookcourse.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.EmployeeTable,
			Columns: []string{bookcourse.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.MemberTable,
			Columns: []string{bookcourse.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.MemberTable,
			Columns: []string{bookcourse.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookcourse.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BookcourseUpdateOne is the builder for updating a single Bookcourse entity.
type BookcourseUpdateOne struct {
	config
	hooks    []Hook
	mutation *BookcourseMutation
}

// SetBOOKTIME sets the BOOKTIME field.
func (buo *BookcourseUpdateOne) SetBOOKTIME(t time.Time) *BookcourseUpdateOne {
	buo.mutation.SetBOOKTIME(t)
	return buo
}

// SetCourseID sets the course edge to Course by id.
func (buo *BookcourseUpdateOne) SetCourseID(id int) *BookcourseUpdateOne {
	buo.mutation.SetCourseID(id)
	return buo
}

// SetNillableCourseID sets the course edge to Course by id if the given value is not nil.
func (buo *BookcourseUpdateOne) SetNillableCourseID(id *int) *BookcourseUpdateOne {
	if id != nil {
		buo = buo.SetCourseID(*id)
	}
	return buo
}

// SetCourse sets the course edge to Course.
func (buo *BookcourseUpdateOne) SetCourse(c *Course) *BookcourseUpdateOne {
	return buo.SetCourseID(c.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (buo *BookcourseUpdateOne) SetEmployeeID(id int) *BookcourseUpdateOne {
	buo.mutation.SetEmployeeID(id)
	return buo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (buo *BookcourseUpdateOne) SetNillableEmployeeID(id *int) *BookcourseUpdateOne {
	if id != nil {
		buo = buo.SetEmployeeID(*id)
	}
	return buo
}

// SetEmployee sets the employee edge to Employee.
func (buo *BookcourseUpdateOne) SetEmployee(e *Employee) *BookcourseUpdateOne {
	return buo.SetEmployeeID(e.ID)
}

// SetMemberID sets the member edge to Member by id.
func (buo *BookcourseUpdateOne) SetMemberID(id int) *BookcourseUpdateOne {
	buo.mutation.SetMemberID(id)
	return buo
}

// SetNillableMemberID sets the member edge to Member by id if the given value is not nil.
func (buo *BookcourseUpdateOne) SetNillableMemberID(id *int) *BookcourseUpdateOne {
	if id != nil {
		buo = buo.SetMemberID(*id)
	}
	return buo
}

// SetMember sets the member edge to Member.
func (buo *BookcourseUpdateOne) SetMember(m *Member) *BookcourseUpdateOne {
	return buo.SetMemberID(m.ID)
}

// Mutation returns the BookcourseMutation object of the builder.
func (buo *BookcourseUpdateOne) Mutation() *BookcourseMutation {
	return buo.mutation
}

// ClearCourse clears the course edge to Course.
func (buo *BookcourseUpdateOne) ClearCourse() *BookcourseUpdateOne {
	buo.mutation.ClearCourse()
	return buo
}

// ClearEmployee clears the employee edge to Employee.
func (buo *BookcourseUpdateOne) ClearEmployee() *BookcourseUpdateOne {
	buo.mutation.ClearEmployee()
	return buo
}

// ClearMember clears the member edge to Member.
func (buo *BookcourseUpdateOne) ClearMember() *BookcourseUpdateOne {
	buo.mutation.ClearMember()
	return buo
}

// Save executes the query and returns the updated entity.
func (buo *BookcourseUpdateOne) Save(ctx context.Context) (*Bookcourse, error) {

	var (
		err  error
		node *Bookcourse
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookcourseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookcourseUpdateOne) SaveX(ctx context.Context) *Bookcourse {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BookcourseUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookcourseUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BookcourseUpdateOne) sqlSave(ctx context.Context) (b *Bookcourse, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookcourse.Table,
			Columns: bookcourse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookcourse.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bookcourse.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.BOOKTIME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookcourse.FieldBOOKTIME,
		})
	}
	if buo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.CourseTable,
			Columns: []string{bookcourse.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.CourseTable,
			Columns: []string{bookcourse.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.EmployeeTable,
			Columns: []string{bookcourse.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.EmployeeTable,
			Columns: []string{bookcourse.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.MemberTable,
			Columns: []string{bookcourse.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.MemberTable,
			Columns: []string{bookcourse.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	b = &Bookcourse{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookcourse.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
