// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/G16/app/ent/promotion"
	"github.com/G16/app/ent/promotiontime"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PromotiontimeCreate is the builder for creating a Promotiontime entity.
type PromotiontimeCreate struct {
	config
	mutation *PromotiontimeMutation
	hooks    []Hook
}

// SetDATE sets the DATE field.
func (pc *PromotiontimeCreate) SetDATE(t time.Time) *PromotiontimeCreate {
	pc.mutation.SetDATE(t)
	return pc
}

// SetHOUR sets the HOUR field.
func (pc *PromotiontimeCreate) SetHOUR(i int) *PromotiontimeCreate {
	pc.mutation.SetHOUR(i)
	return pc
}

// SetMINUTE sets the MINUTE field.
func (pc *PromotiontimeCreate) SetMINUTE(i int) *PromotiontimeCreate {
	pc.mutation.SetMINUTE(i)
	return pc
}

// AddPromotionIDs adds the promotion edge to Promotion by ids.
func (pc *PromotiontimeCreate) AddPromotionIDs(ids ...int) *PromotiontimeCreate {
	pc.mutation.AddPromotionIDs(ids...)
	return pc
}

// AddPromotion adds the promotion edges to Promotion.
func (pc *PromotiontimeCreate) AddPromotion(p ...*Promotion) *PromotiontimeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPromotionIDs(ids...)
}

// Mutation returns the PromotiontimeMutation object of the builder.
func (pc *PromotiontimeCreate) Mutation() *PromotiontimeMutation {
	return pc.mutation
}

// Save creates the Promotiontime in the database.
func (pc *PromotiontimeCreate) Save(ctx context.Context) (*Promotiontime, error) {
	if _, ok := pc.mutation.DATE(); !ok {
		return nil, &ValidationError{Name: "DATE", err: errors.New("ent: missing required field \"DATE\"")}
	}
	if _, ok := pc.mutation.HOUR(); !ok {
		return nil, &ValidationError{Name: "HOUR", err: errors.New("ent: missing required field \"HOUR\"")}
	}
	if v, ok := pc.mutation.HOUR(); ok {
		if err := promotiontime.HOURValidator(v); err != nil {
			return nil, &ValidationError{Name: "HOUR", err: fmt.Errorf("ent: validator failed for field \"HOUR\": %w", err)}
		}
	}
	if _, ok := pc.mutation.MINUTE(); !ok {
		return nil, &ValidationError{Name: "MINUTE", err: errors.New("ent: missing required field \"MINUTE\"")}
	}
	if v, ok := pc.mutation.MINUTE(); ok {
		if err := promotiontime.MINUTEValidator(v); err != nil {
			return nil, &ValidationError{Name: "MINUTE", err: fmt.Errorf("ent: validator failed for field \"MINUTE\": %w", err)}
		}
	}
	var (
		err  error
		node *Promotiontime
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PromotiontimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PromotiontimeCreate) SaveX(ctx context.Context) *Promotiontime {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PromotiontimeCreate) sqlSave(ctx context.Context) (*Promotiontime, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *PromotiontimeCreate) createSpec() (*Promotiontime, *sqlgraph.CreateSpec) {
	var (
		pr    = &Promotiontime{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: promotiontime.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: promotiontime.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.DATE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: promotiontime.FieldDATE,
		})
		pr.DATE = value
	}
	if value, ok := pc.mutation.HOUR(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: promotiontime.FieldHOUR,
		})
		pr.HOUR = value
	}
	if value, ok := pc.mutation.MINUTE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: promotiontime.FieldMINUTE,
		})
		pr.MINUTE = value
	}
	if nodes := pc.mutation.PromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotiontime.PromotionTable,
			Columns: []string{promotiontime.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
