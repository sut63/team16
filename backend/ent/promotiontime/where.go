// Code generated by entc, DO NOT EDIT.

package promotiontime

import (
	"time"

	"github.com/G16/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DATE applies equality check predicate on the "DATE" field. It's identical to DATEEQ.
func DATE(v time.Time) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDATE), v))
	})
}

// HOUR applies equality check predicate on the "HOUR" field. It's identical to HOUREQ.
func HOUR(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHOUR), v))
	})
}

// MINUTE applies equality check predicate on the "MINUTE" field. It's identical to MINUTEEQ.
func MINUTE(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMINUTE), v))
	})
}

// DATEEQ applies the EQ predicate on the "DATE" field.
func DATEEQ(v time.Time) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDATE), v))
	})
}

// DATENEQ applies the NEQ predicate on the "DATE" field.
func DATENEQ(v time.Time) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDATE), v))
	})
}

// DATEIn applies the In predicate on the "DATE" field.
func DATEIn(vs ...time.Time) predicate.Promotiontime {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Promotiontime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDATE), v...))
	})
}

// DATENotIn applies the NotIn predicate on the "DATE" field.
func DATENotIn(vs ...time.Time) predicate.Promotiontime {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Promotiontime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDATE), v...))
	})
}

// DATEGT applies the GT predicate on the "DATE" field.
func DATEGT(v time.Time) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDATE), v))
	})
}

// DATEGTE applies the GTE predicate on the "DATE" field.
func DATEGTE(v time.Time) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDATE), v))
	})
}

// DATELT applies the LT predicate on the "DATE" field.
func DATELT(v time.Time) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDATE), v))
	})
}

// DATELTE applies the LTE predicate on the "DATE" field.
func DATELTE(v time.Time) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDATE), v))
	})
}

// HOUREQ applies the EQ predicate on the "HOUR" field.
func HOUREQ(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHOUR), v))
	})
}

// HOURNEQ applies the NEQ predicate on the "HOUR" field.
func HOURNEQ(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHOUR), v))
	})
}

// HOURIn applies the In predicate on the "HOUR" field.
func HOURIn(vs ...int) predicate.Promotiontime {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Promotiontime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHOUR), v...))
	})
}

// HOURNotIn applies the NotIn predicate on the "HOUR" field.
func HOURNotIn(vs ...int) predicate.Promotiontime {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Promotiontime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHOUR), v...))
	})
}

// HOURGT applies the GT predicate on the "HOUR" field.
func HOURGT(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHOUR), v))
	})
}

// HOURGTE applies the GTE predicate on the "HOUR" field.
func HOURGTE(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHOUR), v))
	})
}

// HOURLT applies the LT predicate on the "HOUR" field.
func HOURLT(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHOUR), v))
	})
}

// HOURLTE applies the LTE predicate on the "HOUR" field.
func HOURLTE(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHOUR), v))
	})
}

// MINUTEEQ applies the EQ predicate on the "MINUTE" field.
func MINUTEEQ(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMINUTE), v))
	})
}

// MINUTENEQ applies the NEQ predicate on the "MINUTE" field.
func MINUTENEQ(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMINUTE), v))
	})
}

// MINUTEIn applies the In predicate on the "MINUTE" field.
func MINUTEIn(vs ...int) predicate.Promotiontime {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Promotiontime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMINUTE), v...))
	})
}

// MINUTENotIn applies the NotIn predicate on the "MINUTE" field.
func MINUTENotIn(vs ...int) predicate.Promotiontime {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Promotiontime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMINUTE), v...))
	})
}

// MINUTEGT applies the GT predicate on the "MINUTE" field.
func MINUTEGT(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMINUTE), v))
	})
}

// MINUTEGTE applies the GTE predicate on the "MINUTE" field.
func MINUTEGTE(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMINUTE), v))
	})
}

// MINUTELT applies the LT predicate on the "MINUTE" field.
func MINUTELT(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMINUTE), v))
	})
}

// MINUTELTE applies the LTE predicate on the "MINUTE" field.
func MINUTELTE(v int) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMINUTE), v))
	})
}

// HasPromotion applies the HasEdge predicate on the "promotion" edge.
func HasPromotion() predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PromotionTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PromotionTable, PromotionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPromotionWith applies the HasEdge predicate on the "promotion" edge with a given conditions (other predicates).
func HasPromotionWith(preds ...predicate.Promotion) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PromotionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PromotionTable, PromotionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Promotiontime) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Promotiontime) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Promotiontime) predicate.Promotiontime {
	return predicate.Promotiontime(func(s *sql.Selector) {
		p(s.Not())
	})
}
