// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/G16/app/ent/equipment"
	"github.com/G16/app/ent/predicate"
	"github.com/G16/app/ent/zone"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ZoneUpdate is the builder for updating Zone entities.
type ZoneUpdate struct {
	config
	hooks      []Hook
	mutation   *ZoneMutation
	predicates []predicate.Zone
}

// Where adds a new predicate for the builder.
func (zu *ZoneUpdate) Where(ps ...predicate.Zone) *ZoneUpdate {
	zu.predicates = append(zu.predicates, ps...)
	return zu
}

// SetEQUIPMENTZONE sets the EQUIPMENTZONE field.
func (zu *ZoneUpdate) SetEQUIPMENTZONE(s string) *ZoneUpdate {
	zu.mutation.SetEQUIPMENTZONE(s)
	return zu
}

// AddEquipmentIDs adds the equipment edge to Equipment by ids.
func (zu *ZoneUpdate) AddEquipmentIDs(ids ...int) *ZoneUpdate {
	zu.mutation.AddEquipmentIDs(ids...)
	return zu
}

// AddEquipment adds the equipment edges to Equipment.
func (zu *ZoneUpdate) AddEquipment(e ...*Equipment) *ZoneUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return zu.AddEquipmentIDs(ids...)
}

// Mutation returns the ZoneMutation object of the builder.
func (zu *ZoneUpdate) Mutation() *ZoneMutation {
	return zu.mutation
}

// RemoveEquipmentIDs removes the equipment edge to Equipment by ids.
func (zu *ZoneUpdate) RemoveEquipmentIDs(ids ...int) *ZoneUpdate {
	zu.mutation.RemoveEquipmentIDs(ids...)
	return zu
}

// RemoveEquipment removes equipment edges to Equipment.
func (zu *ZoneUpdate) RemoveEquipment(e ...*Equipment) *ZoneUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return zu.RemoveEquipmentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (zu *ZoneUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(zu.hooks) == 0 {
		affected, err = zu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ZoneMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			zu.mutation = mutation
			affected, err = zu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(zu.hooks) - 1; i >= 0; i-- {
			mut = zu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, zu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (zu *ZoneUpdate) SaveX(ctx context.Context) int {
	affected, err := zu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (zu *ZoneUpdate) Exec(ctx context.Context) error {
	_, err := zu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (zu *ZoneUpdate) ExecX(ctx context.Context) {
	if err := zu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (zu *ZoneUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   zone.Table,
			Columns: zone.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: zone.FieldID,
			},
		},
	}
	if ps := zu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := zu.mutation.EQUIPMENTZONE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: zone.FieldEQUIPMENTZONE,
		})
	}
	if nodes := zu.mutation.RemovedEquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   zone.EquipmentTable,
			Columns: []string{zone.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := zu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   zone.EquipmentTable,
			Columns: []string{zone.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, zu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{zone.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ZoneUpdateOne is the builder for updating a single Zone entity.
type ZoneUpdateOne struct {
	config
	hooks    []Hook
	mutation *ZoneMutation
}

// SetEQUIPMENTZONE sets the EQUIPMENTZONE field.
func (zuo *ZoneUpdateOne) SetEQUIPMENTZONE(s string) *ZoneUpdateOne {
	zuo.mutation.SetEQUIPMENTZONE(s)
	return zuo
}

// AddEquipmentIDs adds the equipment edge to Equipment by ids.
func (zuo *ZoneUpdateOne) AddEquipmentIDs(ids ...int) *ZoneUpdateOne {
	zuo.mutation.AddEquipmentIDs(ids...)
	return zuo
}

// AddEquipment adds the equipment edges to Equipment.
func (zuo *ZoneUpdateOne) AddEquipment(e ...*Equipment) *ZoneUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return zuo.AddEquipmentIDs(ids...)
}

// Mutation returns the ZoneMutation object of the builder.
func (zuo *ZoneUpdateOne) Mutation() *ZoneMutation {
	return zuo.mutation
}

// RemoveEquipmentIDs removes the equipment edge to Equipment by ids.
func (zuo *ZoneUpdateOne) RemoveEquipmentIDs(ids ...int) *ZoneUpdateOne {
	zuo.mutation.RemoveEquipmentIDs(ids...)
	return zuo
}

// RemoveEquipment removes equipment edges to Equipment.
func (zuo *ZoneUpdateOne) RemoveEquipment(e ...*Equipment) *ZoneUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return zuo.RemoveEquipmentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (zuo *ZoneUpdateOne) Save(ctx context.Context) (*Zone, error) {

	var (
		err  error
		node *Zone
	)
	if len(zuo.hooks) == 0 {
		node, err = zuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ZoneMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			zuo.mutation = mutation
			node, err = zuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(zuo.hooks) - 1; i >= 0; i-- {
			mut = zuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, zuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (zuo *ZoneUpdateOne) SaveX(ctx context.Context) *Zone {
	z, err := zuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return z
}

// Exec executes the query on the entity.
func (zuo *ZoneUpdateOne) Exec(ctx context.Context) error {
	_, err := zuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (zuo *ZoneUpdateOne) ExecX(ctx context.Context) {
	if err := zuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (zuo *ZoneUpdateOne) sqlSave(ctx context.Context) (z *Zone, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   zone.Table,
			Columns: zone.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: zone.FieldID,
			},
		},
	}
	id, ok := zuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Zone.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := zuo.mutation.EQUIPMENTZONE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: zone.FieldEQUIPMENTZONE,
		})
	}
	if nodes := zuo.mutation.RemovedEquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   zone.EquipmentTable,
			Columns: []string{zone.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := zuo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   zone.EquipmentTable,
			Columns: []string{zone.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	z = &Zone{config: zuo.config}
	_spec.Assign = z.assignValues
	_spec.ScanValues = z.scanValues()
	if err = sqlgraph.UpdateNode(ctx, zuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{zone.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return z, nil
}
