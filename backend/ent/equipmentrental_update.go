// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/G16/app/ent/employee"
	"github.com/G16/app/ent/equipment"
	"github.com/G16/app/ent/equipmentrental"
	"github.com/G16/app/ent/equipmenttype"
	"github.com/G16/app/ent/member"
	"github.com/G16/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// EquipmentrentalUpdate is the builder for updating Equipmentrental entities.
type EquipmentrentalUpdate struct {
	config
	hooks      []Hook
	mutation   *EquipmentrentalMutation
	predicates []predicate.Equipmentrental
}

// Where adds a new predicate for the builder.
func (eu *EquipmentrentalUpdate) Where(ps ...predicate.Equipmentrental) *EquipmentrentalUpdate {
	eu.predicates = append(eu.predicates, ps...)
	return eu
}

// SetRENTALAMOUNT sets the RENTALAMOUNT field.
func (eu *EquipmentrentalUpdate) SetRENTALAMOUNT(s string) *EquipmentrentalUpdate {
	eu.mutation.SetRENTALAMOUNT(s)
	return eu
}

// SetRENTALDATE sets the RENTALDATE field.
func (eu *EquipmentrentalUpdate) SetRENTALDATE(t time.Time) *EquipmentrentalUpdate {
	eu.mutation.SetRENTALDATE(t)
	return eu
}

// SetRETURNDATE sets the RETURNDATE field.
func (eu *EquipmentrentalUpdate) SetRETURNDATE(t time.Time) *EquipmentrentalUpdate {
	eu.mutation.SetRETURNDATE(t)
	return eu
}

// SetEquipmentID sets the equipment edge to Equipment by id.
func (eu *EquipmentrentalUpdate) SetEquipmentID(id int) *EquipmentrentalUpdate {
	eu.mutation.SetEquipmentID(id)
	return eu
}

// SetNillableEquipmentID sets the equipment edge to Equipment by id if the given value is not nil.
func (eu *EquipmentrentalUpdate) SetNillableEquipmentID(id *int) *EquipmentrentalUpdate {
	if id != nil {
		eu = eu.SetEquipmentID(*id)
	}
	return eu
}

// SetEquipment sets the equipment edge to Equipment.
func (eu *EquipmentrentalUpdate) SetEquipment(e *Equipment) *EquipmentrentalUpdate {
	return eu.SetEquipmentID(e.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (eu *EquipmentrentalUpdate) SetEmployeeID(id int) *EquipmentrentalUpdate {
	eu.mutation.SetEmployeeID(id)
	return eu
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (eu *EquipmentrentalUpdate) SetNillableEmployeeID(id *int) *EquipmentrentalUpdate {
	if id != nil {
		eu = eu.SetEmployeeID(*id)
	}
	return eu
}

// SetEmployee sets the employee edge to Employee.
func (eu *EquipmentrentalUpdate) SetEmployee(e *Employee) *EquipmentrentalUpdate {
	return eu.SetEmployeeID(e.ID)
}

// SetMemberID sets the member edge to Member by id.
func (eu *EquipmentrentalUpdate) SetMemberID(id int) *EquipmentrentalUpdate {
	eu.mutation.SetMemberID(id)
	return eu
}

// SetNillableMemberID sets the member edge to Member by id if the given value is not nil.
func (eu *EquipmentrentalUpdate) SetNillableMemberID(id *int) *EquipmentrentalUpdate {
	if id != nil {
		eu = eu.SetMemberID(*id)
	}
	return eu
}

// SetMember sets the member edge to Member.
func (eu *EquipmentrentalUpdate) SetMember(m *Member) *EquipmentrentalUpdate {
	return eu.SetMemberID(m.ID)
}

// SetEquipmenttypeID sets the equipmenttype edge to Equipmenttype by id.
func (eu *EquipmentrentalUpdate) SetEquipmenttypeID(id int) *EquipmentrentalUpdate {
	eu.mutation.SetEquipmenttypeID(id)
	return eu
}

// SetNillableEquipmenttypeID sets the equipmenttype edge to Equipmenttype by id if the given value is not nil.
func (eu *EquipmentrentalUpdate) SetNillableEquipmenttypeID(id *int) *EquipmentrentalUpdate {
	if id != nil {
		eu = eu.SetEquipmenttypeID(*id)
	}
	return eu
}

// SetEquipmenttype sets the equipmenttype edge to Equipmenttype.
func (eu *EquipmentrentalUpdate) SetEquipmenttype(e *Equipmenttype) *EquipmentrentalUpdate {
	return eu.SetEquipmenttypeID(e.ID)
}

// Mutation returns the EquipmentrentalMutation object of the builder.
func (eu *EquipmentrentalUpdate) Mutation() *EquipmentrentalMutation {
	return eu.mutation
}

// ClearEquipment clears the equipment edge to Equipment.
func (eu *EquipmentrentalUpdate) ClearEquipment() *EquipmentrentalUpdate {
	eu.mutation.ClearEquipment()
	return eu
}

// ClearEmployee clears the employee edge to Employee.
func (eu *EquipmentrentalUpdate) ClearEmployee() *EquipmentrentalUpdate {
	eu.mutation.ClearEmployee()
	return eu
}

// ClearMember clears the member edge to Member.
func (eu *EquipmentrentalUpdate) ClearMember() *EquipmentrentalUpdate {
	eu.mutation.ClearMember()
	return eu
}

// ClearEquipmenttype clears the equipmenttype edge to Equipmenttype.
func (eu *EquipmentrentalUpdate) ClearEquipmenttype() *EquipmentrentalUpdate {
	eu.mutation.ClearEquipmenttype()
	return eu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *EquipmentrentalUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentrentalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EquipmentrentalUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EquipmentrentalUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EquipmentrentalUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EquipmentrentalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipmentrental.Table,
			Columns: equipmentrental.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: equipmentrental.FieldID,
			},
		},
	}
	if ps := eu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.RENTALAMOUNT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipmentrental.FieldRENTALAMOUNT,
		})
	}
	if value, ok := eu.mutation.RENTALDATE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: equipmentrental.FieldRENTALDATE,
		})
	}
	if value, ok := eu.mutation.RETURNDATE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: equipmentrental.FieldRETURNDATE,
		})
	}
	if eu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EquipmentTable,
			Columns: []string{equipmentrental.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EquipmentTable,
			Columns: []string{equipmentrental.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EmployeeTable,
			Columns: []string{equipmentrental.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EmployeeTable,
			Columns: []string{equipmentrental.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.MemberTable,
			Columns: []string{equipmentrental.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.MemberTable,
			Columns: []string{equipmentrental.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EquipmenttypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EquipmenttypeTable,
			Columns: []string{equipmentrental.EquipmenttypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipmenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EquipmenttypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EquipmenttypeTable,
			Columns: []string{equipmentrental.EquipmenttypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipmentrental.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EquipmentrentalUpdateOne is the builder for updating a single Equipmentrental entity.
type EquipmentrentalUpdateOne struct {
	config
	hooks    []Hook
	mutation *EquipmentrentalMutation
}

// SetRENTALAMOUNT sets the RENTALAMOUNT field.
func (euo *EquipmentrentalUpdateOne) SetRENTALAMOUNT(s string) *EquipmentrentalUpdateOne {
	euo.mutation.SetRENTALAMOUNT(s)
	return euo
}

// SetRENTALDATE sets the RENTALDATE field.
func (euo *EquipmentrentalUpdateOne) SetRENTALDATE(t time.Time) *EquipmentrentalUpdateOne {
	euo.mutation.SetRENTALDATE(t)
	return euo
}

// SetRETURNDATE sets the RETURNDATE field.
func (euo *EquipmentrentalUpdateOne) SetRETURNDATE(t time.Time) *EquipmentrentalUpdateOne {
	euo.mutation.SetRETURNDATE(t)
	return euo
}

// SetEquipmentID sets the equipment edge to Equipment by id.
func (euo *EquipmentrentalUpdateOne) SetEquipmentID(id int) *EquipmentrentalUpdateOne {
	euo.mutation.SetEquipmentID(id)
	return euo
}

// SetNillableEquipmentID sets the equipment edge to Equipment by id if the given value is not nil.
func (euo *EquipmentrentalUpdateOne) SetNillableEquipmentID(id *int) *EquipmentrentalUpdateOne {
	if id != nil {
		euo = euo.SetEquipmentID(*id)
	}
	return euo
}

// SetEquipment sets the equipment edge to Equipment.
func (euo *EquipmentrentalUpdateOne) SetEquipment(e *Equipment) *EquipmentrentalUpdateOne {
	return euo.SetEquipmentID(e.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (euo *EquipmentrentalUpdateOne) SetEmployeeID(id int) *EquipmentrentalUpdateOne {
	euo.mutation.SetEmployeeID(id)
	return euo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (euo *EquipmentrentalUpdateOne) SetNillableEmployeeID(id *int) *EquipmentrentalUpdateOne {
	if id != nil {
		euo = euo.SetEmployeeID(*id)
	}
	return euo
}

// SetEmployee sets the employee edge to Employee.
func (euo *EquipmentrentalUpdateOne) SetEmployee(e *Employee) *EquipmentrentalUpdateOne {
	return euo.SetEmployeeID(e.ID)
}

// SetMemberID sets the member edge to Member by id.
func (euo *EquipmentrentalUpdateOne) SetMemberID(id int) *EquipmentrentalUpdateOne {
	euo.mutation.SetMemberID(id)
	return euo
}

// SetNillableMemberID sets the member edge to Member by id if the given value is not nil.
func (euo *EquipmentrentalUpdateOne) SetNillableMemberID(id *int) *EquipmentrentalUpdateOne {
	if id != nil {
		euo = euo.SetMemberID(*id)
	}
	return euo
}

// SetMember sets the member edge to Member.
func (euo *EquipmentrentalUpdateOne) SetMember(m *Member) *EquipmentrentalUpdateOne {
	return euo.SetMemberID(m.ID)
}

// SetEquipmenttypeID sets the equipmenttype edge to Equipmenttype by id.
func (euo *EquipmentrentalUpdateOne) SetEquipmenttypeID(id int) *EquipmentrentalUpdateOne {
	euo.mutation.SetEquipmenttypeID(id)
	return euo
}

// SetNillableEquipmenttypeID sets the equipmenttype edge to Equipmenttype by id if the given value is not nil.
func (euo *EquipmentrentalUpdateOne) SetNillableEquipmenttypeID(id *int) *EquipmentrentalUpdateOne {
	if id != nil {
		euo = euo.SetEquipmenttypeID(*id)
	}
	return euo
}

// SetEquipmenttype sets the equipmenttype edge to Equipmenttype.
func (euo *EquipmentrentalUpdateOne) SetEquipmenttype(e *Equipmenttype) *EquipmentrentalUpdateOne {
	return euo.SetEquipmenttypeID(e.ID)
}

// Mutation returns the EquipmentrentalMutation object of the builder.
func (euo *EquipmentrentalUpdateOne) Mutation() *EquipmentrentalMutation {
	return euo.mutation
}

// ClearEquipment clears the equipment edge to Equipment.
func (euo *EquipmentrentalUpdateOne) ClearEquipment() *EquipmentrentalUpdateOne {
	euo.mutation.ClearEquipment()
	return euo
}

// ClearEmployee clears the employee edge to Employee.
func (euo *EquipmentrentalUpdateOne) ClearEmployee() *EquipmentrentalUpdateOne {
	euo.mutation.ClearEmployee()
	return euo
}

// ClearMember clears the member edge to Member.
func (euo *EquipmentrentalUpdateOne) ClearMember() *EquipmentrentalUpdateOne {
	euo.mutation.ClearMember()
	return euo
}

// ClearEquipmenttype clears the equipmenttype edge to Equipmenttype.
func (euo *EquipmentrentalUpdateOne) ClearEquipmenttype() *EquipmentrentalUpdateOne {
	euo.mutation.ClearEquipmenttype()
	return euo
}

// Save executes the query and returns the updated entity.
func (euo *EquipmentrentalUpdateOne) Save(ctx context.Context) (*Equipmentrental, error) {

	var (
		err  error
		node *Equipmentrental
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentrentalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EquipmentrentalUpdateOne) SaveX(ctx context.Context) *Equipmentrental {
	e, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return e
}

// Exec executes the query on the entity.
func (euo *EquipmentrentalUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EquipmentrentalUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EquipmentrentalUpdateOne) sqlSave(ctx context.Context) (e *Equipmentrental, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipmentrental.Table,
			Columns: equipmentrental.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: equipmentrental.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Equipmentrental.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.RENTALAMOUNT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipmentrental.FieldRENTALAMOUNT,
		})
	}
	if value, ok := euo.mutation.RENTALDATE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: equipmentrental.FieldRENTALDATE,
		})
	}
	if value, ok := euo.mutation.RETURNDATE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: equipmentrental.FieldRETURNDATE,
		})
	}
	if euo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EquipmentTable,
			Columns: []string{equipmentrental.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EquipmentTable,
			Columns: []string{equipmentrental.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EmployeeTable,
			Columns: []string{equipmentrental.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EmployeeTable,
			Columns: []string{equipmentrental.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.MemberTable,
			Columns: []string{equipmentrental.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.MemberTable,
			Columns: []string{equipmentrental.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EquipmenttypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EquipmenttypeTable,
			Columns: []string{equipmentrental.EquipmenttypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipmenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EquipmenttypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EquipmenttypeTable,
			Columns: []string{equipmentrental.EquipmenttypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	e = &Equipmentrental{config: euo.config}
	_spec.Assign = e.assignValues
	_spec.ScanValues = e.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipmentrental.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return e, nil
}
