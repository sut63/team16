// Code generated by entc, DO NOT EDIT.

package equipmenttype

import (
	"github.com/G16/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// EQUIPMENTTYPE applies equality check predicate on the "EQUIPMENTTYPE" field. It's identical to EQUIPMENTTYPEEQ.
func EQUIPMENTTYPE(v string) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEQUIPMENTTYPE), v))
	})
}

// EQUIPMENTTYPEEQ applies the EQ predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPEEQ(v string) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEQUIPMENTTYPE), v))
	})
}

// EQUIPMENTTYPENEQ applies the NEQ predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPENEQ(v string) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEQUIPMENTTYPE), v))
	})
}

// EQUIPMENTTYPEIn applies the In predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPEIn(vs ...string) predicate.Equipmenttype {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipmenttype(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEQUIPMENTTYPE), v...))
	})
}

// EQUIPMENTTYPENotIn applies the NotIn predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPENotIn(vs ...string) predicate.Equipmenttype {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipmenttype(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEQUIPMENTTYPE), v...))
	})
}

// EQUIPMENTTYPEGT applies the GT predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPEGT(v string) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEQUIPMENTTYPE), v))
	})
}

// EQUIPMENTTYPEGTE applies the GTE predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPEGTE(v string) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEQUIPMENTTYPE), v))
	})
}

// EQUIPMENTTYPELT applies the LT predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPELT(v string) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEQUIPMENTTYPE), v))
	})
}

// EQUIPMENTTYPELTE applies the LTE predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPELTE(v string) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEQUIPMENTTYPE), v))
	})
}

// EQUIPMENTTYPEContains applies the Contains predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPEContains(v string) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEQUIPMENTTYPE), v))
	})
}

// EQUIPMENTTYPEHasPrefix applies the HasPrefix predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPEHasPrefix(v string) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEQUIPMENTTYPE), v))
	})
}

// EQUIPMENTTYPEHasSuffix applies the HasSuffix predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPEHasSuffix(v string) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEQUIPMENTTYPE), v))
	})
}

// EQUIPMENTTYPEEqualFold applies the EqualFold predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPEEqualFold(v string) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEQUIPMENTTYPE), v))
	})
}

// EQUIPMENTTYPEContainsFold applies the ContainsFold predicate on the "EQUIPMENTTYPE" field.
func EQUIPMENTTYPEContainsFold(v string) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEQUIPMENTTYPE), v))
	})
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipmentrental applies the HasEdge predicate on the "equipmentrental" edge.
func HasEquipmentrental() predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentrentalTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentrentalTable, EquipmentrentalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentrentalWith applies the HasEdge predicate on the "equipmentrental" edge with a given conditions (other predicates).
func HasEquipmentrentalWith(preds ...predicate.Equipmentrental) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentrentalInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentrentalTable, EquipmentrentalColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Equipmenttype) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Equipmenttype) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Equipmenttype) predicate.Equipmenttype {
	return predicate.Equipmenttype(func(s *sql.Selector) {
		p(s.Not())
	})
}
