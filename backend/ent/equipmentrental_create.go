// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/G16/app/ent/employee"
	"github.com/G16/app/ent/equipment"
	"github.com/G16/app/ent/equipmentrental"
	"github.com/G16/app/ent/equipmenttype"
	"github.com/G16/app/ent/member"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// EquipmentrentalCreate is the builder for creating a Equipmentrental entity.
type EquipmentrentalCreate struct {
	config
	mutation *EquipmentrentalMutation
	hooks    []Hook
}

// SetRENTALAMOUNT sets the RENTALAMOUNT field.
func (ec *EquipmentrentalCreate) SetRENTALAMOUNT(i int) *EquipmentrentalCreate {
	ec.mutation.SetRENTALAMOUNT(i)
	return ec
}

// SetRENTALDATE sets the RENTALDATE field.
func (ec *EquipmentrentalCreate) SetRENTALDATE(t time.Time) *EquipmentrentalCreate {
	ec.mutation.SetRENTALDATE(t)
	return ec
}

// SetRETURNDATE sets the RETURNDATE field.
func (ec *EquipmentrentalCreate) SetRETURNDATE(t time.Time) *EquipmentrentalCreate {
	ec.mutation.SetRETURNDATE(t)
	return ec
}

// SetEquipmentID sets the equipment edge to Equipment by id.
func (ec *EquipmentrentalCreate) SetEquipmentID(id int) *EquipmentrentalCreate {
	ec.mutation.SetEquipmentID(id)
	return ec
}

// SetNillableEquipmentID sets the equipment edge to Equipment by id if the given value is not nil.
func (ec *EquipmentrentalCreate) SetNillableEquipmentID(id *int) *EquipmentrentalCreate {
	if id != nil {
		ec = ec.SetEquipmentID(*id)
	}
	return ec
}

// SetEquipment sets the equipment edge to Equipment.
func (ec *EquipmentrentalCreate) SetEquipment(e *Equipment) *EquipmentrentalCreate {
	return ec.SetEquipmentID(e.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (ec *EquipmentrentalCreate) SetEmployeeID(id int) *EquipmentrentalCreate {
	ec.mutation.SetEmployeeID(id)
	return ec
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (ec *EquipmentrentalCreate) SetNillableEmployeeID(id *int) *EquipmentrentalCreate {
	if id != nil {
		ec = ec.SetEmployeeID(*id)
	}
	return ec
}

// SetEmployee sets the employee edge to Employee.
func (ec *EquipmentrentalCreate) SetEmployee(e *Employee) *EquipmentrentalCreate {
	return ec.SetEmployeeID(e.ID)
}

// SetMemberID sets the member edge to Member by id.
func (ec *EquipmentrentalCreate) SetMemberID(id int) *EquipmentrentalCreate {
	ec.mutation.SetMemberID(id)
	return ec
}

// SetNillableMemberID sets the member edge to Member by id if the given value is not nil.
func (ec *EquipmentrentalCreate) SetNillableMemberID(id *int) *EquipmentrentalCreate {
	if id != nil {
		ec = ec.SetMemberID(*id)
	}
	return ec
}

// SetMember sets the member edge to Member.
func (ec *EquipmentrentalCreate) SetMember(m *Member) *EquipmentrentalCreate {
	return ec.SetMemberID(m.ID)
}

// SetEquipmenttypeID sets the equipmenttype edge to Equipmenttype by id.
func (ec *EquipmentrentalCreate) SetEquipmenttypeID(id int) *EquipmentrentalCreate {
	ec.mutation.SetEquipmenttypeID(id)
	return ec
}

// SetNillableEquipmenttypeID sets the equipmenttype edge to Equipmenttype by id if the given value is not nil.
func (ec *EquipmentrentalCreate) SetNillableEquipmenttypeID(id *int) *EquipmentrentalCreate {
	if id != nil {
		ec = ec.SetEquipmenttypeID(*id)
	}
	return ec
}

// SetEquipmenttype sets the equipmenttype edge to Equipmenttype.
func (ec *EquipmentrentalCreate) SetEquipmenttype(e *Equipmenttype) *EquipmentrentalCreate {
	return ec.SetEquipmenttypeID(e.ID)
}

// Mutation returns the EquipmentrentalMutation object of the builder.
func (ec *EquipmentrentalCreate) Mutation() *EquipmentrentalMutation {
	return ec.mutation
}

// Save creates the Equipmentrental in the database.
func (ec *EquipmentrentalCreate) Save(ctx context.Context) (*Equipmentrental, error) {
	if _, ok := ec.mutation.RENTALAMOUNT(); !ok {
		return nil, &ValidationError{Name: "RENTALAMOUNT", err: errors.New("ent: missing required field \"RENTALAMOUNT\"")}
	}
	if v, ok := ec.mutation.RENTALAMOUNT(); ok {
		if err := equipmentrental.RENTALAMOUNTValidator(v); err != nil {
			return nil, &ValidationError{Name: "RENTALAMOUNT", err: fmt.Errorf("ent: validator failed for field \"RENTALAMOUNT\": %w", err)}
		}
	}
	if _, ok := ec.mutation.RENTALDATE(); !ok {
		return nil, &ValidationError{Name: "RENTALDATE", err: errors.New("ent: missing required field \"RENTALDATE\"")}
	}
	if _, ok := ec.mutation.RETURNDATE(); !ok {
		return nil, &ValidationError{Name: "RETURNDATE", err: errors.New("ent: missing required field \"RETURNDATE\"")}
	}
	var (
		err  error
		node *Equipmentrental
	)
	if len(ec.hooks) == 0 {
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentrentalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EquipmentrentalCreate) SaveX(ctx context.Context) *Equipmentrental {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ec *EquipmentrentalCreate) sqlSave(ctx context.Context) (*Equipmentrental, error) {
	e, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	e.ID = int(id)
	return e, nil
}

func (ec *EquipmentrentalCreate) createSpec() (*Equipmentrental, *sqlgraph.CreateSpec) {
	var (
		e     = &Equipmentrental{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: equipmentrental.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: equipmentrental.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.RENTALAMOUNT(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: equipmentrental.FieldRENTALAMOUNT,
		})
		e.RENTALAMOUNT = value
	}
	if value, ok := ec.mutation.RENTALDATE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: equipmentrental.FieldRENTALDATE,
		})
		e.RENTALDATE = value
	}
	if value, ok := ec.mutation.RETURNDATE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: equipmentrental.FieldRETURNDATE,
		})
		e.RETURNDATE = value
	}
	if nodes := ec.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EquipmentTable,
			Columns: []string{equipmentrental.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EmployeeTable,
			Columns: []string{equipmentrental.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.MemberTable,
			Columns: []string{equipmentrental.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EquipmenttypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipmentrental.EquipmenttypeTable,
			Columns: []string{equipmentrental.EquipmenttypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return e, _spec
}
