// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/G16/app/ent/employee"
	"github.com/G16/app/ent/equipment"
	"github.com/G16/app/ent/equipmentrental"
	"github.com/G16/app/ent/equipmenttype"
	"github.com/G16/app/ent/member"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Equipmentrental is the model entity for the Equipmentrental schema.
type Equipmentrental struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RENTALAMOUNT holds the value of the "RENTALAMOUNT" field.
	RENTALAMOUNT int `json:"RENTALAMOUNT,omitempty"`
	// RENTALDATE holds the value of the "RENTALDATE" field.
	RENTALDATE time.Time `json:"RENTALDATE,omitempty"`
	// RETURNDATE holds the value of the "RETURNDATE" field.
	RETURNDATE time.Time `json:"RETURNDATE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentrentalQuery when eager-loading is set.
	Edges                         EquipmentrentalEdges `json:"edges"`
	employee_equipmentrental      *int
	equipment_equipmentrental     *int
	equipmenttype_equipmentrental *int
	member_equipmentrental        *int
}

// EquipmentrentalEdges holds the relations/edges for other nodes in the graph.
type EquipmentrentalEdges struct {
	// Equipment holds the value of the equipment edge.
	Equipment *Equipment
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Member holds the value of the member edge.
	Member *Member
	// Equipmenttype holds the value of the equipmenttype edge.
	Equipmenttype *Equipmenttype
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentrentalEdges) EquipmentOrErr() (*Equipment, error) {
	if e.loadedTypes[0] {
		if e.Equipment == nil {
			// The edge equipment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: equipment.Label}
		}
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentrentalEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentrentalEdges) MemberOrErr() (*Member, error) {
	if e.loadedTypes[2] {
		if e.Member == nil {
			// The edge member was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: member.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// EquipmenttypeOrErr returns the Equipmenttype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentrentalEdges) EquipmenttypeOrErr() (*Equipmenttype, error) {
	if e.loadedTypes[3] {
		if e.Equipmenttype == nil {
			// The edge equipmenttype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: equipmenttype.Label}
		}
		return e.Equipmenttype, nil
	}
	return nil, &NotLoadedError{edge: "equipmenttype"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Equipmentrental) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // RENTALAMOUNT
		&sql.NullTime{},  // RENTALDATE
		&sql.NullTime{},  // RETURNDATE
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Equipmentrental) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // employee_equipmentrental
		&sql.NullInt64{}, // equipment_equipmentrental
		&sql.NullInt64{}, // equipmenttype_equipmentrental
		&sql.NullInt64{}, // member_equipmentrental
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Equipmentrental fields.
func (e *Equipmentrental) assignValues(values ...interface{}) error {
	if m, n := len(values), len(equipmentrental.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field RENTALAMOUNT", values[0])
	} else if value.Valid {
		e.RENTALAMOUNT = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field RENTALDATE", values[1])
	} else if value.Valid {
		e.RENTALDATE = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field RETURNDATE", values[2])
	} else if value.Valid {
		e.RETURNDATE = value.Time
	}
	values = values[3:]
	if len(values) == len(equipmentrental.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_equipmentrental", value)
		} else if value.Valid {
			e.employee_equipmentrental = new(int)
			*e.employee_equipmentrental = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field equipment_equipmentrental", value)
		} else if value.Valid {
			e.equipment_equipmentrental = new(int)
			*e.equipment_equipmentrental = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field equipmenttype_equipmentrental", value)
		} else if value.Valid {
			e.equipmenttype_equipmentrental = new(int)
			*e.equipmenttype_equipmentrental = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field member_equipmentrental", value)
		} else if value.Valid {
			e.member_equipmentrental = new(int)
			*e.member_equipmentrental = int(value.Int64)
		}
	}
	return nil
}

// QueryEquipment queries the equipment edge of the Equipmentrental.
func (e *Equipmentrental) QueryEquipment() *EquipmentQuery {
	return (&EquipmentrentalClient{config: e.config}).QueryEquipment(e)
}

// QueryEmployee queries the employee edge of the Equipmentrental.
func (e *Equipmentrental) QueryEmployee() *EmployeeQuery {
	return (&EquipmentrentalClient{config: e.config}).QueryEmployee(e)
}

// QueryMember queries the member edge of the Equipmentrental.
func (e *Equipmentrental) QueryMember() *MemberQuery {
	return (&EquipmentrentalClient{config: e.config}).QueryMember(e)
}

// QueryEquipmenttype queries the equipmenttype edge of the Equipmentrental.
func (e *Equipmentrental) QueryEquipmenttype() *EquipmenttypeQuery {
	return (&EquipmentrentalClient{config: e.config}).QueryEquipmenttype(e)
}

// Update returns a builder for updating this Equipmentrental.
// Note that, you need to call Equipmentrental.Unwrap() before calling this method, if this Equipmentrental
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Equipmentrental) Update() *EquipmentrentalUpdateOne {
	return (&EquipmentrentalClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Equipmentrental) Unwrap() *Equipmentrental {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Equipmentrental is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Equipmentrental) String() string {
	var builder strings.Builder
	builder.WriteString("Equipmentrental(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", RENTALAMOUNT=")
	builder.WriteString(fmt.Sprintf("%v", e.RENTALAMOUNT))
	builder.WriteString(", RENTALDATE=")
	builder.WriteString(e.RENTALDATE.Format(time.ANSIC))
	builder.WriteString(", RETURNDATE=")
	builder.WriteString(e.RETURNDATE.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Equipmentrentals is a parsable slice of Equipmentrental.
type Equipmentrentals []*Equipmentrental

func (e Equipmentrentals) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
