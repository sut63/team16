// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/G16/app/ent/age"
	"github.com/G16/app/ent/employee"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// AgeCreate is the builder for creating a Age entity.
type AgeCreate struct {
	config
	mutation *AgeMutation
	hooks    []Hook
}

// SetAGE sets the AGE field.
func (ac *AgeCreate) SetAGE(i int) *AgeCreate {
	ac.mutation.SetAGE(i)
	return ac
}

// AddEmployeeIDs adds the employee edge to Employee by ids.
func (ac *AgeCreate) AddEmployeeIDs(ids ...int) *AgeCreate {
	ac.mutation.AddEmployeeIDs(ids...)
	return ac
}

// AddEmployee adds the employee edges to Employee.
func (ac *AgeCreate) AddEmployee(e ...*Employee) *AgeCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEmployeeIDs(ids...)
}

// Mutation returns the AgeMutation object of the builder.
func (ac *AgeCreate) Mutation() *AgeMutation {
	return ac.mutation
}

// Save creates the Age in the database.
func (ac *AgeCreate) Save(ctx context.Context) (*Age, error) {
	if _, ok := ac.mutation.AGE(); !ok {
		return nil, &ValidationError{Name: "AGE", err: errors.New("ent: missing required field \"AGE\"")}
	}
	var (
		err  error
		node *Age
	)
	if len(ac.hooks) == 0 {
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AgeCreate) SaveX(ctx context.Context) *Age {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *AgeCreate) sqlSave(ctx context.Context) (*Age, error) {
	a, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}

func (ac *AgeCreate) createSpec() (*Age, *sqlgraph.CreateSpec) {
	var (
		a     = &Age{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: age.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: age.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.AGE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: age.FieldAGE,
		})
		a.AGE = value
	}
	if nodes := ac.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   age.EmployeeTable,
			Columns: []string{age.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return a, _spec
}
