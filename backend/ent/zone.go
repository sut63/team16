// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/G16/app/ent/zone"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Zone is the model entity for the Zone schema.
type Zone struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EQUIPMENTZONE holds the value of the "EQUIPMENTZONE" field.
	EQUIPMENTZONE string `json:"EQUIPMENTZONE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ZoneQuery when eager-loading is set.
	Edges ZoneEdges `json:"edges"`
}

// ZoneEdges holds the relations/edges for other nodes in the graph.
type ZoneEdges struct {
	// Equipment holds the value of the equipment edge.
	Equipment []*Equipment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading.
func (e ZoneEdges) EquipmentOrErr() ([]*Equipment, error) {
	if e.loadedTypes[0] {
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Zone) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // EQUIPMENTZONE
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Zone fields.
func (z *Zone) assignValues(values ...interface{}) error {
	if m, n := len(values), len(zone.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	z.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field EQUIPMENTZONE", values[0])
	} else if value.Valid {
		z.EQUIPMENTZONE = value.String
	}
	return nil
}

// QueryEquipment queries the equipment edge of the Zone.
func (z *Zone) QueryEquipment() *EquipmentQuery {
	return (&ZoneClient{config: z.config}).QueryEquipment(z)
}

// Update returns a builder for updating this Zone.
// Note that, you need to call Zone.Unwrap() before calling this method, if this Zone
// was returned from a transaction, and the transaction was committed or rolled back.
func (z *Zone) Update() *ZoneUpdateOne {
	return (&ZoneClient{config: z.config}).UpdateOne(z)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (z *Zone) Unwrap() *Zone {
	tx, ok := z.config.driver.(*txDriver)
	if !ok {
		panic("ent: Zone is not a transactional entity")
	}
	z.config.driver = tx.drv
	return z
}

// String implements the fmt.Stringer.
func (z *Zone) String() string {
	var builder strings.Builder
	builder.WriteString("Zone(")
	builder.WriteString(fmt.Sprintf("id=%v", z.ID))
	builder.WriteString(", EQUIPMENTZONE=")
	builder.WriteString(z.EQUIPMENTZONE)
	builder.WriteByte(')')
	return builder.String()
}

// Zones is a parsable slice of Zone.
type Zones []*Zone

func (z Zones) config(cfg config) {
	for _i := range z {
		z[_i].config = cfg
	}
}
