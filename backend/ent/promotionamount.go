// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/G16/app/ent/promotionamount"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Promotionamount is the model entity for the Promotionamount schema.
type Promotionamount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AMOUNT holds the value of the "AMOUNT" field.
	AMOUNT int `json:"AMOUNT,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionamountQuery when eager-loading is set.
	Edges PromotionamountEdges `json:"edges"`
}

// PromotionamountEdges holds the relations/edges for other nodes in the graph.
type PromotionamountEdges struct {
	// Promotion holds the value of the promotion edge.
	Promotion []*Promotion
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PromotionOrErr returns the Promotion value or an error if the edge
// was not loaded in eager-loading.
func (e PromotionamountEdges) PromotionOrErr() ([]*Promotion, error) {
	if e.loadedTypes[0] {
		return e.Promotion, nil
	}
	return nil, &NotLoadedError{edge: "promotion"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Promotionamount) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // AMOUNT
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Promotionamount fields.
func (pr *Promotionamount) assignValues(values ...interface{}) error {
	if m, n := len(values), len(promotionamount.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field AMOUNT", values[0])
	} else if value.Valid {
		pr.AMOUNT = int(value.Int64)
	}
	return nil
}

// QueryPromotion queries the promotion edge of the Promotionamount.
func (pr *Promotionamount) QueryPromotion() *PromotionQuery {
	return (&PromotionamountClient{config: pr.config}).QueryPromotion(pr)
}

// Update returns a builder for updating this Promotionamount.
// Note that, you need to call Promotionamount.Unwrap() before calling this method, if this Promotionamount
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Promotionamount) Update() *PromotionamountUpdateOne {
	return (&PromotionamountClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Promotionamount) Unwrap() *Promotionamount {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Promotionamount is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Promotionamount) String() string {
	var builder strings.Builder
	builder.WriteString("Promotionamount(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", AMOUNT=")
	builder.WriteString(fmt.Sprintf("%v", pr.AMOUNT))
	builder.WriteByte(')')
	return builder.String()
}

// Promotionamounts is a parsable slice of Promotionamount.
type Promotionamounts []*Promotionamount

func (pr Promotionamounts) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
