// Code generated by entc, DO NOT EDIT.

package equipment

import (
	"time"

	"github.com/G16/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// EQUIPMENTNAME applies equality check predicate on the "EQUIPMENTNAME" field. It's identical to EQUIPMENTNAMEEQ.
func EQUIPMENTNAME(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEQUIPMENTNAME), v))
	})
}

// EQUIPMENTAMOUNT applies equality check predicate on the "EQUIPMENTAMOUNT" field. It's identical to EQUIPMENTAMOUNTEQ.
func EQUIPMENTAMOUNT(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEQUIPMENTAMOUNT), v))
	})
}

// EQUIPMENTDETAIL applies equality check predicate on the "EQUIPMENTDETAIL" field. It's identical to EQUIPMENTDETAILEQ.
func EQUIPMENTDETAIL(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEQUIPMENTDETAIL), v))
	})
}

// EQUIPMENTDATE applies equality check predicate on the "EQUIPMENTDATE" field. It's identical to EQUIPMENTDATEEQ.
func EQUIPMENTDATE(v time.Time) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEQUIPMENTDATE), v))
	})
}

// EQUIPMENTNAMEEQ applies the EQ predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMEEQ(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEQUIPMENTNAME), v))
	})
}

// EQUIPMENTNAMENEQ applies the NEQ predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMENEQ(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEQUIPMENTNAME), v))
	})
}

// EQUIPMENTNAMEIn applies the In predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMEIn(vs ...string) predicate.Equipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEQUIPMENTNAME), v...))
	})
}

// EQUIPMENTNAMENotIn applies the NotIn predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMENotIn(vs ...string) predicate.Equipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEQUIPMENTNAME), v...))
	})
}

// EQUIPMENTNAMEGT applies the GT predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMEGT(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEQUIPMENTNAME), v))
	})
}

// EQUIPMENTNAMEGTE applies the GTE predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMEGTE(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEQUIPMENTNAME), v))
	})
}

// EQUIPMENTNAMELT applies the LT predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMELT(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEQUIPMENTNAME), v))
	})
}

// EQUIPMENTNAMELTE applies the LTE predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMELTE(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEQUIPMENTNAME), v))
	})
}

// EQUIPMENTNAMEContains applies the Contains predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMEContains(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEQUIPMENTNAME), v))
	})
}

// EQUIPMENTNAMEHasPrefix applies the HasPrefix predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMEHasPrefix(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEQUIPMENTNAME), v))
	})
}

// EQUIPMENTNAMEHasSuffix applies the HasSuffix predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMEHasSuffix(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEQUIPMENTNAME), v))
	})
}

// EQUIPMENTNAMEEqualFold applies the EqualFold predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMEEqualFold(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEQUIPMENTNAME), v))
	})
}

// EQUIPMENTNAMEContainsFold applies the ContainsFold predicate on the "EQUIPMENTNAME" field.
func EQUIPMENTNAMEContainsFold(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEQUIPMENTNAME), v))
	})
}

// EQUIPMENTAMOUNTEQ applies the EQ predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTEQ(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEQUIPMENTAMOUNT), v))
	})
}

// EQUIPMENTAMOUNTNEQ applies the NEQ predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTNEQ(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEQUIPMENTAMOUNT), v))
	})
}

// EQUIPMENTAMOUNTIn applies the In predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTIn(vs ...string) predicate.Equipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEQUIPMENTAMOUNT), v...))
	})
}

// EQUIPMENTAMOUNTNotIn applies the NotIn predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTNotIn(vs ...string) predicate.Equipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEQUIPMENTAMOUNT), v...))
	})
}

// EQUIPMENTAMOUNTGT applies the GT predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTGT(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEQUIPMENTAMOUNT), v))
	})
}

// EQUIPMENTAMOUNTGTE applies the GTE predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTGTE(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEQUIPMENTAMOUNT), v))
	})
}

// EQUIPMENTAMOUNTLT applies the LT predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTLT(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEQUIPMENTAMOUNT), v))
	})
}

// EQUIPMENTAMOUNTLTE applies the LTE predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTLTE(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEQUIPMENTAMOUNT), v))
	})
}

// EQUIPMENTAMOUNTContains applies the Contains predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTContains(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEQUIPMENTAMOUNT), v))
	})
}

// EQUIPMENTAMOUNTHasPrefix applies the HasPrefix predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTHasPrefix(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEQUIPMENTAMOUNT), v))
	})
}

// EQUIPMENTAMOUNTHasSuffix applies the HasSuffix predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTHasSuffix(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEQUIPMENTAMOUNT), v))
	})
}

// EQUIPMENTAMOUNTEqualFold applies the EqualFold predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTEqualFold(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEQUIPMENTAMOUNT), v))
	})
}

// EQUIPMENTAMOUNTContainsFold applies the ContainsFold predicate on the "EQUIPMENTAMOUNT" field.
func EQUIPMENTAMOUNTContainsFold(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEQUIPMENTAMOUNT), v))
	})
}

// EQUIPMENTDETAILEQ applies the EQ predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILEQ(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEQUIPMENTDETAIL), v))
	})
}

// EQUIPMENTDETAILNEQ applies the NEQ predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILNEQ(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEQUIPMENTDETAIL), v))
	})
}

// EQUIPMENTDETAILIn applies the In predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILIn(vs ...string) predicate.Equipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEQUIPMENTDETAIL), v...))
	})
}

// EQUIPMENTDETAILNotIn applies the NotIn predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILNotIn(vs ...string) predicate.Equipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEQUIPMENTDETAIL), v...))
	})
}

// EQUIPMENTDETAILGT applies the GT predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILGT(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEQUIPMENTDETAIL), v))
	})
}

// EQUIPMENTDETAILGTE applies the GTE predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILGTE(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEQUIPMENTDETAIL), v))
	})
}

// EQUIPMENTDETAILLT applies the LT predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILLT(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEQUIPMENTDETAIL), v))
	})
}

// EQUIPMENTDETAILLTE applies the LTE predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILLTE(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEQUIPMENTDETAIL), v))
	})
}

// EQUIPMENTDETAILContains applies the Contains predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILContains(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEQUIPMENTDETAIL), v))
	})
}

// EQUIPMENTDETAILHasPrefix applies the HasPrefix predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILHasPrefix(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEQUIPMENTDETAIL), v))
	})
}

// EQUIPMENTDETAILHasSuffix applies the HasSuffix predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILHasSuffix(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEQUIPMENTDETAIL), v))
	})
}

// EQUIPMENTDETAILEqualFold applies the EqualFold predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILEqualFold(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEQUIPMENTDETAIL), v))
	})
}

// EQUIPMENTDETAILContainsFold applies the ContainsFold predicate on the "EQUIPMENTDETAIL" field.
func EQUIPMENTDETAILContainsFold(v string) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEQUIPMENTDETAIL), v))
	})
}

// EQUIPMENTDATEEQ applies the EQ predicate on the "EQUIPMENTDATE" field.
func EQUIPMENTDATEEQ(v time.Time) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEQUIPMENTDATE), v))
	})
}

// EQUIPMENTDATENEQ applies the NEQ predicate on the "EQUIPMENTDATE" field.
func EQUIPMENTDATENEQ(v time.Time) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEQUIPMENTDATE), v))
	})
}

// EQUIPMENTDATEIn applies the In predicate on the "EQUIPMENTDATE" field.
func EQUIPMENTDATEIn(vs ...time.Time) predicate.Equipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEQUIPMENTDATE), v...))
	})
}

// EQUIPMENTDATENotIn applies the NotIn predicate on the "EQUIPMENTDATE" field.
func EQUIPMENTDATENotIn(vs ...time.Time) predicate.Equipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Equipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEQUIPMENTDATE), v...))
	})
}

// EQUIPMENTDATEGT applies the GT predicate on the "EQUIPMENTDATE" field.
func EQUIPMENTDATEGT(v time.Time) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEQUIPMENTDATE), v))
	})
}

// EQUIPMENTDATEGTE applies the GTE predicate on the "EQUIPMENTDATE" field.
func EQUIPMENTDATEGTE(v time.Time) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEQUIPMENTDATE), v))
	})
}

// EQUIPMENTDATELT applies the LT predicate on the "EQUIPMENTDATE" field.
func EQUIPMENTDATELT(v time.Time) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEQUIPMENTDATE), v))
	})
}

// EQUIPMENTDATELTE applies the LTE predicate on the "EQUIPMENTDATE" field.
func EQUIPMENTDATELTE(v time.Time) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEQUIPMENTDATE), v))
	})
}

// HasClassifier applies the HasEdge predicate on the "classifier" edge.
func HasClassifier() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassifierTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassifierTable, ClassifierColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassifierWith applies the HasEdge predicate on the "classifier" edge with a given conditions (other predicates).
func HasClassifierWith(preds ...predicate.Classifier) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassifierInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassifierTable, ClassifierColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipmenttype applies the HasEdge predicate on the "equipmenttype" edge.
func HasEquipmenttype() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmenttypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmenttypeTable, EquipmenttypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmenttypeWith applies the HasEdge predicate on the "equipmenttype" edge with a given conditions (other predicates).
func HasEquipmenttypeWith(preds ...predicate.Equipmenttype) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmenttypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmenttypeTable, EquipmenttypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasZone applies the HasEdge predicate on the "zone" edge.
func HasZone() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ZoneTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ZoneTable, ZoneColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasZoneWith applies the HasEdge predicate on the "zone" edge with a given conditions (other predicates).
func HasZoneWith(preds ...predicate.Zone) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ZoneInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ZoneTable, ZoneColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipmentrental applies the HasEdge predicate on the "equipmentrental" edge.
func HasEquipmentrental() predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentrentalTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentrentalTable, EquipmentrentalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentrentalWith applies the HasEdge predicate on the "equipmentrental" edge with a given conditions (other predicates).
func HasEquipmentrentalWith(preds ...predicate.Equipmentrental) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentrentalInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EquipmentrentalTable, EquipmentrentalColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Equipment) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Equipment) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Equipment) predicate.Equipment {
	return predicate.Equipment(func(s *sql.Selector) {
		p(s.Not())
	})
}
