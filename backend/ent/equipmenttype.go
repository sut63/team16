// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/G16/app/ent/equipmenttype"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Equipmenttype is the model entity for the Equipmenttype schema.
type Equipmenttype struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EQUIPMENTTYPE holds the value of the "EQUIPMENTTYPE" field.
	EQUIPMENTTYPE string `json:"EQUIPMENTTYPE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmenttypeQuery when eager-loading is set.
	Edges EquipmenttypeEdges `json:"edges"`
}

// EquipmenttypeEdges holds the relations/edges for other nodes in the graph.
type EquipmenttypeEdges struct {
	// Equipment holds the value of the equipment edge.
	Equipment []*Equipment
	// Equipmentrental holds the value of the equipmentrental edge.
	Equipmentrental []*Equipmentrental
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading.
func (e EquipmenttypeEdges) EquipmentOrErr() ([]*Equipment, error) {
	if e.loadedTypes[0] {
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// EquipmentrentalOrErr returns the Equipmentrental value or an error if the edge
// was not loaded in eager-loading.
func (e EquipmenttypeEdges) EquipmentrentalOrErr() ([]*Equipmentrental, error) {
	if e.loadedTypes[1] {
		return e.Equipmentrental, nil
	}
	return nil, &NotLoadedError{edge: "equipmentrental"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Equipmenttype) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // EQUIPMENTTYPE
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Equipmenttype fields.
func (e *Equipmenttype) assignValues(values ...interface{}) error {
	if m, n := len(values), len(equipmenttype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field EQUIPMENTTYPE", values[0])
	} else if value.Valid {
		e.EQUIPMENTTYPE = value.String
	}
	return nil
}

// QueryEquipment queries the equipment edge of the Equipmenttype.
func (e *Equipmenttype) QueryEquipment() *EquipmentQuery {
	return (&EquipmenttypeClient{config: e.config}).QueryEquipment(e)
}

// QueryEquipmentrental queries the equipmentrental edge of the Equipmenttype.
func (e *Equipmenttype) QueryEquipmentrental() *EquipmentrentalQuery {
	return (&EquipmenttypeClient{config: e.config}).QueryEquipmentrental(e)
}

// Update returns a builder for updating this Equipmenttype.
// Note that, you need to call Equipmenttype.Unwrap() before calling this method, if this Equipmenttype
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Equipmenttype) Update() *EquipmenttypeUpdateOne {
	return (&EquipmenttypeClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Equipmenttype) Unwrap() *Equipmenttype {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Equipmenttype is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Equipmenttype) String() string {
	var builder strings.Builder
	builder.WriteString("Equipmenttype(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", EQUIPMENTTYPE=")
	builder.WriteString(e.EQUIPMENTTYPE)
	builder.WriteByte(')')
	return builder.String()
}

// Equipmenttypes is a parsable slice of Equipmenttype.
type Equipmenttypes []*Equipmenttype

func (e Equipmenttypes) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
