// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/G16/app/ent/member"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Member is the model entity for the Member schema.
type Member struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MEMBERID holds the value of the "MEMBERID" field.
	MEMBERID string `json:"MEMBERID,omitempty"`
	// MEMBERNAME holds the value of the "MEMBERNAME" field.
	MEMBERNAME string `json:"MEMBERNAME,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemberQuery when eager-loading is set.
	Edges MemberEdges `json:"edges"`
}

// MemberEdges holds the relations/edges for other nodes in the graph.
type MemberEdges struct {
	// Payment holds the value of the payment edge.
	Payment []*Payment
	// Bookcourse holds the value of the bookcourse edge.
	Bookcourse []*Bookcourse
	// Equipmentrental holds the value of the equipmentrental edge.
	Equipmentrental []*Equipmentrental
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PaymentOrErr returns the Payment value or an error if the edge
// was not loaded in eager-loading.
func (e MemberEdges) PaymentOrErr() ([]*Payment, error) {
	if e.loadedTypes[0] {
		return e.Payment, nil
	}
	return nil, &NotLoadedError{edge: "payment"}
}

// BookcourseOrErr returns the Bookcourse value or an error if the edge
// was not loaded in eager-loading.
func (e MemberEdges) BookcourseOrErr() ([]*Bookcourse, error) {
	if e.loadedTypes[1] {
		return e.Bookcourse, nil
	}
	return nil, &NotLoadedError{edge: "bookcourse"}
}

// EquipmentrentalOrErr returns the Equipmentrental value or an error if the edge
// was not loaded in eager-loading.
func (e MemberEdges) EquipmentrentalOrErr() ([]*Equipmentrental, error) {
	if e.loadedTypes[2] {
		return e.Equipmentrental, nil
	}
	return nil, &NotLoadedError{edge: "equipmentrental"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Member) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // MEMBERID
		&sql.NullString{}, // MEMBERNAME
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Member fields.
func (m *Member) assignValues(values ...interface{}) error {
	if m, n := len(values), len(member.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field MEMBERID", values[0])
	} else if value.Valid {
		m.MEMBERID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field MEMBERNAME", values[1])
	} else if value.Valid {
		m.MEMBERNAME = value.String
	}
	return nil
}

// QueryPayment queries the payment edge of the Member.
func (m *Member) QueryPayment() *PaymentQuery {
	return (&MemberClient{config: m.config}).QueryPayment(m)
}

// QueryBookcourse queries the bookcourse edge of the Member.
func (m *Member) QueryBookcourse() *BookcourseQuery {
	return (&MemberClient{config: m.config}).QueryBookcourse(m)
}

// QueryEquipmentrental queries the equipmentrental edge of the Member.
func (m *Member) QueryEquipmentrental() *EquipmentrentalQuery {
	return (&MemberClient{config: m.config}).QueryEquipmentrental(m)
}

// Update returns a builder for updating this Member.
// Note that, you need to call Member.Unwrap() before calling this method, if this Member
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Member) Update() *MemberUpdateOne {
	return (&MemberClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Member) Unwrap() *Member {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Member is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Member) String() string {
	var builder strings.Builder
	builder.WriteString("Member(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", MEMBERID=")
	builder.WriteString(m.MEMBERID)
	builder.WriteString(", MEMBERNAME=")
	builder.WriteString(m.MEMBERNAME)
	builder.WriteByte(')')
	return builder.String()
}

// Members is a parsable slice of Member.
type Members []*Member

func (m Members) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
