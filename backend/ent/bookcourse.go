// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/G16/app/ent/bookcourse"
	"github.com/G16/app/ent/course"
	"github.com/G16/app/ent/employee"
	"github.com/G16/app/ent/member"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Bookcourse is the model entity for the Bookcourse schema.
type Bookcourse struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ACCESS holds the value of the "ACCESS" field.
	ACCESS int `json:"ACCESS,omitempty"`
	// PHONE holds the value of the "PHONE" field.
	PHONE string `json:"PHONE,omitempty"`
	// DETAIL holds the value of the "DETAIL" field.
	DETAIL string `json:"DETAIL,omitempty"`
	// BOOKTIME holds the value of the "BOOKTIME" field.
	BOOKTIME time.Time `json:"BOOKTIME,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookcourseQuery when eager-loading is set.
	Edges               BookcourseEdges `json:"edges"`
	course_bookcourse   *int
	employee_bookcourse *int
	member_bookcourse   *int
}

// BookcourseEdges holds the relations/edges for other nodes in the graph.
type BookcourseEdges struct {
	// Course holds the value of the course edge.
	Course *Course
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Member holds the value of the member edge.
	Member *Member
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookcourseEdges) CourseOrErr() (*Course, error) {
	if e.loadedTypes[0] {
		if e.Course == nil {
			// The edge course was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: course.Label}
		}
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookcourseEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookcourseEdges) MemberOrErr() (*Member, error) {
	if e.loadedTypes[2] {
		if e.Member == nil {
			// The edge member was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: member.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bookcourse) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // ACCESS
		&sql.NullString{}, // PHONE
		&sql.NullString{}, // DETAIL
		&sql.NullTime{},   // BOOKTIME
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Bookcourse) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // course_bookcourse
		&sql.NullInt64{}, // employee_bookcourse
		&sql.NullInt64{}, // member_bookcourse
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bookcourse fields.
func (b *Bookcourse) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bookcourse.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field ACCESS", values[0])
	} else if value.Valid {
		b.ACCESS = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PHONE", values[1])
	} else if value.Valid {
		b.PHONE = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field DETAIL", values[2])
	} else if value.Valid {
		b.DETAIL = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field BOOKTIME", values[3])
	} else if value.Valid {
		b.BOOKTIME = value.Time
	}
	values = values[4:]
	if len(values) == len(bookcourse.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field course_bookcourse", value)
		} else if value.Valid {
			b.course_bookcourse = new(int)
			*b.course_bookcourse = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_bookcourse", value)
		} else if value.Valid {
			b.employee_bookcourse = new(int)
			*b.employee_bookcourse = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field member_bookcourse", value)
		} else if value.Valid {
			b.member_bookcourse = new(int)
			*b.member_bookcourse = int(value.Int64)
		}
	}
	return nil
}

// QueryCourse queries the course edge of the Bookcourse.
func (b *Bookcourse) QueryCourse() *CourseQuery {
	return (&BookcourseClient{config: b.config}).QueryCourse(b)
}

// QueryEmployee queries the employee edge of the Bookcourse.
func (b *Bookcourse) QueryEmployee() *EmployeeQuery {
	return (&BookcourseClient{config: b.config}).QueryEmployee(b)
}

// QueryMember queries the member edge of the Bookcourse.
func (b *Bookcourse) QueryMember() *MemberQuery {
	return (&BookcourseClient{config: b.config}).QueryMember(b)
}

// Update returns a builder for updating this Bookcourse.
// Note that, you need to call Bookcourse.Unwrap() before calling this method, if this Bookcourse
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bookcourse) Update() *BookcourseUpdateOne {
	return (&BookcourseClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Bookcourse) Unwrap() *Bookcourse {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bookcourse is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bookcourse) String() string {
	var builder strings.Builder
	builder.WriteString("Bookcourse(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", ACCESS=")
	builder.WriteString(fmt.Sprintf("%v", b.ACCESS))
	builder.WriteString(", PHONE=")
	builder.WriteString(b.PHONE)
	builder.WriteString(", DETAIL=")
	builder.WriteString(b.DETAIL)
	builder.WriteString(", BOOKTIME=")
	builder.WriteString(b.BOOKTIME.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Bookcourses is a parsable slice of Bookcourse.
type Bookcourses []*Bookcourse

func (b Bookcourses) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
