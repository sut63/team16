// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/G16/app/ent/promotiontime"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Promotiontime is the model entity for the Promotiontime schema.
type Promotiontime struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DATE holds the value of the "DATE" field.
	DATE time.Time `json:"DATE,omitempty"`
	// HOUR holds the value of the "HOUR" field.
	HOUR int `json:"HOUR,omitempty"`
	// MINUTE holds the value of the "MINUTE" field.
	MINUTE int `json:"MINUTE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotiontimeQuery when eager-loading is set.
	Edges PromotiontimeEdges `json:"edges"`
}

// PromotiontimeEdges holds the relations/edges for other nodes in the graph.
type PromotiontimeEdges struct {
	// Promotion holds the value of the promotion edge.
	Promotion []*Promotion
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PromotionOrErr returns the Promotion value or an error if the edge
// was not loaded in eager-loading.
func (e PromotiontimeEdges) PromotionOrErr() ([]*Promotion, error) {
	if e.loadedTypes[0] {
		return e.Promotion, nil
	}
	return nil, &NotLoadedError{edge: "promotion"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Promotiontime) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // DATE
		&sql.NullInt64{}, // HOUR
		&sql.NullInt64{}, // MINUTE
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Promotiontime fields.
func (pr *Promotiontime) assignValues(values ...interface{}) error {
	if m, n := len(values), len(promotiontime.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field DATE", values[0])
	} else if value.Valid {
		pr.DATE = value.Time
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field HOUR", values[1])
	} else if value.Valid {
		pr.HOUR = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field MINUTE", values[2])
	} else if value.Valid {
		pr.MINUTE = int(value.Int64)
	}
	return nil
}

// QueryPromotion queries the promotion edge of the Promotiontime.
func (pr *Promotiontime) QueryPromotion() *PromotionQuery {
	return (&PromotiontimeClient{config: pr.config}).QueryPromotion(pr)
}

// Update returns a builder for updating this Promotiontime.
// Note that, you need to call Promotiontime.Unwrap() before calling this method, if this Promotiontime
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Promotiontime) Update() *PromotiontimeUpdateOne {
	return (&PromotiontimeClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Promotiontime) Unwrap() *Promotiontime {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Promotiontime is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Promotiontime) String() string {
	var builder strings.Builder
	builder.WriteString("Promotiontime(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", DATE=")
	builder.WriteString(pr.DATE.Format(time.ANSIC))
	builder.WriteString(", HOUR=")
	builder.WriteString(fmt.Sprintf("%v", pr.HOUR))
	builder.WriteString(", MINUTE=")
	builder.WriteString(fmt.Sprintf("%v", pr.MINUTE))
	builder.WriteByte(')')
	return builder.String()
}

// Promotiontimes is a parsable slice of Promotiontime.
type Promotiontimes []*Promotiontime

func (pr Promotiontimes) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
