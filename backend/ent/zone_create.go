// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/G16/app/ent/equipment"
	"github.com/G16/app/ent/zone"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ZoneCreate is the builder for creating a Zone entity.
type ZoneCreate struct {
	config
	mutation *ZoneMutation
	hooks    []Hook
}

// SetEQUIPMENTZONE sets the EQUIPMENTZONE field.
func (zc *ZoneCreate) SetEQUIPMENTZONE(s string) *ZoneCreate {
	zc.mutation.SetEQUIPMENTZONE(s)
	return zc
}

// AddEquipmentIDs adds the equipment edge to Equipment by ids.
func (zc *ZoneCreate) AddEquipmentIDs(ids ...int) *ZoneCreate {
	zc.mutation.AddEquipmentIDs(ids...)
	return zc
}

// AddEquipment adds the equipment edges to Equipment.
func (zc *ZoneCreate) AddEquipment(e ...*Equipment) *ZoneCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return zc.AddEquipmentIDs(ids...)
}

// Mutation returns the ZoneMutation object of the builder.
func (zc *ZoneCreate) Mutation() *ZoneMutation {
	return zc.mutation
}

// Save creates the Zone in the database.
func (zc *ZoneCreate) Save(ctx context.Context) (*Zone, error) {
	if _, ok := zc.mutation.EQUIPMENTZONE(); !ok {
		return nil, &ValidationError{Name: "EQUIPMENTZONE", err: errors.New("ent: missing required field \"EQUIPMENTZONE\"")}
	}
	var (
		err  error
		node *Zone
	)
	if len(zc.hooks) == 0 {
		node, err = zc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ZoneMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			zc.mutation = mutation
			node, err = zc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(zc.hooks) - 1; i >= 0; i-- {
			mut = zc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, zc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (zc *ZoneCreate) SaveX(ctx context.Context) *Zone {
	v, err := zc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (zc *ZoneCreate) sqlSave(ctx context.Context) (*Zone, error) {
	z, _spec := zc.createSpec()
	if err := sqlgraph.CreateNode(ctx, zc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	z.ID = int(id)
	return z, nil
}

func (zc *ZoneCreate) createSpec() (*Zone, *sqlgraph.CreateSpec) {
	var (
		z     = &Zone{config: zc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: zone.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: zone.FieldID,
			},
		}
	)
	if value, ok := zc.mutation.EQUIPMENTZONE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: zone.FieldEQUIPMENTZONE,
		})
		z.EQUIPMENTZONE = value
	}
	if nodes := zc.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   zone.EquipmentTable,
			Columns: []string{zone.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return z, _spec
}
