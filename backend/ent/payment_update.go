// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/G16/app/ent/employee"
	"github.com/G16/app/ent/member"
	"github.com/G16/app/ent/payment"
	"github.com/G16/app/ent/paymenttype"
	"github.com/G16/app/ent/predicate"
	"github.com/G16/app/ent/promotion"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PaymentUpdate is the builder for updating Payment entities.
type PaymentUpdate struct {
	config
	hooks      []Hook
	mutation   *PaymentMutation
	predicates []predicate.Payment
}

// Where adds a new predicate for the builder.
func (pu *PaymentUpdate) Where(ps ...predicate.Payment) *PaymentUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetPAYMENTAMOUNT sets the PAYMENTAMOUNT field.
func (pu *PaymentUpdate) SetPAYMENTAMOUNT(s string) *PaymentUpdate {
	pu.mutation.SetPAYMENTAMOUNT(s)
	return pu
}

// SetPAYMENTDATE sets the PAYMENTDATE field.
func (pu *PaymentUpdate) SetPAYMENTDATE(t time.Time) *PaymentUpdate {
	pu.mutation.SetPAYMENTDATE(t)
	return pu
}

// SetMemberID sets the member edge to Member by id.
func (pu *PaymentUpdate) SetMemberID(id int) *PaymentUpdate {
	pu.mutation.SetMemberID(id)
	return pu
}

// SetNillableMemberID sets the member edge to Member by id if the given value is not nil.
func (pu *PaymentUpdate) SetNillableMemberID(id *int) *PaymentUpdate {
	if id != nil {
		pu = pu.SetMemberID(*id)
	}
	return pu
}

// SetMember sets the member edge to Member.
func (pu *PaymentUpdate) SetMember(m *Member) *PaymentUpdate {
	return pu.SetMemberID(m.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (pu *PaymentUpdate) SetEmployeeID(id int) *PaymentUpdate {
	pu.mutation.SetEmployeeID(id)
	return pu
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (pu *PaymentUpdate) SetNillableEmployeeID(id *int) *PaymentUpdate {
	if id != nil {
		pu = pu.SetEmployeeID(*id)
	}
	return pu
}

// SetEmployee sets the employee edge to Employee.
func (pu *PaymentUpdate) SetEmployee(e *Employee) *PaymentUpdate {
	return pu.SetEmployeeID(e.ID)
}

// SetPaymenttypeID sets the paymenttype edge to Paymenttype by id.
func (pu *PaymentUpdate) SetPaymenttypeID(id int) *PaymentUpdate {
	pu.mutation.SetPaymenttypeID(id)
	return pu
}

// SetNillablePaymenttypeID sets the paymenttype edge to Paymenttype by id if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePaymenttypeID(id *int) *PaymentUpdate {
	if id != nil {
		pu = pu.SetPaymenttypeID(*id)
	}
	return pu
}

// SetPaymenttype sets the paymenttype edge to Paymenttype.
func (pu *PaymentUpdate) SetPaymenttype(p *Paymenttype) *PaymentUpdate {
	return pu.SetPaymenttypeID(p.ID)
}

// SetPromotionID sets the promotion edge to Promotion by id.
func (pu *PaymentUpdate) SetPromotionID(id int) *PaymentUpdate {
	pu.mutation.SetPromotionID(id)
	return pu
}

// SetNillablePromotionID sets the promotion edge to Promotion by id if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePromotionID(id *int) *PaymentUpdate {
	if id != nil {
		pu = pu.SetPromotionID(*id)
	}
	return pu
}

// SetPromotion sets the promotion edge to Promotion.
func (pu *PaymentUpdate) SetPromotion(p *Promotion) *PaymentUpdate {
	return pu.SetPromotionID(p.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (pu *PaymentUpdate) Mutation() *PaymentMutation {
	return pu.mutation
}

// ClearMember clears the member edge to Member.
func (pu *PaymentUpdate) ClearMember() *PaymentUpdate {
	pu.mutation.ClearMember()
	return pu
}

// ClearEmployee clears the employee edge to Employee.
func (pu *PaymentUpdate) ClearEmployee() *PaymentUpdate {
	pu.mutation.ClearEmployee()
	return pu
}

// ClearPaymenttype clears the paymenttype edge to Paymenttype.
func (pu *PaymentUpdate) ClearPaymenttype() *PaymentUpdate {
	pu.mutation.ClearPaymenttype()
	return pu
}

// ClearPromotion clears the promotion edge to Promotion.
func (pu *PaymentUpdate) ClearPromotion() *PaymentUpdate {
	pu.mutation.ClearPromotion()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PaymentUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PaymentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PaymentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PAYMENTAMOUNT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldPAYMENTAMOUNT,
		})
	}
	if value, ok := pu.mutation.PAYMENTDATE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldPAYMENTDATE,
		})
	}
	if pu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MemberTable,
			Columns: []string{payment.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MemberTable,
			Columns: []string{payment.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.EmployeeTable,
			Columns: []string{payment.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.EmployeeTable,
			Columns: []string{payment.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PaymenttypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymenttypeTable,
			Columns: []string{payment.PaymenttypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paymenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PaymenttypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymenttypeTable,
			Columns: []string{payment.PaymenttypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paymenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PromotionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PromotionTable,
			Columns: []string{payment.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PromotionTable,
			Columns: []string{payment.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PaymentUpdateOne is the builder for updating a single Payment entity.
type PaymentUpdateOne struct {
	config
	hooks    []Hook
	mutation *PaymentMutation
}

// SetPAYMENTAMOUNT sets the PAYMENTAMOUNT field.
func (puo *PaymentUpdateOne) SetPAYMENTAMOUNT(s string) *PaymentUpdateOne {
	puo.mutation.SetPAYMENTAMOUNT(s)
	return puo
}

// SetPAYMENTDATE sets the PAYMENTDATE field.
func (puo *PaymentUpdateOne) SetPAYMENTDATE(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetPAYMENTDATE(t)
	return puo
}

// SetMemberID sets the member edge to Member by id.
func (puo *PaymentUpdateOne) SetMemberID(id int) *PaymentUpdateOne {
	puo.mutation.SetMemberID(id)
	return puo
}

// SetNillableMemberID sets the member edge to Member by id if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableMemberID(id *int) *PaymentUpdateOne {
	if id != nil {
		puo = puo.SetMemberID(*id)
	}
	return puo
}

// SetMember sets the member edge to Member.
func (puo *PaymentUpdateOne) SetMember(m *Member) *PaymentUpdateOne {
	return puo.SetMemberID(m.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (puo *PaymentUpdateOne) SetEmployeeID(id int) *PaymentUpdateOne {
	puo.mutation.SetEmployeeID(id)
	return puo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableEmployeeID(id *int) *PaymentUpdateOne {
	if id != nil {
		puo = puo.SetEmployeeID(*id)
	}
	return puo
}

// SetEmployee sets the employee edge to Employee.
func (puo *PaymentUpdateOne) SetEmployee(e *Employee) *PaymentUpdateOne {
	return puo.SetEmployeeID(e.ID)
}

// SetPaymenttypeID sets the paymenttype edge to Paymenttype by id.
func (puo *PaymentUpdateOne) SetPaymenttypeID(id int) *PaymentUpdateOne {
	puo.mutation.SetPaymenttypeID(id)
	return puo
}

// SetNillablePaymenttypeID sets the paymenttype edge to Paymenttype by id if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePaymenttypeID(id *int) *PaymentUpdateOne {
	if id != nil {
		puo = puo.SetPaymenttypeID(*id)
	}
	return puo
}

// SetPaymenttype sets the paymenttype edge to Paymenttype.
func (puo *PaymentUpdateOne) SetPaymenttype(p *Paymenttype) *PaymentUpdateOne {
	return puo.SetPaymenttypeID(p.ID)
}

// SetPromotionID sets the promotion edge to Promotion by id.
func (puo *PaymentUpdateOne) SetPromotionID(id int) *PaymentUpdateOne {
	puo.mutation.SetPromotionID(id)
	return puo
}

// SetNillablePromotionID sets the promotion edge to Promotion by id if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePromotionID(id *int) *PaymentUpdateOne {
	if id != nil {
		puo = puo.SetPromotionID(*id)
	}
	return puo
}

// SetPromotion sets the promotion edge to Promotion.
func (puo *PaymentUpdateOne) SetPromotion(p *Promotion) *PaymentUpdateOne {
	return puo.SetPromotionID(p.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (puo *PaymentUpdateOne) Mutation() *PaymentMutation {
	return puo.mutation
}

// ClearMember clears the member edge to Member.
func (puo *PaymentUpdateOne) ClearMember() *PaymentUpdateOne {
	puo.mutation.ClearMember()
	return puo
}

// ClearEmployee clears the employee edge to Employee.
func (puo *PaymentUpdateOne) ClearEmployee() *PaymentUpdateOne {
	puo.mutation.ClearEmployee()
	return puo
}

// ClearPaymenttype clears the paymenttype edge to Paymenttype.
func (puo *PaymentUpdateOne) ClearPaymenttype() *PaymentUpdateOne {
	puo.mutation.ClearPaymenttype()
	return puo
}

// ClearPromotion clears the promotion edge to Promotion.
func (puo *PaymentUpdateOne) ClearPromotion() *PaymentUpdateOne {
	puo.mutation.ClearPromotion()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PaymentUpdateOne) Save(ctx context.Context) (*Payment, error) {

	var (
		err  error
		node *Payment
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PaymentUpdateOne) SaveX(ctx context.Context) *Payment {
	pa, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pa
}

// Exec executes the query on the entity.
func (puo *PaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PaymentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PaymentUpdateOne) sqlSave(ctx context.Context) (pa *Payment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Payment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.PAYMENTAMOUNT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldPAYMENTAMOUNT,
		})
	}
	if value, ok := puo.mutation.PAYMENTDATE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldPAYMENTDATE,
		})
	}
	if puo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MemberTable,
			Columns: []string{payment.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MemberTable,
			Columns: []string{payment.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.EmployeeTable,
			Columns: []string{payment.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.EmployeeTable,
			Columns: []string{payment.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PaymenttypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymenttypeTable,
			Columns: []string{payment.PaymenttypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paymenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PaymenttypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymenttypeTable,
			Columns: []string{payment.PaymenttypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paymenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PromotionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PromotionTable,
			Columns: []string{payment.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PromotionTable,
			Columns: []string{payment.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pa = &Payment{config: puo.config}
	_spec.Assign = pa.assignValues
	_spec.ScanValues = pa.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pa, nil
}
