// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/G16/app/ent/age"
	"github.com/G16/app/ent/bookcourse"
	"github.com/G16/app/ent/employee"
	"github.com/G16/app/ent/equipment"
	"github.com/G16/app/ent/equipmentrental"
	"github.com/G16/app/ent/payment"
	"github.com/G16/app/ent/position"
	"github.com/G16/app/ent/predicate"
	"github.com/G16/app/ent/salary"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks      []Hook
	mutation   *EmployeeMutation
	predicates []predicate.Employee
}

// Where adds a new predicate for the builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.predicates = append(eu.predicates, ps...)
	return eu
}

// SetEMPLOYEEID sets the EMPLOYEEID field.
func (eu *EmployeeUpdate) SetEMPLOYEEID(s string) *EmployeeUpdate {
	eu.mutation.SetEMPLOYEEID(s)
	return eu
}

// SetEMPLOYEENAME sets the EMPLOYEENAME field.
func (eu *EmployeeUpdate) SetEMPLOYEENAME(s string) *EmployeeUpdate {
	eu.mutation.SetEMPLOYEENAME(s)
	return eu
}

// SetEMPLOYEEADDRESS sets the EMPLOYEEADDRESS field.
func (eu *EmployeeUpdate) SetEMPLOYEEADDRESS(s string) *EmployeeUpdate {
	eu.mutation.SetEMPLOYEEADDRESS(s)
	return eu
}

// SetIDCARDNUMBER sets the IDCARDNUMBER field.
func (eu *EmployeeUpdate) SetIDCARDNUMBER(i int) *EmployeeUpdate {
	eu.mutation.ResetIDCARDNUMBER()
	eu.mutation.SetIDCARDNUMBER(i)
	return eu
}

// AddIDCARDNUMBER adds i to IDCARDNUMBER.
func (eu *EmployeeUpdate) AddIDCARDNUMBER(i int) *EmployeeUpdate {
	eu.mutation.AddIDCARDNUMBER(i)
	return eu
}

// SetAgeID sets the age edge to Age by id.
func (eu *EmployeeUpdate) SetAgeID(id int) *EmployeeUpdate {
	eu.mutation.SetAgeID(id)
	return eu
}

// SetNillableAgeID sets the age edge to Age by id if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableAgeID(id *int) *EmployeeUpdate {
	if id != nil {
		eu = eu.SetAgeID(*id)
	}
	return eu
}

// SetAge sets the age edge to Age.
func (eu *EmployeeUpdate) SetAge(a *Age) *EmployeeUpdate {
	return eu.SetAgeID(a.ID)
}

// SetPositionID sets the position edge to Position by id.
func (eu *EmployeeUpdate) SetPositionID(id int) *EmployeeUpdate {
	eu.mutation.SetPositionID(id)
	return eu
}

// SetNillablePositionID sets the position edge to Position by id if the given value is not nil.
func (eu *EmployeeUpdate) SetNillablePositionID(id *int) *EmployeeUpdate {
	if id != nil {
		eu = eu.SetPositionID(*id)
	}
	return eu
}

// SetPosition sets the position edge to Position.
func (eu *EmployeeUpdate) SetPosition(p *Position) *EmployeeUpdate {
	return eu.SetPositionID(p.ID)
}

// SetSalaryID sets the salary edge to Salary by id.
func (eu *EmployeeUpdate) SetSalaryID(id int) *EmployeeUpdate {
	eu.mutation.SetSalaryID(id)
	return eu
}

// SetNillableSalaryID sets the salary edge to Salary by id if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableSalaryID(id *int) *EmployeeUpdate {
	if id != nil {
		eu = eu.SetSalaryID(*id)
	}
	return eu
}

// SetSalary sets the salary edge to Salary.
func (eu *EmployeeUpdate) SetSalary(s *Salary) *EmployeeUpdate {
	return eu.SetSalaryID(s.ID)
}

// AddPaymentIDs adds the payment edge to Payment by ids.
func (eu *EmployeeUpdate) AddPaymentIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddPaymentIDs(ids...)
	return eu
}

// AddPayment adds the payment edges to Payment.
func (eu *EmployeeUpdate) AddPayment(p ...*Payment) *EmployeeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddPaymentIDs(ids...)
}

// AddEquipmentIDs adds the equipment edge to Equipment by ids.
func (eu *EmployeeUpdate) AddEquipmentIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddEquipmentIDs(ids...)
	return eu
}

// AddEquipment adds the equipment edges to Equipment.
func (eu *EmployeeUpdate) AddEquipment(e ...*Equipment) *EmployeeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEquipmentIDs(ids...)
}

// AddBookcourseIDs adds the bookcourse edge to Bookcourse by ids.
func (eu *EmployeeUpdate) AddBookcourseIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddBookcourseIDs(ids...)
	return eu
}

// AddBookcourse adds the bookcourse edges to Bookcourse.
func (eu *EmployeeUpdate) AddBookcourse(b ...*Bookcourse) *EmployeeUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return eu.AddBookcourseIDs(ids...)
}

// AddEquipmentrentalIDs adds the equipmentrental edge to Equipmentrental by ids.
func (eu *EmployeeUpdate) AddEquipmentrentalIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddEquipmentrentalIDs(ids...)
	return eu
}

// AddEquipmentrental adds the equipmentrental edges to Equipmentrental.
func (eu *EmployeeUpdate) AddEquipmentrental(e ...*Equipmentrental) *EmployeeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEquipmentrentalIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// ClearAge clears the age edge to Age.
func (eu *EmployeeUpdate) ClearAge() *EmployeeUpdate {
	eu.mutation.ClearAge()
	return eu
}

// ClearPosition clears the position edge to Position.
func (eu *EmployeeUpdate) ClearPosition() *EmployeeUpdate {
	eu.mutation.ClearPosition()
	return eu
}

// ClearSalary clears the salary edge to Salary.
func (eu *EmployeeUpdate) ClearSalary() *EmployeeUpdate {
	eu.mutation.ClearSalary()
	return eu
}

// RemovePaymentIDs removes the payment edge to Payment by ids.
func (eu *EmployeeUpdate) RemovePaymentIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemovePaymentIDs(ids...)
	return eu
}

// RemovePayment removes payment edges to Payment.
func (eu *EmployeeUpdate) RemovePayment(p ...*Payment) *EmployeeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemovePaymentIDs(ids...)
}

// RemoveEquipmentIDs removes the equipment edge to Equipment by ids.
func (eu *EmployeeUpdate) RemoveEquipmentIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveEquipmentIDs(ids...)
	return eu
}

// RemoveEquipment removes equipment edges to Equipment.
func (eu *EmployeeUpdate) RemoveEquipment(e ...*Equipment) *EmployeeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEquipmentIDs(ids...)
}

// RemoveBookcourseIDs removes the bookcourse edge to Bookcourse by ids.
func (eu *EmployeeUpdate) RemoveBookcourseIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveBookcourseIDs(ids...)
	return eu
}

// RemoveBookcourse removes bookcourse edges to Bookcourse.
func (eu *EmployeeUpdate) RemoveBookcourse(b ...*Bookcourse) *EmployeeUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return eu.RemoveBookcourseIDs(ids...)
}

// RemoveEquipmentrentalIDs removes the equipmentrental edge to Equipmentrental by ids.
func (eu *EmployeeUpdate) RemoveEquipmentrentalIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveEquipmentrentalIDs(ids...)
	return eu
}

// RemoveEquipmentrental removes equipmentrental edges to Equipmentrental.
func (eu *EmployeeUpdate) RemoveEquipmentrental(e ...*Equipmentrental) *EmployeeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEquipmentrentalIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := eu.mutation.EMPLOYEEID(); ok {
		if err := employee.EMPLOYEEIDValidator(v); err != nil {
			return 0, &ValidationError{Name: "EMPLOYEEID", err: fmt.Errorf("ent: validator failed for field \"EMPLOYEEID\": %w", err)}
		}
	}
	if v, ok := eu.mutation.EMPLOYEENAME(); ok {
		if err := employee.EMPLOYEENAMEValidator(v); err != nil {
			return 0, &ValidationError{Name: "EMPLOYEENAME", err: fmt.Errorf("ent: validator failed for field \"EMPLOYEENAME\": %w", err)}
		}
	}
	if v, ok := eu.mutation.EMPLOYEEADDRESS(); ok {
		if err := employee.EMPLOYEEADDRESSValidator(v); err != nil {
			return 0, &ValidationError{Name: "EMPLOYEEADDRESS", err: fmt.Errorf("ent: validator failed for field \"EMPLOYEEADDRESS\": %w", err)}
		}
	}
	if v, ok := eu.mutation.IDCARDNUMBER(); ok {
		if err := employee.IDCARDNUMBERValidator(v); err != nil {
			return 0, &ValidationError{Name: "IDCARDNUMBER", err: fmt.Errorf("ent: validator failed for field \"IDCARDNUMBER\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmployeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		},
	}
	if ps := eu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.EMPLOYEEID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEMPLOYEEID,
		})
	}
	if value, ok := eu.mutation.EMPLOYEENAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEMPLOYEENAME,
		})
	}
	if value, ok := eu.mutation.EMPLOYEEADDRESS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEMPLOYEEADDRESS,
		})
	}
	if value, ok := eu.mutation.IDCARDNUMBER(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: employee.FieldIDCARDNUMBER,
		})
	}
	if value, ok := eu.mutation.AddedIDCARDNUMBER(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: employee.FieldIDCARDNUMBER,
		})
	}
	if eu.mutation.AgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.AgeTable,
			Columns: []string{employee.AgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: age.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.AgeTable,
			Columns: []string{employee.AgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: age.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PositionTable,
			Columns: []string{employee.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PositionTable,
			Columns: []string{employee.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SalaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.SalaryTable,
			Columns: []string{employee.SalaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salary.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SalaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.SalaryTable,
			Columns: []string{employee.SalaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salary.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.mutation.RemovedPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.PaymentTable,
			Columns: []string{employee.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.PaymentTable,
			Columns: []string{employee.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.mutation.RemovedEquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EquipmentTable,
			Columns: []string{employee.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EquipmentTable,
			Columns: []string{employee.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.mutation.RemovedBookcourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.BookcourseTable,
			Columns: []string{employee.BookcourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.BookcourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.BookcourseTable,
			Columns: []string{employee.BookcourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.mutation.RemovedEquipmentrentalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EquipmentrentalTable,
			Columns: []string{employee.EquipmentrentalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipmentrental.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EquipmentrentalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EquipmentrentalTable,
			Columns: []string{employee.EquipmentrentalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipmentrental.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// SetEMPLOYEEID sets the EMPLOYEEID field.
func (euo *EmployeeUpdateOne) SetEMPLOYEEID(s string) *EmployeeUpdateOne {
	euo.mutation.SetEMPLOYEEID(s)
	return euo
}

// SetEMPLOYEENAME sets the EMPLOYEENAME field.
func (euo *EmployeeUpdateOne) SetEMPLOYEENAME(s string) *EmployeeUpdateOne {
	euo.mutation.SetEMPLOYEENAME(s)
	return euo
}

// SetEMPLOYEEADDRESS sets the EMPLOYEEADDRESS field.
func (euo *EmployeeUpdateOne) SetEMPLOYEEADDRESS(s string) *EmployeeUpdateOne {
	euo.mutation.SetEMPLOYEEADDRESS(s)
	return euo
}

// SetIDCARDNUMBER sets the IDCARDNUMBER field.
func (euo *EmployeeUpdateOne) SetIDCARDNUMBER(i int) *EmployeeUpdateOne {
	euo.mutation.ResetIDCARDNUMBER()
	euo.mutation.SetIDCARDNUMBER(i)
	return euo
}

// AddIDCARDNUMBER adds i to IDCARDNUMBER.
func (euo *EmployeeUpdateOne) AddIDCARDNUMBER(i int) *EmployeeUpdateOne {
	euo.mutation.AddIDCARDNUMBER(i)
	return euo
}

// SetAgeID sets the age edge to Age by id.
func (euo *EmployeeUpdateOne) SetAgeID(id int) *EmployeeUpdateOne {
	euo.mutation.SetAgeID(id)
	return euo
}

// SetNillableAgeID sets the age edge to Age by id if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableAgeID(id *int) *EmployeeUpdateOne {
	if id != nil {
		euo = euo.SetAgeID(*id)
	}
	return euo
}

// SetAge sets the age edge to Age.
func (euo *EmployeeUpdateOne) SetAge(a *Age) *EmployeeUpdateOne {
	return euo.SetAgeID(a.ID)
}

// SetPositionID sets the position edge to Position by id.
func (euo *EmployeeUpdateOne) SetPositionID(id int) *EmployeeUpdateOne {
	euo.mutation.SetPositionID(id)
	return euo
}

// SetNillablePositionID sets the position edge to Position by id if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillablePositionID(id *int) *EmployeeUpdateOne {
	if id != nil {
		euo = euo.SetPositionID(*id)
	}
	return euo
}

// SetPosition sets the position edge to Position.
func (euo *EmployeeUpdateOne) SetPosition(p *Position) *EmployeeUpdateOne {
	return euo.SetPositionID(p.ID)
}

// SetSalaryID sets the salary edge to Salary by id.
func (euo *EmployeeUpdateOne) SetSalaryID(id int) *EmployeeUpdateOne {
	euo.mutation.SetSalaryID(id)
	return euo
}

// SetNillableSalaryID sets the salary edge to Salary by id if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableSalaryID(id *int) *EmployeeUpdateOne {
	if id != nil {
		euo = euo.SetSalaryID(*id)
	}
	return euo
}

// SetSalary sets the salary edge to Salary.
func (euo *EmployeeUpdateOne) SetSalary(s *Salary) *EmployeeUpdateOne {
	return euo.SetSalaryID(s.ID)
}

// AddPaymentIDs adds the payment edge to Payment by ids.
func (euo *EmployeeUpdateOne) AddPaymentIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddPaymentIDs(ids...)
	return euo
}

// AddPayment adds the payment edges to Payment.
func (euo *EmployeeUpdateOne) AddPayment(p ...*Payment) *EmployeeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddPaymentIDs(ids...)
}

// AddEquipmentIDs adds the equipment edge to Equipment by ids.
func (euo *EmployeeUpdateOne) AddEquipmentIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddEquipmentIDs(ids...)
	return euo
}

// AddEquipment adds the equipment edges to Equipment.
func (euo *EmployeeUpdateOne) AddEquipment(e ...*Equipment) *EmployeeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEquipmentIDs(ids...)
}

// AddBookcourseIDs adds the bookcourse edge to Bookcourse by ids.
func (euo *EmployeeUpdateOne) AddBookcourseIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddBookcourseIDs(ids...)
	return euo
}

// AddBookcourse adds the bookcourse edges to Bookcourse.
func (euo *EmployeeUpdateOne) AddBookcourse(b ...*Bookcourse) *EmployeeUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return euo.AddBookcourseIDs(ids...)
}

// AddEquipmentrentalIDs adds the equipmentrental edge to Equipmentrental by ids.
func (euo *EmployeeUpdateOne) AddEquipmentrentalIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddEquipmentrentalIDs(ids...)
	return euo
}

// AddEquipmentrental adds the equipmentrental edges to Equipmentrental.
func (euo *EmployeeUpdateOne) AddEquipmentrental(e ...*Equipmentrental) *EmployeeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEquipmentrentalIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// ClearAge clears the age edge to Age.
func (euo *EmployeeUpdateOne) ClearAge() *EmployeeUpdateOne {
	euo.mutation.ClearAge()
	return euo
}

// ClearPosition clears the position edge to Position.
func (euo *EmployeeUpdateOne) ClearPosition() *EmployeeUpdateOne {
	euo.mutation.ClearPosition()
	return euo
}

// ClearSalary clears the salary edge to Salary.
func (euo *EmployeeUpdateOne) ClearSalary() *EmployeeUpdateOne {
	euo.mutation.ClearSalary()
	return euo
}

// RemovePaymentIDs removes the payment edge to Payment by ids.
func (euo *EmployeeUpdateOne) RemovePaymentIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemovePaymentIDs(ids...)
	return euo
}

// RemovePayment removes payment edges to Payment.
func (euo *EmployeeUpdateOne) RemovePayment(p ...*Payment) *EmployeeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemovePaymentIDs(ids...)
}

// RemoveEquipmentIDs removes the equipment edge to Equipment by ids.
func (euo *EmployeeUpdateOne) RemoveEquipmentIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveEquipmentIDs(ids...)
	return euo
}

// RemoveEquipment removes equipment edges to Equipment.
func (euo *EmployeeUpdateOne) RemoveEquipment(e ...*Equipment) *EmployeeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEquipmentIDs(ids...)
}

// RemoveBookcourseIDs removes the bookcourse edge to Bookcourse by ids.
func (euo *EmployeeUpdateOne) RemoveBookcourseIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveBookcourseIDs(ids...)
	return euo
}

// RemoveBookcourse removes bookcourse edges to Bookcourse.
func (euo *EmployeeUpdateOne) RemoveBookcourse(b ...*Bookcourse) *EmployeeUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return euo.RemoveBookcourseIDs(ids...)
}

// RemoveEquipmentrentalIDs removes the equipmentrental edge to Equipmentrental by ids.
func (euo *EmployeeUpdateOne) RemoveEquipmentrentalIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveEquipmentrentalIDs(ids...)
	return euo
}

// RemoveEquipmentrental removes equipmentrental edges to Equipmentrental.
func (euo *EmployeeUpdateOne) RemoveEquipmentrental(e ...*Equipmentrental) *EmployeeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEquipmentrentalIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	if v, ok := euo.mutation.EMPLOYEEID(); ok {
		if err := employee.EMPLOYEEIDValidator(v); err != nil {
			return nil, &ValidationError{Name: "EMPLOYEEID", err: fmt.Errorf("ent: validator failed for field \"EMPLOYEEID\": %w", err)}
		}
	}
	if v, ok := euo.mutation.EMPLOYEENAME(); ok {
		if err := employee.EMPLOYEENAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "EMPLOYEENAME", err: fmt.Errorf("ent: validator failed for field \"EMPLOYEENAME\": %w", err)}
		}
	}
	if v, ok := euo.mutation.EMPLOYEEADDRESS(); ok {
		if err := employee.EMPLOYEEADDRESSValidator(v); err != nil {
			return nil, &ValidationError{Name: "EMPLOYEEADDRESS", err: fmt.Errorf("ent: validator failed for field \"EMPLOYEEADDRESS\": %w", err)}
		}
	}
	if v, ok := euo.mutation.IDCARDNUMBER(); ok {
		if err := employee.IDCARDNUMBERValidator(v); err != nil {
			return nil, &ValidationError{Name: "IDCARDNUMBER", err: fmt.Errorf("ent: validator failed for field \"IDCARDNUMBER\": %w", err)}
		}
	}

	var (
		err  error
		node *Employee
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmployeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	e, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return e
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (e *Employee, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Employee.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.EMPLOYEEID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEMPLOYEEID,
		})
	}
	if value, ok := euo.mutation.EMPLOYEENAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEMPLOYEENAME,
		})
	}
	if value, ok := euo.mutation.EMPLOYEEADDRESS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEMPLOYEEADDRESS,
		})
	}
	if value, ok := euo.mutation.IDCARDNUMBER(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: employee.FieldIDCARDNUMBER,
		})
	}
	if value, ok := euo.mutation.AddedIDCARDNUMBER(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: employee.FieldIDCARDNUMBER,
		})
	}
	if euo.mutation.AgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.AgeTable,
			Columns: []string{employee.AgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: age.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.AgeTable,
			Columns: []string{employee.AgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: age.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PositionTable,
			Columns: []string{employee.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PositionTable,
			Columns: []string{employee.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SalaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.SalaryTable,
			Columns: []string{employee.SalaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salary.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SalaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.SalaryTable,
			Columns: []string{employee.SalaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: salary.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.mutation.RemovedPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.PaymentTable,
			Columns: []string{employee.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.PaymentTable,
			Columns: []string{employee.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.mutation.RemovedEquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EquipmentTable,
			Columns: []string{employee.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EquipmentTable,
			Columns: []string{employee.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.mutation.RemovedBookcourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.BookcourseTable,
			Columns: []string{employee.BookcourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.BookcourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.BookcourseTable,
			Columns: []string{employee.BookcourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.mutation.RemovedEquipmentrentalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EquipmentrentalTable,
			Columns: []string{employee.EquipmentrentalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipmentrental.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EquipmentrentalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EquipmentrentalTable,
			Columns: []string{employee.EquipmentrentalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipmentrental.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	e = &Employee{config: euo.config}
	_spec.Assign = e.assignValues
	_spec.ScanValues = e.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return e, nil
}
