// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/G16/app/ent/equipment"
	"github.com/G16/app/ent/equipmentrental"
	"github.com/G16/app/ent/equipmenttype"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// EquipmenttypeCreate is the builder for creating a Equipmenttype entity.
type EquipmenttypeCreate struct {
	config
	mutation *EquipmenttypeMutation
	hooks    []Hook
}

// SetEQUIPMENTTYPE sets the EQUIPMENTTYPE field.
func (ec *EquipmenttypeCreate) SetEQUIPMENTTYPE(s string) *EquipmenttypeCreate {
	ec.mutation.SetEQUIPMENTTYPE(s)
	return ec
}

// AddEquipmentIDs adds the equipment edge to Equipment by ids.
func (ec *EquipmenttypeCreate) AddEquipmentIDs(ids ...int) *EquipmenttypeCreate {
	ec.mutation.AddEquipmentIDs(ids...)
	return ec
}

// AddEquipment adds the equipment edges to Equipment.
func (ec *EquipmenttypeCreate) AddEquipment(e ...*Equipment) *EquipmenttypeCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEquipmentIDs(ids...)
}

// AddEquipmentrentalIDs adds the equipmentrental edge to Equipmentrental by ids.
func (ec *EquipmenttypeCreate) AddEquipmentrentalIDs(ids ...int) *EquipmenttypeCreate {
	ec.mutation.AddEquipmentrentalIDs(ids...)
	return ec
}

// AddEquipmentrental adds the equipmentrental edges to Equipmentrental.
func (ec *EquipmenttypeCreate) AddEquipmentrental(e ...*Equipmentrental) *EquipmenttypeCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEquipmentrentalIDs(ids...)
}

// Mutation returns the EquipmenttypeMutation object of the builder.
func (ec *EquipmenttypeCreate) Mutation() *EquipmenttypeMutation {
	return ec.mutation
}

// Save creates the Equipmenttype in the database.
func (ec *EquipmenttypeCreate) Save(ctx context.Context) (*Equipmenttype, error) {
	if _, ok := ec.mutation.EQUIPMENTTYPE(); !ok {
		return nil, &ValidationError{Name: "EQUIPMENTTYPE", err: errors.New("ent: missing required field \"EQUIPMENTTYPE\"")}
	}
	var (
		err  error
		node *Equipmenttype
	)
	if len(ec.hooks) == 0 {
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmenttypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EquipmenttypeCreate) SaveX(ctx context.Context) *Equipmenttype {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ec *EquipmenttypeCreate) sqlSave(ctx context.Context) (*Equipmenttype, error) {
	e, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	e.ID = int(id)
	return e, nil
}

func (ec *EquipmenttypeCreate) createSpec() (*Equipmenttype, *sqlgraph.CreateSpec) {
	var (
		e     = &Equipmenttype{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: equipmenttype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: equipmenttype.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.EQUIPMENTTYPE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipmenttype.FieldEQUIPMENTTYPE,
		})
		e.EQUIPMENTTYPE = value
	}
	if nodes := ec.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipmenttype.EquipmentTable,
			Columns: []string{equipmenttype.EquipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EquipmentrentalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   equipmenttype.EquipmentrentalTable,
			Columns: []string{equipmenttype.EquipmentrentalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipmentrental.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return e, _spec
}
