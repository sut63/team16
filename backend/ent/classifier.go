// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/G16/app/ent/classifier"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Classifier is the model entity for the Classifier schema.
type Classifier struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EQUIPMENTCLASSIFIER holds the value of the "EQUIPMENTCLASSIFIER" field.
	EQUIPMENTCLASSIFIER string `json:"EQUIPMENTCLASSIFIER,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClassifierQuery when eager-loading is set.
	Edges ClassifierEdges `json:"edges"`
}

// ClassifierEdges holds the relations/edges for other nodes in the graph.
type ClassifierEdges struct {
	// Equipment holds the value of the equipment edge.
	Equipment []*Equipment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading.
func (e ClassifierEdges) EquipmentOrErr() ([]*Equipment, error) {
	if e.loadedTypes[0] {
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Classifier) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // EQUIPMENTCLASSIFIER
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Classifier fields.
func (c *Classifier) assignValues(values ...interface{}) error {
	if m, n := len(values), len(classifier.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field EQUIPMENTCLASSIFIER", values[0])
	} else if value.Valid {
		c.EQUIPMENTCLASSIFIER = value.String
	}
	return nil
}

// QueryEquipment queries the equipment edge of the Classifier.
func (c *Classifier) QueryEquipment() *EquipmentQuery {
	return (&ClassifierClient{config: c.config}).QueryEquipment(c)
}

// Update returns a builder for updating this Classifier.
// Note that, you need to call Classifier.Unwrap() before calling this method, if this Classifier
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Classifier) Update() *ClassifierUpdateOne {
	return (&ClassifierClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Classifier) Unwrap() *Classifier {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Classifier is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Classifier) String() string {
	var builder strings.Builder
	builder.WriteString("Classifier(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", EQUIPMENTCLASSIFIER=")
	builder.WriteString(c.EQUIPMENTCLASSIFIER)
	builder.WriteByte(')')
	return builder.String()
}

// Classifiers is a parsable slice of Classifier.
type Classifiers []*Classifier

func (c Classifiers) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
