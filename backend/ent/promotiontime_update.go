// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/G16/app/ent/predicate"
	"github.com/G16/app/ent/promotion"
	"github.com/G16/app/ent/promotiontime"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PromotiontimeUpdate is the builder for updating Promotiontime entities.
type PromotiontimeUpdate struct {
	config
	hooks      []Hook
	mutation   *PromotiontimeMutation
	predicates []predicate.Promotiontime
}

// Where adds a new predicate for the builder.
func (pu *PromotiontimeUpdate) Where(ps ...predicate.Promotiontime) *PromotiontimeUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetDATE sets the DATE field.
func (pu *PromotiontimeUpdate) SetDATE(t time.Time) *PromotiontimeUpdate {
	pu.mutation.SetDATE(t)
	return pu
}

// SetHOUR sets the HOUR field.
func (pu *PromotiontimeUpdate) SetHOUR(i int) *PromotiontimeUpdate {
	pu.mutation.ResetHOUR()
	pu.mutation.SetHOUR(i)
	return pu
}

// AddHOUR adds i to HOUR.
func (pu *PromotiontimeUpdate) AddHOUR(i int) *PromotiontimeUpdate {
	pu.mutation.AddHOUR(i)
	return pu
}

// SetMINUTE sets the MINUTE field.
func (pu *PromotiontimeUpdate) SetMINUTE(i int) *PromotiontimeUpdate {
	pu.mutation.ResetMINUTE()
	pu.mutation.SetMINUTE(i)
	return pu
}

// AddMINUTE adds i to MINUTE.
func (pu *PromotiontimeUpdate) AddMINUTE(i int) *PromotiontimeUpdate {
	pu.mutation.AddMINUTE(i)
	return pu
}

// AddPromotionIDs adds the promotion edge to Promotion by ids.
func (pu *PromotiontimeUpdate) AddPromotionIDs(ids ...int) *PromotiontimeUpdate {
	pu.mutation.AddPromotionIDs(ids...)
	return pu
}

// AddPromotion adds the promotion edges to Promotion.
func (pu *PromotiontimeUpdate) AddPromotion(p ...*Promotion) *PromotiontimeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPromotionIDs(ids...)
}

// Mutation returns the PromotiontimeMutation object of the builder.
func (pu *PromotiontimeUpdate) Mutation() *PromotiontimeMutation {
	return pu.mutation
}

// RemovePromotionIDs removes the promotion edge to Promotion by ids.
func (pu *PromotiontimeUpdate) RemovePromotionIDs(ids ...int) *PromotiontimeUpdate {
	pu.mutation.RemovePromotionIDs(ids...)
	return pu
}

// RemovePromotion removes promotion edges to Promotion.
func (pu *PromotiontimeUpdate) RemovePromotion(p ...*Promotion) *PromotiontimeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePromotionIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PromotiontimeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := pu.mutation.HOUR(); ok {
		if err := promotiontime.HOURValidator(v); err != nil {
			return 0, &ValidationError{Name: "HOUR", err: fmt.Errorf("ent: validator failed for field \"HOUR\": %w", err)}
		}
	}
	if v, ok := pu.mutation.MINUTE(); ok {
		if err := promotiontime.MINUTEValidator(v); err != nil {
			return 0, &ValidationError{Name: "MINUTE", err: fmt.Errorf("ent: validator failed for field \"MINUTE\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PromotiontimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PromotiontimeUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PromotiontimeUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PromotiontimeUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PromotiontimeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   promotiontime.Table,
			Columns: promotiontime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: promotiontime.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.DATE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: promotiontime.FieldDATE,
		})
	}
	if value, ok := pu.mutation.HOUR(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: promotiontime.FieldHOUR,
		})
	}
	if value, ok := pu.mutation.AddedHOUR(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: promotiontime.FieldHOUR,
		})
	}
	if value, ok := pu.mutation.MINUTE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: promotiontime.FieldMINUTE,
		})
	}
	if value, ok := pu.mutation.AddedMINUTE(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: promotiontime.FieldMINUTE,
		})
	}
	if nodes := pu.mutation.RemovedPromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotiontime.PromotionTable,
			Columns: []string{promotiontime.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotiontime.PromotionTable,
			Columns: []string{promotiontime.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotiontime.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PromotiontimeUpdateOne is the builder for updating a single Promotiontime entity.
type PromotiontimeUpdateOne struct {
	config
	hooks    []Hook
	mutation *PromotiontimeMutation
}

// SetDATE sets the DATE field.
func (puo *PromotiontimeUpdateOne) SetDATE(t time.Time) *PromotiontimeUpdateOne {
	puo.mutation.SetDATE(t)
	return puo
}

// SetHOUR sets the HOUR field.
func (puo *PromotiontimeUpdateOne) SetHOUR(i int) *PromotiontimeUpdateOne {
	puo.mutation.ResetHOUR()
	puo.mutation.SetHOUR(i)
	return puo
}

// AddHOUR adds i to HOUR.
func (puo *PromotiontimeUpdateOne) AddHOUR(i int) *PromotiontimeUpdateOne {
	puo.mutation.AddHOUR(i)
	return puo
}

// SetMINUTE sets the MINUTE field.
func (puo *PromotiontimeUpdateOne) SetMINUTE(i int) *PromotiontimeUpdateOne {
	puo.mutation.ResetMINUTE()
	puo.mutation.SetMINUTE(i)
	return puo
}

// AddMINUTE adds i to MINUTE.
func (puo *PromotiontimeUpdateOne) AddMINUTE(i int) *PromotiontimeUpdateOne {
	puo.mutation.AddMINUTE(i)
	return puo
}

// AddPromotionIDs adds the promotion edge to Promotion by ids.
func (puo *PromotiontimeUpdateOne) AddPromotionIDs(ids ...int) *PromotiontimeUpdateOne {
	puo.mutation.AddPromotionIDs(ids...)
	return puo
}

// AddPromotion adds the promotion edges to Promotion.
func (puo *PromotiontimeUpdateOne) AddPromotion(p ...*Promotion) *PromotiontimeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPromotionIDs(ids...)
}

// Mutation returns the PromotiontimeMutation object of the builder.
func (puo *PromotiontimeUpdateOne) Mutation() *PromotiontimeMutation {
	return puo.mutation
}

// RemovePromotionIDs removes the promotion edge to Promotion by ids.
func (puo *PromotiontimeUpdateOne) RemovePromotionIDs(ids ...int) *PromotiontimeUpdateOne {
	puo.mutation.RemovePromotionIDs(ids...)
	return puo
}

// RemovePromotion removes promotion edges to Promotion.
func (puo *PromotiontimeUpdateOne) RemovePromotion(p ...*Promotion) *PromotiontimeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePromotionIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PromotiontimeUpdateOne) Save(ctx context.Context) (*Promotiontime, error) {
	if v, ok := puo.mutation.HOUR(); ok {
		if err := promotiontime.HOURValidator(v); err != nil {
			return nil, &ValidationError{Name: "HOUR", err: fmt.Errorf("ent: validator failed for field \"HOUR\": %w", err)}
		}
	}
	if v, ok := puo.mutation.MINUTE(); ok {
		if err := promotiontime.MINUTEValidator(v); err != nil {
			return nil, &ValidationError{Name: "MINUTE", err: fmt.Errorf("ent: validator failed for field \"MINUTE\": %w", err)}
		}
	}

	var (
		err  error
		node *Promotiontime
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PromotiontimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PromotiontimeUpdateOne) SaveX(ctx context.Context) *Promotiontime {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *PromotiontimeUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PromotiontimeUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PromotiontimeUpdateOne) sqlSave(ctx context.Context) (pr *Promotiontime, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   promotiontime.Table,
			Columns: promotiontime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: promotiontime.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Promotiontime.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.DATE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: promotiontime.FieldDATE,
		})
	}
	if value, ok := puo.mutation.HOUR(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: promotiontime.FieldHOUR,
		})
	}
	if value, ok := puo.mutation.AddedHOUR(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: promotiontime.FieldHOUR,
		})
	}
	if value, ok := puo.mutation.MINUTE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: promotiontime.FieldMINUTE,
		})
	}
	if value, ok := puo.mutation.AddedMINUTE(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: promotiontime.FieldMINUTE,
		})
	}
	if nodes := puo.mutation.RemovedPromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotiontime.PromotionTable,
			Columns: []string{promotiontime.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotiontime.PromotionTable,
			Columns: []string{promotiontime.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pr = &Promotiontime{config: puo.config}
	_spec.Assign = pr.assignValues
	_spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotiontime.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
