// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/G16/app/ent/migrate"

	"github.com/G16/app/ent/age"
	"github.com/G16/app/ent/bookcourse"
	"github.com/G16/app/ent/classifier"
	"github.com/G16/app/ent/course"
	"github.com/G16/app/ent/employee"
	"github.com/G16/app/ent/equipment"
	"github.com/G16/app/ent/equipmentrental"
	"github.com/G16/app/ent/equipmenttype"
	"github.com/G16/app/ent/member"
	"github.com/G16/app/ent/payment"
	"github.com/G16/app/ent/paymenttype"
	"github.com/G16/app/ent/position"
	"github.com/G16/app/ent/promotion"
	"github.com/G16/app/ent/promotionamount"
	"github.com/G16/app/ent/promotiontype"
	"github.com/G16/app/ent/salary"
	"github.com/G16/app/ent/zone"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Age is the client for interacting with the Age builders.
	Age *AgeClient
	// Bookcourse is the client for interacting with the Bookcourse builders.
	Bookcourse *BookcourseClient
	// Classifier is the client for interacting with the Classifier builders.
	Classifier *ClassifierClient
	// Course is the client for interacting with the Course builders.
	Course *CourseClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Equipment is the client for interacting with the Equipment builders.
	Equipment *EquipmentClient
	// Equipmentrental is the client for interacting with the Equipmentrental builders.
	Equipmentrental *EquipmentrentalClient
	// Equipmenttype is the client for interacting with the Equipmenttype builders.
	Equipmenttype *EquipmenttypeClient
	// Member is the client for interacting with the Member builders.
	Member *MemberClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// Paymenttype is the client for interacting with the Paymenttype builders.
	Paymenttype *PaymenttypeClient
	// Position is the client for interacting with the Position builders.
	Position *PositionClient
	// Promotion is the client for interacting with the Promotion builders.
	Promotion *PromotionClient
	// Promotionamount is the client for interacting with the Promotionamount builders.
	Promotionamount *PromotionamountClient
	// Promotiontype is the client for interacting with the Promotiontype builders.
	Promotiontype *PromotiontypeClient
	// Salary is the client for interacting with the Salary builders.
	Salary *SalaryClient
	// Zone is the client for interacting with the Zone builders.
	Zone *ZoneClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Age = NewAgeClient(c.config)
	c.Bookcourse = NewBookcourseClient(c.config)
	c.Classifier = NewClassifierClient(c.config)
	c.Course = NewCourseClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Equipment = NewEquipmentClient(c.config)
	c.Equipmentrental = NewEquipmentrentalClient(c.config)
	c.Equipmenttype = NewEquipmenttypeClient(c.config)
	c.Member = NewMemberClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.Paymenttype = NewPaymenttypeClient(c.config)
	c.Position = NewPositionClient(c.config)
	c.Promotion = NewPromotionClient(c.config)
	c.Promotionamount = NewPromotionamountClient(c.config)
	c.Promotiontype = NewPromotiontypeClient(c.config)
	c.Salary = NewSalaryClient(c.config)
	c.Zone = NewZoneClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Age:             NewAgeClient(cfg),
		Bookcourse:      NewBookcourseClient(cfg),
		Classifier:      NewClassifierClient(cfg),
		Course:          NewCourseClient(cfg),
		Employee:        NewEmployeeClient(cfg),
		Equipment:       NewEquipmentClient(cfg),
		Equipmentrental: NewEquipmentrentalClient(cfg),
		Equipmenttype:   NewEquipmenttypeClient(cfg),
		Member:          NewMemberClient(cfg),
		Payment:         NewPaymentClient(cfg),
		Paymenttype:     NewPaymenttypeClient(cfg),
		Position:        NewPositionClient(cfg),
		Promotion:       NewPromotionClient(cfg),
		Promotionamount: NewPromotionamountClient(cfg),
		Promotiontype:   NewPromotiontypeClient(cfg),
		Salary:          NewSalaryClient(cfg),
		Zone:            NewZoneClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:          cfg,
		Age:             NewAgeClient(cfg),
		Bookcourse:      NewBookcourseClient(cfg),
		Classifier:      NewClassifierClient(cfg),
		Course:          NewCourseClient(cfg),
		Employee:        NewEmployeeClient(cfg),
		Equipment:       NewEquipmentClient(cfg),
		Equipmentrental: NewEquipmentrentalClient(cfg),
		Equipmenttype:   NewEquipmenttypeClient(cfg),
		Member:          NewMemberClient(cfg),
		Payment:         NewPaymentClient(cfg),
		Paymenttype:     NewPaymenttypeClient(cfg),
		Position:        NewPositionClient(cfg),
		Promotion:       NewPromotionClient(cfg),
		Promotionamount: NewPromotionamountClient(cfg),
		Promotiontype:   NewPromotiontypeClient(cfg),
		Salary:          NewSalaryClient(cfg),
		Zone:            NewZoneClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Age.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Age.Use(hooks...)
	c.Bookcourse.Use(hooks...)
	c.Classifier.Use(hooks...)
	c.Course.Use(hooks...)
	c.Employee.Use(hooks...)
	c.Equipment.Use(hooks...)
	c.Equipmentrental.Use(hooks...)
	c.Equipmenttype.Use(hooks...)
	c.Member.Use(hooks...)
	c.Payment.Use(hooks...)
	c.Paymenttype.Use(hooks...)
	c.Position.Use(hooks...)
	c.Promotion.Use(hooks...)
	c.Promotionamount.Use(hooks...)
	c.Promotiontype.Use(hooks...)
	c.Salary.Use(hooks...)
	c.Zone.Use(hooks...)
}

// AgeClient is a client for the Age schema.
type AgeClient struct {
	config
}

// NewAgeClient returns a client for the Age from the given config.
func NewAgeClient(c config) *AgeClient {
	return &AgeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `age.Hooks(f(g(h())))`.
func (c *AgeClient) Use(hooks ...Hook) {
	c.hooks.Age = append(c.hooks.Age, hooks...)
}

// Create returns a create builder for Age.
func (c *AgeClient) Create() *AgeCreate {
	mutation := newAgeMutation(c.config, OpCreate)
	return &AgeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Age.
func (c *AgeClient) Update() *AgeUpdate {
	mutation := newAgeMutation(c.config, OpUpdate)
	return &AgeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgeClient) UpdateOne(a *Age) *AgeUpdateOne {
	mutation := newAgeMutation(c.config, OpUpdateOne, withAge(a))
	return &AgeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgeClient) UpdateOneID(id int) *AgeUpdateOne {
	mutation := newAgeMutation(c.config, OpUpdateOne, withAgeID(id))
	return &AgeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Age.
func (c *AgeClient) Delete() *AgeDelete {
	mutation := newAgeMutation(c.config, OpDelete)
	return &AgeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AgeClient) DeleteOne(a *Age) *AgeDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AgeClient) DeleteOneID(id int) *AgeDeleteOne {
	builder := c.Delete().Where(age.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgeDeleteOne{builder}
}

// Create returns a query builder for Age.
func (c *AgeClient) Query() *AgeQuery {
	return &AgeQuery{config: c.config}
}

// Get returns a Age entity by its id.
func (c *AgeClient) Get(ctx context.Context, id int) (*Age, error) {
	return c.Query().Where(age.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgeClient) GetX(ctx context.Context, id int) *Age {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// QueryEmployee queries the employee edge of a Age.
func (c *AgeClient) QueryEmployee(a *Age) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(age.Table, age.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, age.EmployeeTable, age.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AgeClient) Hooks() []Hook {
	return c.hooks.Age
}

// BookcourseClient is a client for the Bookcourse schema.
type BookcourseClient struct {
	config
}

// NewBookcourseClient returns a client for the Bookcourse from the given config.
func NewBookcourseClient(c config) *BookcourseClient {
	return &BookcourseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bookcourse.Hooks(f(g(h())))`.
func (c *BookcourseClient) Use(hooks ...Hook) {
	c.hooks.Bookcourse = append(c.hooks.Bookcourse, hooks...)
}

// Create returns a create builder for Bookcourse.
func (c *BookcourseClient) Create() *BookcourseCreate {
	mutation := newBookcourseMutation(c.config, OpCreate)
	return &BookcourseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Bookcourse.
func (c *BookcourseClient) Update() *BookcourseUpdate {
	mutation := newBookcourseMutation(c.config, OpUpdate)
	return &BookcourseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BookcourseClient) UpdateOne(b *Bookcourse) *BookcourseUpdateOne {
	mutation := newBookcourseMutation(c.config, OpUpdateOne, withBookcourse(b))
	return &BookcourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BookcourseClient) UpdateOneID(id int) *BookcourseUpdateOne {
	mutation := newBookcourseMutation(c.config, OpUpdateOne, withBookcourseID(id))
	return &BookcourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bookcourse.
func (c *BookcourseClient) Delete() *BookcourseDelete {
	mutation := newBookcourseMutation(c.config, OpDelete)
	return &BookcourseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BookcourseClient) DeleteOne(b *Bookcourse) *BookcourseDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BookcourseClient) DeleteOneID(id int) *BookcourseDeleteOne {
	builder := c.Delete().Where(bookcourse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BookcourseDeleteOne{builder}
}

// Create returns a query builder for Bookcourse.
func (c *BookcourseClient) Query() *BookcourseQuery {
	return &BookcourseQuery{config: c.config}
}

// Get returns a Bookcourse entity by its id.
func (c *BookcourseClient) Get(ctx context.Context, id int) (*Bookcourse, error) {
	return c.Query().Where(bookcourse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BookcourseClient) GetX(ctx context.Context, id int) *Bookcourse {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryCourse queries the course edge of a Bookcourse.
func (c *BookcourseClient) QueryCourse(b *Bookcourse) *CourseQuery {
	query := &CourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bookcourse.Table, bookcourse.FieldID, id),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bookcourse.CourseTable, bookcourse.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Bookcourse.
func (c *BookcourseClient) QueryEmployee(b *Bookcourse) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bookcourse.Table, bookcourse.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bookcourse.EmployeeTable, bookcourse.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMember queries the member edge of a Bookcourse.
func (c *BookcourseClient) QueryMember(b *Bookcourse) *MemberQuery {
	query := &MemberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bookcourse.Table, bookcourse.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bookcourse.MemberTable, bookcourse.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BookcourseClient) Hooks() []Hook {
	return c.hooks.Bookcourse
}

// ClassifierClient is a client for the Classifier schema.
type ClassifierClient struct {
	config
}

// NewClassifierClient returns a client for the Classifier from the given config.
func NewClassifierClient(c config) *ClassifierClient {
	return &ClassifierClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `classifier.Hooks(f(g(h())))`.
func (c *ClassifierClient) Use(hooks ...Hook) {
	c.hooks.Classifier = append(c.hooks.Classifier, hooks...)
}

// Create returns a create builder for Classifier.
func (c *ClassifierClient) Create() *ClassifierCreate {
	mutation := newClassifierMutation(c.config, OpCreate)
	return &ClassifierCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Classifier.
func (c *ClassifierClient) Update() *ClassifierUpdate {
	mutation := newClassifierMutation(c.config, OpUpdate)
	return &ClassifierUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClassifierClient) UpdateOne(cl *Classifier) *ClassifierUpdateOne {
	mutation := newClassifierMutation(c.config, OpUpdateOne, withClassifier(cl))
	return &ClassifierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClassifierClient) UpdateOneID(id int) *ClassifierUpdateOne {
	mutation := newClassifierMutation(c.config, OpUpdateOne, withClassifierID(id))
	return &ClassifierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Classifier.
func (c *ClassifierClient) Delete() *ClassifierDelete {
	mutation := newClassifierMutation(c.config, OpDelete)
	return &ClassifierDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClassifierClient) DeleteOne(cl *Classifier) *ClassifierDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClassifierClient) DeleteOneID(id int) *ClassifierDeleteOne {
	builder := c.Delete().Where(classifier.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClassifierDeleteOne{builder}
}

// Create returns a query builder for Classifier.
func (c *ClassifierClient) Query() *ClassifierQuery {
	return &ClassifierQuery{config: c.config}
}

// Get returns a Classifier entity by its id.
func (c *ClassifierClient) Get(ctx context.Context, id int) (*Classifier, error) {
	return c.Query().Where(classifier.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClassifierClient) GetX(ctx context.Context, id int) *Classifier {
	cl, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cl
}

// QueryEquipment queries the equipment edge of a Classifier.
func (c *ClassifierClient) QueryEquipment(cl *Classifier) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(classifier.Table, classifier.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, classifier.EquipmentTable, classifier.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClassifierClient) Hooks() []Hook {
	return c.hooks.Classifier
}

// CourseClient is a client for the Course schema.
type CourseClient struct {
	config
}

// NewCourseClient returns a client for the Course from the given config.
func NewCourseClient(c config) *CourseClient {
	return &CourseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `course.Hooks(f(g(h())))`.
func (c *CourseClient) Use(hooks ...Hook) {
	c.hooks.Course = append(c.hooks.Course, hooks...)
}

// Create returns a create builder for Course.
func (c *CourseClient) Create() *CourseCreate {
	mutation := newCourseMutation(c.config, OpCreate)
	return &CourseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Course.
func (c *CourseClient) Update() *CourseUpdate {
	mutation := newCourseMutation(c.config, OpUpdate)
	return &CourseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CourseClient) UpdateOne(co *Course) *CourseUpdateOne {
	mutation := newCourseMutation(c.config, OpUpdateOne, withCourse(co))
	return &CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CourseClient) UpdateOneID(id int) *CourseUpdateOne {
	mutation := newCourseMutation(c.config, OpUpdateOne, withCourseID(id))
	return &CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Course.
func (c *CourseClient) Delete() *CourseDelete {
	mutation := newCourseMutation(c.config, OpDelete)
	return &CourseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CourseClient) DeleteOne(co *Course) *CourseDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CourseClient) DeleteOneID(id int) *CourseDeleteOne {
	builder := c.Delete().Where(course.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CourseDeleteOne{builder}
}

// Create returns a query builder for Course.
func (c *CourseClient) Query() *CourseQuery {
	return &CourseQuery{config: c.config}
}

// Get returns a Course entity by its id.
func (c *CourseClient) Get(ctx context.Context, id int) (*Course, error) {
	return c.Query().Where(course.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CourseClient) GetX(ctx context.Context, id int) *Course {
	co, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return co
}

// QueryBookcourse queries the bookcourse edge of a Course.
func (c *CourseClient) QueryBookcourse(co *Course) *BookcourseQuery {
	query := &BookcourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(bookcourse.Table, bookcourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, course.BookcourseTable, course.BookcourseColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CourseClient) Hooks() []Hook {
	return c.hooks.Course
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Create returns a create builder for Employee.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Create returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{config: c.config}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryAge queries the age edge of a Employee.
func (c *EmployeeClient) QueryAge(e *Employee) *AgeQuery {
	query := &AgeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(age.Table, age.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.AgeTable, employee.AgeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPosition queries the position edge of a Employee.
func (c *EmployeeClient) QueryPosition(e *Employee) *PositionQuery {
	query := &PositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(position.Table, position.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.PositionTable, employee.PositionColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySalary queries the salary edge of a Employee.
func (c *EmployeeClient) QuerySalary(e *Employee) *SalaryQuery {
	query := &SalaryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(salary.Table, salary.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.SalaryTable, employee.SalaryColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPayment queries the payment edge of a Employee.
func (c *EmployeeClient) QueryPayment(e *Employee) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.PaymentTable, employee.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a Employee.
func (c *EmployeeClient) QueryEquipment(e *Employee) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.EquipmentTable, employee.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBookcourse queries the bookcourse edge of a Employee.
func (c *EmployeeClient) QueryBookcourse(e *Employee) *BookcourseQuery {
	query := &BookcourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(bookcourse.Table, bookcourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.BookcourseTable, employee.BookcourseColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentrental queries the equipmentrental edge of a Employee.
func (c *EmployeeClient) QueryEquipmentrental(e *Employee) *EquipmentrentalQuery {
	query := &EquipmentrentalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(equipmentrental.Table, equipmentrental.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.EquipmentrentalTable, employee.EquipmentrentalColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// EquipmentClient is a client for the Equipment schema.
type EquipmentClient struct {
	config
}

// NewEquipmentClient returns a client for the Equipment from the given config.
func NewEquipmentClient(c config) *EquipmentClient {
	return &EquipmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipment.Hooks(f(g(h())))`.
func (c *EquipmentClient) Use(hooks ...Hook) {
	c.hooks.Equipment = append(c.hooks.Equipment, hooks...)
}

// Create returns a create builder for Equipment.
func (c *EquipmentClient) Create() *EquipmentCreate {
	mutation := newEquipmentMutation(c.config, OpCreate)
	return &EquipmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Equipment.
func (c *EquipmentClient) Update() *EquipmentUpdate {
	mutation := newEquipmentMutation(c.config, OpUpdate)
	return &EquipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentClient) UpdateOne(e *Equipment) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipment(e))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentClient) UpdateOneID(id int) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipmentID(id))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Equipment.
func (c *EquipmentClient) Delete() *EquipmentDelete {
	mutation := newEquipmentMutation(c.config, OpDelete)
	return &EquipmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EquipmentClient) DeleteOne(e *Equipment) *EquipmentDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EquipmentClient) DeleteOneID(id int) *EquipmentDeleteOne {
	builder := c.Delete().Where(equipment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentDeleteOne{builder}
}

// Create returns a query builder for Equipment.
func (c *EquipmentClient) Query() *EquipmentQuery {
	return &EquipmentQuery{config: c.config}
}

// Get returns a Equipment entity by its id.
func (c *EquipmentClient) Get(ctx context.Context, id int) (*Equipment, error) {
	return c.Query().Where(equipment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentClient) GetX(ctx context.Context, id int) *Equipment {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryClassifier queries the classifier edge of a Equipment.
func (c *EquipmentClient) QueryClassifier(e *Equipment) *ClassifierQuery {
	query := &ClassifierQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(classifier.Table, classifier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipment.ClassifierTable, equipment.ClassifierColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Equipment.
func (c *EquipmentClient) QueryEmployee(e *Equipment) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipment.EmployeeTable, equipment.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmenttype queries the equipmenttype edge of a Equipment.
func (c *EquipmentClient) QueryEquipmenttype(e *Equipment) *EquipmenttypeQuery {
	query := &EquipmenttypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmenttype.Table, equipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipment.EquipmenttypeTable, equipment.EquipmenttypeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryZone queries the zone edge of a Equipment.
func (c *EquipmentClient) QueryZone(e *Equipment) *ZoneQuery {
	query := &ZoneQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(zone.Table, zone.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipment.ZoneTable, equipment.ZoneColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentrental queries the equipmentrental edge of a Equipment.
func (c *EquipmentClient) QueryEquipmentrental(e *Equipment) *EquipmentrentalQuery {
	query := &EquipmentrentalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmentrental.Table, equipmentrental.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.EquipmentrentalTable, equipment.EquipmentrentalColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentClient) Hooks() []Hook {
	return c.hooks.Equipment
}

// EquipmentrentalClient is a client for the Equipmentrental schema.
type EquipmentrentalClient struct {
	config
}

// NewEquipmentrentalClient returns a client for the Equipmentrental from the given config.
func NewEquipmentrentalClient(c config) *EquipmentrentalClient {
	return &EquipmentrentalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentrental.Hooks(f(g(h())))`.
func (c *EquipmentrentalClient) Use(hooks ...Hook) {
	c.hooks.Equipmentrental = append(c.hooks.Equipmentrental, hooks...)
}

// Create returns a create builder for Equipmentrental.
func (c *EquipmentrentalClient) Create() *EquipmentrentalCreate {
	mutation := newEquipmentrentalMutation(c.config, OpCreate)
	return &EquipmentrentalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Equipmentrental.
func (c *EquipmentrentalClient) Update() *EquipmentrentalUpdate {
	mutation := newEquipmentrentalMutation(c.config, OpUpdate)
	return &EquipmentrentalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentrentalClient) UpdateOne(e *Equipmentrental) *EquipmentrentalUpdateOne {
	mutation := newEquipmentrentalMutation(c.config, OpUpdateOne, withEquipmentrental(e))
	return &EquipmentrentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentrentalClient) UpdateOneID(id int) *EquipmentrentalUpdateOne {
	mutation := newEquipmentrentalMutation(c.config, OpUpdateOne, withEquipmentrentalID(id))
	return &EquipmentrentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Equipmentrental.
func (c *EquipmentrentalClient) Delete() *EquipmentrentalDelete {
	mutation := newEquipmentrentalMutation(c.config, OpDelete)
	return &EquipmentrentalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EquipmentrentalClient) DeleteOne(e *Equipmentrental) *EquipmentrentalDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EquipmentrentalClient) DeleteOneID(id int) *EquipmentrentalDeleteOne {
	builder := c.Delete().Where(equipmentrental.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentrentalDeleteOne{builder}
}

// Create returns a query builder for Equipmentrental.
func (c *EquipmentrentalClient) Query() *EquipmentrentalQuery {
	return &EquipmentrentalQuery{config: c.config}
}

// Get returns a Equipmentrental entity by its id.
func (c *EquipmentrentalClient) Get(ctx context.Context, id int) (*Equipmentrental, error) {
	return c.Query().Where(equipmentrental.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentrentalClient) GetX(ctx context.Context, id int) *Equipmentrental {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryEquipment queries the equipment edge of a Equipmentrental.
func (c *EquipmentrentalClient) QueryEquipment(e *Equipmentrental) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentrental.Table, equipmentrental.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentrental.EquipmentTable, equipmentrental.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Equipmentrental.
func (c *EquipmentrentalClient) QueryEmployee(e *Equipmentrental) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentrental.Table, equipmentrental.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentrental.EmployeeTable, equipmentrental.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMember queries the member edge of a Equipmentrental.
func (c *EquipmentrentalClient) QueryMember(e *Equipmentrental) *MemberQuery {
	query := &MemberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentrental.Table, equipmentrental.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentrental.MemberTable, equipmentrental.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmenttype queries the equipmenttype edge of a Equipmentrental.
func (c *EquipmentrentalClient) QueryEquipmenttype(e *Equipmentrental) *EquipmenttypeQuery {
	query := &EquipmenttypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentrental.Table, equipmentrental.FieldID, id),
			sqlgraph.To(equipmenttype.Table, equipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentrental.EquipmenttypeTable, equipmentrental.EquipmenttypeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentrentalClient) Hooks() []Hook {
	return c.hooks.Equipmentrental
}

// EquipmenttypeClient is a client for the Equipmenttype schema.
type EquipmenttypeClient struct {
	config
}

// NewEquipmenttypeClient returns a client for the Equipmenttype from the given config.
func NewEquipmenttypeClient(c config) *EquipmenttypeClient {
	return &EquipmenttypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmenttype.Hooks(f(g(h())))`.
func (c *EquipmenttypeClient) Use(hooks ...Hook) {
	c.hooks.Equipmenttype = append(c.hooks.Equipmenttype, hooks...)
}

// Create returns a create builder for Equipmenttype.
func (c *EquipmenttypeClient) Create() *EquipmenttypeCreate {
	mutation := newEquipmenttypeMutation(c.config, OpCreate)
	return &EquipmenttypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Equipmenttype.
func (c *EquipmenttypeClient) Update() *EquipmenttypeUpdate {
	mutation := newEquipmenttypeMutation(c.config, OpUpdate)
	return &EquipmenttypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmenttypeClient) UpdateOne(e *Equipmenttype) *EquipmenttypeUpdateOne {
	mutation := newEquipmenttypeMutation(c.config, OpUpdateOne, withEquipmenttype(e))
	return &EquipmenttypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmenttypeClient) UpdateOneID(id int) *EquipmenttypeUpdateOne {
	mutation := newEquipmenttypeMutation(c.config, OpUpdateOne, withEquipmenttypeID(id))
	return &EquipmenttypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Equipmenttype.
func (c *EquipmenttypeClient) Delete() *EquipmenttypeDelete {
	mutation := newEquipmenttypeMutation(c.config, OpDelete)
	return &EquipmenttypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EquipmenttypeClient) DeleteOne(e *Equipmenttype) *EquipmenttypeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EquipmenttypeClient) DeleteOneID(id int) *EquipmenttypeDeleteOne {
	builder := c.Delete().Where(equipmenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmenttypeDeleteOne{builder}
}

// Create returns a query builder for Equipmenttype.
func (c *EquipmenttypeClient) Query() *EquipmenttypeQuery {
	return &EquipmenttypeQuery{config: c.config}
}

// Get returns a Equipmenttype entity by its id.
func (c *EquipmenttypeClient) Get(ctx context.Context, id int) (*Equipmenttype, error) {
	return c.Query().Where(equipmenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmenttypeClient) GetX(ctx context.Context, id int) *Equipmenttype {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryEquipment queries the equipment edge of a Equipmenttype.
func (c *EquipmenttypeClient) QueryEquipment(e *Equipmenttype) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmenttype.Table, equipmenttype.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipmenttype.EquipmentTable, equipmenttype.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentrental queries the equipmentrental edge of a Equipmenttype.
func (c *EquipmenttypeClient) QueryEquipmentrental(e *Equipmenttype) *EquipmentrentalQuery {
	query := &EquipmentrentalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmenttype.Table, equipmenttype.FieldID, id),
			sqlgraph.To(equipmentrental.Table, equipmentrental.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipmenttype.EquipmentrentalTable, equipmenttype.EquipmentrentalColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmenttypeClient) Hooks() []Hook {
	return c.hooks.Equipmenttype
}

// MemberClient is a client for the Member schema.
type MemberClient struct {
	config
}

// NewMemberClient returns a client for the Member from the given config.
func NewMemberClient(c config) *MemberClient {
	return &MemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `member.Hooks(f(g(h())))`.
func (c *MemberClient) Use(hooks ...Hook) {
	c.hooks.Member = append(c.hooks.Member, hooks...)
}

// Create returns a create builder for Member.
func (c *MemberClient) Create() *MemberCreate {
	mutation := newMemberMutation(c.config, OpCreate)
	return &MemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Member.
func (c *MemberClient) Update() *MemberUpdate {
	mutation := newMemberMutation(c.config, OpUpdate)
	return &MemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MemberClient) UpdateOne(m *Member) *MemberUpdateOne {
	mutation := newMemberMutation(c.config, OpUpdateOne, withMember(m))
	return &MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MemberClient) UpdateOneID(id int) *MemberUpdateOne {
	mutation := newMemberMutation(c.config, OpUpdateOne, withMemberID(id))
	return &MemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Member.
func (c *MemberClient) Delete() *MemberDelete {
	mutation := newMemberMutation(c.config, OpDelete)
	return &MemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MemberClient) DeleteOne(m *Member) *MemberDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MemberClient) DeleteOneID(id int) *MemberDeleteOne {
	builder := c.Delete().Where(member.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MemberDeleteOne{builder}
}

// Create returns a query builder for Member.
func (c *MemberClient) Query() *MemberQuery {
	return &MemberQuery{config: c.config}
}

// Get returns a Member entity by its id.
func (c *MemberClient) Get(ctx context.Context, id int) (*Member, error) {
	return c.Query().Where(member.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MemberClient) GetX(ctx context.Context, id int) *Member {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryPayment queries the payment edge of a Member.
func (c *MemberClient) QueryPayment(m *Member) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, member.PaymentTable, member.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBookcourse queries the bookcourse edge of a Member.
func (c *MemberClient) QueryBookcourse(m *Member) *BookcourseQuery {
	query := &BookcourseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(bookcourse.Table, bookcourse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, member.BookcourseTable, member.BookcourseColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentrental queries the equipmentrental edge of a Member.
func (c *MemberClient) QueryEquipmentrental(m *Member) *EquipmentrentalQuery {
	query := &EquipmentrentalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(member.Table, member.FieldID, id),
			sqlgraph.To(equipmentrental.Table, equipmentrental.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, member.EquipmentrentalTable, member.EquipmentrentalColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MemberClient) Hooks() []Hook {
	return c.hooks.Member
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Create returns a create builder for Payment.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id int) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaymentClient) DeleteOneID(id int) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Create returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{config: c.config}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id int) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id int) *Payment {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryMember queries the member edge of a Payment.
func (c *PaymentClient) QueryMember(pa *Payment) *MemberQuery {
	query := &MemberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payment.MemberTable, payment.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Payment.
func (c *PaymentClient) QueryEmployee(pa *Payment) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payment.EmployeeTable, payment.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymenttype queries the paymenttype edge of a Payment.
func (c *PaymentClient) QueryPaymenttype(pa *Payment) *PaymenttypeQuery {
	query := &PaymenttypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(paymenttype.Table, paymenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payment.PaymenttypeTable, payment.PaymenttypeColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPromotion queries the promotion edge of a Payment.
func (c *PaymentClient) QueryPromotion(pa *Payment) *PromotionQuery {
	query := &PromotionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(promotion.Table, promotion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payment.PromotionTable, payment.PromotionColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// PaymenttypeClient is a client for the Paymenttype schema.
type PaymenttypeClient struct {
	config
}

// NewPaymenttypeClient returns a client for the Paymenttype from the given config.
func NewPaymenttypeClient(c config) *PaymenttypeClient {
	return &PaymenttypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymenttype.Hooks(f(g(h())))`.
func (c *PaymenttypeClient) Use(hooks ...Hook) {
	c.hooks.Paymenttype = append(c.hooks.Paymenttype, hooks...)
}

// Create returns a create builder for Paymenttype.
func (c *PaymenttypeClient) Create() *PaymenttypeCreate {
	mutation := newPaymenttypeMutation(c.config, OpCreate)
	return &PaymenttypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Paymenttype.
func (c *PaymenttypeClient) Update() *PaymenttypeUpdate {
	mutation := newPaymenttypeMutation(c.config, OpUpdate)
	return &PaymenttypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymenttypeClient) UpdateOne(pa *Paymenttype) *PaymenttypeUpdateOne {
	mutation := newPaymenttypeMutation(c.config, OpUpdateOne, withPaymenttype(pa))
	return &PaymenttypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymenttypeClient) UpdateOneID(id int) *PaymenttypeUpdateOne {
	mutation := newPaymenttypeMutation(c.config, OpUpdateOne, withPaymenttypeID(id))
	return &PaymenttypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Paymenttype.
func (c *PaymenttypeClient) Delete() *PaymenttypeDelete {
	mutation := newPaymenttypeMutation(c.config, OpDelete)
	return &PaymenttypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaymenttypeClient) DeleteOne(pa *Paymenttype) *PaymenttypeDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaymenttypeClient) DeleteOneID(id int) *PaymenttypeDeleteOne {
	builder := c.Delete().Where(paymenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymenttypeDeleteOne{builder}
}

// Create returns a query builder for Paymenttype.
func (c *PaymenttypeClient) Query() *PaymenttypeQuery {
	return &PaymenttypeQuery{config: c.config}
}

// Get returns a Paymenttype entity by its id.
func (c *PaymenttypeClient) Get(ctx context.Context, id int) (*Paymenttype, error) {
	return c.Query().Where(paymenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymenttypeClient) GetX(ctx context.Context, id int) *Paymenttype {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPayment queries the payment edge of a Paymenttype.
func (c *PaymenttypeClient) QueryPayment(pa *Paymenttype) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymenttype.Table, paymenttype.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paymenttype.PaymentTable, paymenttype.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymenttypeClient) Hooks() []Hook {
	return c.hooks.Paymenttype
}

// PositionClient is a client for the Position schema.
type PositionClient struct {
	config
}

// NewPositionClient returns a client for the Position from the given config.
func NewPositionClient(c config) *PositionClient {
	return &PositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `position.Hooks(f(g(h())))`.
func (c *PositionClient) Use(hooks ...Hook) {
	c.hooks.Position = append(c.hooks.Position, hooks...)
}

// Create returns a create builder for Position.
func (c *PositionClient) Create() *PositionCreate {
	mutation := newPositionMutation(c.config, OpCreate)
	return &PositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Position.
func (c *PositionClient) Update() *PositionUpdate {
	mutation := newPositionMutation(c.config, OpUpdate)
	return &PositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PositionClient) UpdateOne(po *Position) *PositionUpdateOne {
	mutation := newPositionMutation(c.config, OpUpdateOne, withPosition(po))
	return &PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PositionClient) UpdateOneID(id int) *PositionUpdateOne {
	mutation := newPositionMutation(c.config, OpUpdateOne, withPositionID(id))
	return &PositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Position.
func (c *PositionClient) Delete() *PositionDelete {
	mutation := newPositionMutation(c.config, OpDelete)
	return &PositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PositionClient) DeleteOne(po *Position) *PositionDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PositionClient) DeleteOneID(id int) *PositionDeleteOne {
	builder := c.Delete().Where(position.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PositionDeleteOne{builder}
}

// Create returns a query builder for Position.
func (c *PositionClient) Query() *PositionQuery {
	return &PositionQuery{config: c.config}
}

// Get returns a Position entity by its id.
func (c *PositionClient) Get(ctx context.Context, id int) (*Position, error) {
	return c.Query().Where(position.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PositionClient) GetX(ctx context.Context, id int) *Position {
	po, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return po
}

// QueryEmployee queries the employee edge of a Position.
func (c *PositionClient) QueryEmployee(po *Position) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(position.Table, position.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, position.EmployeeTable, position.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PositionClient) Hooks() []Hook {
	return c.hooks.Position
}

// PromotionClient is a client for the Promotion schema.
type PromotionClient struct {
	config
}

// NewPromotionClient returns a client for the Promotion from the given config.
func NewPromotionClient(c config) *PromotionClient {
	return &PromotionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotion.Hooks(f(g(h())))`.
func (c *PromotionClient) Use(hooks ...Hook) {
	c.hooks.Promotion = append(c.hooks.Promotion, hooks...)
}

// Create returns a create builder for Promotion.
func (c *PromotionClient) Create() *PromotionCreate {
	mutation := newPromotionMutation(c.config, OpCreate)
	return &PromotionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Promotion.
func (c *PromotionClient) Update() *PromotionUpdate {
	mutation := newPromotionMutation(c.config, OpUpdate)
	return &PromotionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionClient) UpdateOne(pr *Promotion) *PromotionUpdateOne {
	mutation := newPromotionMutation(c.config, OpUpdateOne, withPromotion(pr))
	return &PromotionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionClient) UpdateOneID(id int) *PromotionUpdateOne {
	mutation := newPromotionMutation(c.config, OpUpdateOne, withPromotionID(id))
	return &PromotionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Promotion.
func (c *PromotionClient) Delete() *PromotionDelete {
	mutation := newPromotionMutation(c.config, OpDelete)
	return &PromotionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PromotionClient) DeleteOne(pr *Promotion) *PromotionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PromotionClient) DeleteOneID(id int) *PromotionDeleteOne {
	builder := c.Delete().Where(promotion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionDeleteOne{builder}
}

// Create returns a query builder for Promotion.
func (c *PromotionClient) Query() *PromotionQuery {
	return &PromotionQuery{config: c.config}
}

// Get returns a Promotion entity by its id.
func (c *PromotionClient) Get(ctx context.Context, id int) (*Promotion, error) {
	return c.Query().Where(promotion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionClient) GetX(ctx context.Context, id int) *Promotion {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryPromotiontype queries the promotiontype edge of a Promotion.
func (c *PromotionClient) QueryPromotiontype(pr *Promotion) *PromotiontypeQuery {
	query := &PromotiontypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotion.Table, promotion.FieldID, id),
			sqlgraph.To(promotiontype.Table, promotiontype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotion.PromotiontypeTable, promotion.PromotiontypeColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPromotionamount queries the promotionamount edge of a Promotion.
func (c *PromotionClient) QueryPromotionamount(pr *Promotion) *PromotionamountQuery {
	query := &PromotionamountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotion.Table, promotion.FieldID, id),
			sqlgraph.To(promotionamount.Table, promotionamount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotion.PromotionamountTable, promotion.PromotionamountColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPayment queries the payment edge of a Promotion.
func (c *PromotionClient) QueryPayment(pr *Promotion) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotion.Table, promotion.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotion.PaymentTable, promotion.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionClient) Hooks() []Hook {
	return c.hooks.Promotion
}

// PromotionamountClient is a client for the Promotionamount schema.
type PromotionamountClient struct {
	config
}

// NewPromotionamountClient returns a client for the Promotionamount from the given config.
func NewPromotionamountClient(c config) *PromotionamountClient {
	return &PromotionamountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionamount.Hooks(f(g(h())))`.
func (c *PromotionamountClient) Use(hooks ...Hook) {
	c.hooks.Promotionamount = append(c.hooks.Promotionamount, hooks...)
}

// Create returns a create builder for Promotionamount.
func (c *PromotionamountClient) Create() *PromotionamountCreate {
	mutation := newPromotionamountMutation(c.config, OpCreate)
	return &PromotionamountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Promotionamount.
func (c *PromotionamountClient) Update() *PromotionamountUpdate {
	mutation := newPromotionamountMutation(c.config, OpUpdate)
	return &PromotionamountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionamountClient) UpdateOne(pr *Promotionamount) *PromotionamountUpdateOne {
	mutation := newPromotionamountMutation(c.config, OpUpdateOne, withPromotionamount(pr))
	return &PromotionamountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionamountClient) UpdateOneID(id int) *PromotionamountUpdateOne {
	mutation := newPromotionamountMutation(c.config, OpUpdateOne, withPromotionamountID(id))
	return &PromotionamountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Promotionamount.
func (c *PromotionamountClient) Delete() *PromotionamountDelete {
	mutation := newPromotionamountMutation(c.config, OpDelete)
	return &PromotionamountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PromotionamountClient) DeleteOne(pr *Promotionamount) *PromotionamountDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PromotionamountClient) DeleteOneID(id int) *PromotionamountDeleteOne {
	builder := c.Delete().Where(promotionamount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionamountDeleteOne{builder}
}

// Create returns a query builder for Promotionamount.
func (c *PromotionamountClient) Query() *PromotionamountQuery {
	return &PromotionamountQuery{config: c.config}
}

// Get returns a Promotionamount entity by its id.
func (c *PromotionamountClient) Get(ctx context.Context, id int) (*Promotionamount, error) {
	return c.Query().Where(promotionamount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionamountClient) GetX(ctx context.Context, id int) *Promotionamount {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryPromotion queries the promotion edge of a Promotionamount.
func (c *PromotionamountClient) QueryPromotion(pr *Promotionamount) *PromotionQuery {
	query := &PromotionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionamount.Table, promotionamount.FieldID, id),
			sqlgraph.To(promotion.Table, promotion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotionamount.PromotionTable, promotionamount.PromotionColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionamountClient) Hooks() []Hook {
	return c.hooks.Promotionamount
}

// PromotiontypeClient is a client for the Promotiontype schema.
type PromotiontypeClient struct {
	config
}

// NewPromotiontypeClient returns a client for the Promotiontype from the given config.
func NewPromotiontypeClient(c config) *PromotiontypeClient {
	return &PromotiontypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotiontype.Hooks(f(g(h())))`.
func (c *PromotiontypeClient) Use(hooks ...Hook) {
	c.hooks.Promotiontype = append(c.hooks.Promotiontype, hooks...)
}

// Create returns a create builder for Promotiontype.
func (c *PromotiontypeClient) Create() *PromotiontypeCreate {
	mutation := newPromotiontypeMutation(c.config, OpCreate)
	return &PromotiontypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Promotiontype.
func (c *PromotiontypeClient) Update() *PromotiontypeUpdate {
	mutation := newPromotiontypeMutation(c.config, OpUpdate)
	return &PromotiontypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotiontypeClient) UpdateOne(pr *Promotiontype) *PromotiontypeUpdateOne {
	mutation := newPromotiontypeMutation(c.config, OpUpdateOne, withPromotiontype(pr))
	return &PromotiontypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotiontypeClient) UpdateOneID(id int) *PromotiontypeUpdateOne {
	mutation := newPromotiontypeMutation(c.config, OpUpdateOne, withPromotiontypeID(id))
	return &PromotiontypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Promotiontype.
func (c *PromotiontypeClient) Delete() *PromotiontypeDelete {
	mutation := newPromotiontypeMutation(c.config, OpDelete)
	return &PromotiontypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PromotiontypeClient) DeleteOne(pr *Promotiontype) *PromotiontypeDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PromotiontypeClient) DeleteOneID(id int) *PromotiontypeDeleteOne {
	builder := c.Delete().Where(promotiontype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotiontypeDeleteOne{builder}
}

// Create returns a query builder for Promotiontype.
func (c *PromotiontypeClient) Query() *PromotiontypeQuery {
	return &PromotiontypeQuery{config: c.config}
}

// Get returns a Promotiontype entity by its id.
func (c *PromotiontypeClient) Get(ctx context.Context, id int) (*Promotiontype, error) {
	return c.Query().Where(promotiontype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotiontypeClient) GetX(ctx context.Context, id int) *Promotiontype {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryPromotion queries the promotion edge of a Promotiontype.
func (c *PromotiontypeClient) QueryPromotion(pr *Promotiontype) *PromotionQuery {
	query := &PromotionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotiontype.Table, promotiontype.FieldID, id),
			sqlgraph.To(promotion.Table, promotion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotiontype.PromotionTable, promotiontype.PromotionColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotiontypeClient) Hooks() []Hook {
	return c.hooks.Promotiontype
}

// SalaryClient is a client for the Salary schema.
type SalaryClient struct {
	config
}

// NewSalaryClient returns a client for the Salary from the given config.
func NewSalaryClient(c config) *SalaryClient {
	return &SalaryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `salary.Hooks(f(g(h())))`.
func (c *SalaryClient) Use(hooks ...Hook) {
	c.hooks.Salary = append(c.hooks.Salary, hooks...)
}

// Create returns a create builder for Salary.
func (c *SalaryClient) Create() *SalaryCreate {
	mutation := newSalaryMutation(c.config, OpCreate)
	return &SalaryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Salary.
func (c *SalaryClient) Update() *SalaryUpdate {
	mutation := newSalaryMutation(c.config, OpUpdate)
	return &SalaryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SalaryClient) UpdateOne(s *Salary) *SalaryUpdateOne {
	mutation := newSalaryMutation(c.config, OpUpdateOne, withSalary(s))
	return &SalaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SalaryClient) UpdateOneID(id int) *SalaryUpdateOne {
	mutation := newSalaryMutation(c.config, OpUpdateOne, withSalaryID(id))
	return &SalaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Salary.
func (c *SalaryClient) Delete() *SalaryDelete {
	mutation := newSalaryMutation(c.config, OpDelete)
	return &SalaryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SalaryClient) DeleteOne(s *Salary) *SalaryDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SalaryClient) DeleteOneID(id int) *SalaryDeleteOne {
	builder := c.Delete().Where(salary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SalaryDeleteOne{builder}
}

// Create returns a query builder for Salary.
func (c *SalaryClient) Query() *SalaryQuery {
	return &SalaryQuery{config: c.config}
}

// Get returns a Salary entity by its id.
func (c *SalaryClient) Get(ctx context.Context, id int) (*Salary, error) {
	return c.Query().Where(salary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SalaryClient) GetX(ctx context.Context, id int) *Salary {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryEmployee queries the employee edge of a Salary.
func (c *SalaryClient) QueryEmployee(s *Salary) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(salary.Table, salary.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, salary.EmployeeTable, salary.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SalaryClient) Hooks() []Hook {
	return c.hooks.Salary
}

// ZoneClient is a client for the Zone schema.
type ZoneClient struct {
	config
}

// NewZoneClient returns a client for the Zone from the given config.
func NewZoneClient(c config) *ZoneClient {
	return &ZoneClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `zone.Hooks(f(g(h())))`.
func (c *ZoneClient) Use(hooks ...Hook) {
	c.hooks.Zone = append(c.hooks.Zone, hooks...)
}

// Create returns a create builder for Zone.
func (c *ZoneClient) Create() *ZoneCreate {
	mutation := newZoneMutation(c.config, OpCreate)
	return &ZoneCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Zone.
func (c *ZoneClient) Update() *ZoneUpdate {
	mutation := newZoneMutation(c.config, OpUpdate)
	return &ZoneUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ZoneClient) UpdateOne(z *Zone) *ZoneUpdateOne {
	mutation := newZoneMutation(c.config, OpUpdateOne, withZone(z))
	return &ZoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ZoneClient) UpdateOneID(id int) *ZoneUpdateOne {
	mutation := newZoneMutation(c.config, OpUpdateOne, withZoneID(id))
	return &ZoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Zone.
func (c *ZoneClient) Delete() *ZoneDelete {
	mutation := newZoneMutation(c.config, OpDelete)
	return &ZoneDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ZoneClient) DeleteOne(z *Zone) *ZoneDeleteOne {
	return c.DeleteOneID(z.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ZoneClient) DeleteOneID(id int) *ZoneDeleteOne {
	builder := c.Delete().Where(zone.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ZoneDeleteOne{builder}
}

// Create returns a query builder for Zone.
func (c *ZoneClient) Query() *ZoneQuery {
	return &ZoneQuery{config: c.config}
}

// Get returns a Zone entity by its id.
func (c *ZoneClient) Get(ctx context.Context, id int) (*Zone, error) {
	return c.Query().Where(zone.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ZoneClient) GetX(ctx context.Context, id int) *Zone {
	z, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return z
}

// QueryEquipment queries the equipment edge of a Zone.
func (c *ZoneClient) QueryEquipment(z *Zone) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := z.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(zone.Table, zone.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, zone.EquipmentTable, zone.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(z.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ZoneClient) Hooks() []Hook {
	return c.hooks.Zone
}
