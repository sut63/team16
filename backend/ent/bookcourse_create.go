// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/G16/app/ent/bookcourse"
	"github.com/G16/app/ent/course"
	"github.com/G16/app/ent/employee"
	"github.com/G16/app/ent/member"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// BookcourseCreate is the builder for creating a Bookcourse entity.
type BookcourseCreate struct {
	config
	mutation *BookcourseMutation
	hooks    []Hook
}

// SetBOOKTIME sets the BOOKTIME field.
func (bc *BookcourseCreate) SetBOOKTIME(t time.Time) *BookcourseCreate {
	bc.mutation.SetBOOKTIME(t)
	return bc
}

// SetCourseID sets the course edge to Course by id.
func (bc *BookcourseCreate) SetCourseID(id int) *BookcourseCreate {
	bc.mutation.SetCourseID(id)
	return bc
}

// SetNillableCourseID sets the course edge to Course by id if the given value is not nil.
func (bc *BookcourseCreate) SetNillableCourseID(id *int) *BookcourseCreate {
	if id != nil {
		bc = bc.SetCourseID(*id)
	}
	return bc
}

// SetCourse sets the course edge to Course.
func (bc *BookcourseCreate) SetCourse(c *Course) *BookcourseCreate {
	return bc.SetCourseID(c.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (bc *BookcourseCreate) SetEmployeeID(id int) *BookcourseCreate {
	bc.mutation.SetEmployeeID(id)
	return bc
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (bc *BookcourseCreate) SetNillableEmployeeID(id *int) *BookcourseCreate {
	if id != nil {
		bc = bc.SetEmployeeID(*id)
	}
	return bc
}

// SetEmployee sets the employee edge to Employee.
func (bc *BookcourseCreate) SetEmployee(e *Employee) *BookcourseCreate {
	return bc.SetEmployeeID(e.ID)
}

// SetMemberID sets the member edge to Member by id.
func (bc *BookcourseCreate) SetMemberID(id int) *BookcourseCreate {
	bc.mutation.SetMemberID(id)
	return bc
}

// SetNillableMemberID sets the member edge to Member by id if the given value is not nil.
func (bc *BookcourseCreate) SetNillableMemberID(id *int) *BookcourseCreate {
	if id != nil {
		bc = bc.SetMemberID(*id)
	}
	return bc
}

// SetMember sets the member edge to Member.
func (bc *BookcourseCreate) SetMember(m *Member) *BookcourseCreate {
	return bc.SetMemberID(m.ID)
}

// Mutation returns the BookcourseMutation object of the builder.
func (bc *BookcourseCreate) Mutation() *BookcourseMutation {
	return bc.mutation
}

// Save creates the Bookcourse in the database.
func (bc *BookcourseCreate) Save(ctx context.Context) (*Bookcourse, error) {
	if _, ok := bc.mutation.BOOKTIME(); !ok {
		return nil, &ValidationError{Name: "BOOKTIME", err: errors.New("ent: missing required field \"BOOKTIME\"")}
	}
	var (
		err  error
		node *Bookcourse
	)
	if len(bc.hooks) == 0 {
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookcourseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BookcourseCreate) SaveX(ctx context.Context) *Bookcourse {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bc *BookcourseCreate) sqlSave(ctx context.Context) (*Bookcourse, error) {
	b, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	b.ID = int(id)
	return b, nil
}

func (bc *BookcourseCreate) createSpec() (*Bookcourse, *sqlgraph.CreateSpec) {
	var (
		b     = &Bookcourse{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bookcourse.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookcourse.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.BOOKTIME(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookcourse.FieldBOOKTIME,
		})
		b.BOOKTIME = value
	}
	if nodes := bc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.CourseTable,
			Columns: []string{bookcourse.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.EmployeeTable,
			Columns: []string{bookcourse.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookcourse.MemberTable,
			Columns: []string{bookcourse.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return b, _spec
}
