// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/G16/app/ent/promotion"
	"github.com/G16/app/ent/promotionamount"
	"github.com/G16/app/ent/promotiontype"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Promotion is the model entity for the Promotion schema.
type Promotion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// NAME holds the value of the "NAME" field.
	NAME string `json:"NAME,omitempty"`
	// DESC holds the value of the "DESC" field.
	DESC string `json:"DESC,omitempty"`
	// CODE holds the value of the "CODE" field.
	CODE string `json:"CODE,omitempty"`
	// DATE holds the value of the "DATE" field.
	DATE time.Time `json:"DATE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionQuery when eager-loading is set.
	Edges                     PromotionEdges `json:"edges"`
	promotionamount_promotion *int
	promotiontype_promotion   *int
}

// PromotionEdges holds the relations/edges for other nodes in the graph.
type PromotionEdges struct {
	// Promotiontype holds the value of the promotiontype edge.
	Promotiontype *Promotiontype
	// Promotionamount holds the value of the promotionamount edge.
	Promotionamount *Promotionamount
	// Payment holds the value of the payment edge.
	Payment []*Payment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PromotiontypeOrErr returns the Promotiontype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionEdges) PromotiontypeOrErr() (*Promotiontype, error) {
	if e.loadedTypes[0] {
		if e.Promotiontype == nil {
			// The edge promotiontype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: promotiontype.Label}
		}
		return e.Promotiontype, nil
	}
	return nil, &NotLoadedError{edge: "promotiontype"}
}

// PromotionamountOrErr returns the Promotionamount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionEdges) PromotionamountOrErr() (*Promotionamount, error) {
	if e.loadedTypes[1] {
		if e.Promotionamount == nil {
			// The edge promotionamount was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: promotionamount.Label}
		}
		return e.Promotionamount, nil
	}
	return nil, &NotLoadedError{edge: "promotionamount"}
}

// PaymentOrErr returns the Payment value or an error if the edge
// was not loaded in eager-loading.
func (e PromotionEdges) PaymentOrErr() ([]*Payment, error) {
	if e.loadedTypes[2] {
		return e.Payment, nil
	}
	return nil, &NotLoadedError{edge: "payment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Promotion) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // NAME
		&sql.NullString{}, // DESC
		&sql.NullString{}, // CODE
		&sql.NullTime{},   // DATE
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Promotion) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // promotionamount_promotion
		&sql.NullInt64{}, // promotiontype_promotion
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Promotion fields.
func (pr *Promotion) assignValues(values ...interface{}) error {
	if m, n := len(values), len(promotion.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field NAME", values[0])
	} else if value.Valid {
		pr.NAME = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field DESC", values[1])
	} else if value.Valid {
		pr.DESC = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field CODE", values[2])
	} else if value.Valid {
		pr.CODE = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field DATE", values[3])
	} else if value.Valid {
		pr.DATE = value.Time
	}
	values = values[4:]
	if len(values) == len(promotion.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field promotionamount_promotion", value)
		} else if value.Valid {
			pr.promotionamount_promotion = new(int)
			*pr.promotionamount_promotion = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field promotiontype_promotion", value)
		} else if value.Valid {
			pr.promotiontype_promotion = new(int)
			*pr.promotiontype_promotion = int(value.Int64)
		}
	}
	return nil
}

// QueryPromotiontype queries the promotiontype edge of the Promotion.
func (pr *Promotion) QueryPromotiontype() *PromotiontypeQuery {
	return (&PromotionClient{config: pr.config}).QueryPromotiontype(pr)
}

// QueryPromotionamount queries the promotionamount edge of the Promotion.
func (pr *Promotion) QueryPromotionamount() *PromotionamountQuery {
	return (&PromotionClient{config: pr.config}).QueryPromotionamount(pr)
}

// QueryPayment queries the payment edge of the Promotion.
func (pr *Promotion) QueryPayment() *PaymentQuery {
	return (&PromotionClient{config: pr.config}).QueryPayment(pr)
}

// Update returns a builder for updating this Promotion.
// Note that, you need to call Promotion.Unwrap() before calling this method, if this Promotion
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Promotion) Update() *PromotionUpdateOne {
	return (&PromotionClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Promotion) Unwrap() *Promotion {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Promotion is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Promotion) String() string {
	var builder strings.Builder
	builder.WriteString("Promotion(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", NAME=")
	builder.WriteString(pr.NAME)
	builder.WriteString(", DESC=")
	builder.WriteString(pr.DESC)
	builder.WriteString(", CODE=")
	builder.WriteString(pr.CODE)
	builder.WriteString(", DATE=")
	builder.WriteString(pr.DATE.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Promotions is a parsable slice of Promotion.
type Promotions []*Promotion

func (pr Promotions) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
