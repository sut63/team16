// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/G16/app/ent/promotion"
	"github.com/G16/app/ent/promotiontype"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PromotiontypeCreate is the builder for creating a Promotiontype entity.
type PromotiontypeCreate struct {
	config
	mutation *PromotiontypeMutation
	hooks    []Hook
}

// SetTYPE sets the TYPE field.
func (pc *PromotiontypeCreate) SetTYPE(s string) *PromotiontypeCreate {
	pc.mutation.SetTYPE(s)
	return pc
}

// AddPromotionIDs adds the promotion edge to Promotion by ids.
func (pc *PromotiontypeCreate) AddPromotionIDs(ids ...int) *PromotiontypeCreate {
	pc.mutation.AddPromotionIDs(ids...)
	return pc
}

// AddPromotion adds the promotion edges to Promotion.
func (pc *PromotiontypeCreate) AddPromotion(p ...*Promotion) *PromotiontypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPromotionIDs(ids...)
}

// Mutation returns the PromotiontypeMutation object of the builder.
func (pc *PromotiontypeCreate) Mutation() *PromotiontypeMutation {
	return pc.mutation
}

// Save creates the Promotiontype in the database.
func (pc *PromotiontypeCreate) Save(ctx context.Context) (*Promotiontype, error) {
	if _, ok := pc.mutation.TYPE(); !ok {
		return nil, &ValidationError{Name: "TYPE", err: errors.New("ent: missing required field \"TYPE\"")}
	}
	if v, ok := pc.mutation.TYPE(); ok {
		if err := promotiontype.TYPEValidator(v); err != nil {
			return nil, &ValidationError{Name: "TYPE", err: fmt.Errorf("ent: validator failed for field \"TYPE\": %w", err)}
		}
	}
	var (
		err  error
		node *Promotiontype
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PromotiontypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PromotiontypeCreate) SaveX(ctx context.Context) *Promotiontype {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PromotiontypeCreate) sqlSave(ctx context.Context) (*Promotiontype, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *PromotiontypeCreate) createSpec() (*Promotiontype, *sqlgraph.CreateSpec) {
	var (
		pr    = &Promotiontype{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: promotiontype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: promotiontype.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.TYPE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: promotiontype.FieldTYPE,
		})
		pr.TYPE = value
	}
	if nodes := pc.mutation.PromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotiontype.PromotionTable,
			Columns: []string{promotiontype.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
