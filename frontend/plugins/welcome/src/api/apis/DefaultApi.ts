/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Patient
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersBookcourse,
    ControllersBookcourseFromJSON,
    ControllersBookcourseToJSON,
    ControllersEmployee,
    ControllersEmployeeFromJSON,
    ControllersEmployeeToJSON,
    ControllersEquipmentrental,
    ControllersEquipmentrentalFromJSON,
    ControllersEquipmentrentalToJSON,
    ControllersPromotionamount,
    ControllersPromotionamountFromJSON,
    ControllersPromotionamountToJSON,
    ControllersPromotiontype,
    ControllersPromotiontypeFromJSON,
    ControllersPromotiontypeToJSON,
    EntAge,
    EntAgeFromJSON,
    EntAgeToJSON,
    EntBookcourse,
    EntBookcourseFromJSON,
    EntBookcourseToJSON,
    EntClassifier,
    EntClassifierFromJSON,
    EntClassifierToJSON,
    EntCourse,
    EntCourseFromJSON,
    EntCourseToJSON,
    EntEmployee,
    EntEmployeeFromJSON,
    EntEmployeeToJSON,
    EntEquipment,
    EntEquipmentFromJSON,
    EntEquipmentToJSON,
    EntEquipmentrental,
    EntEquipmentrentalFromJSON,
    EntEquipmentrentalToJSON,
    EntEquipmenttype,
    EntEquipmenttypeFromJSON,
    EntEquipmenttypeToJSON,
    EntMember,
    EntMemberFromJSON,
    EntMemberToJSON,
    EntPayment,
    EntPaymentFromJSON,
    EntPaymentToJSON,
    EntPaymenttype,
    EntPaymenttypeFromJSON,
    EntPaymenttypeToJSON,
    EntPosition,
    EntPositionFromJSON,
    EntPositionToJSON,
    EntPromotion,
    EntPromotionFromJSON,
    EntPromotionToJSON,
    EntPromotionamount,
    EntPromotionamountFromJSON,
    EntPromotionamountToJSON,
    EntPromotiontype,
    EntPromotiontypeFromJSON,
    EntPromotiontypeToJSON,
    EntSalary,
    EntSalaryFromJSON,
    EntSalaryToJSON,
    EntZone,
    EntZoneFromJSON,
    EntZoneToJSON,
} from '../models';

export interface CreateAgeRequest {
    age: EntAge;
}

export interface CreateBookcourseRequest {
    bookcourse: EntBookcourse;
}

export interface CreateClassifierRequest {
    classifier: EntClassifier;
}

export interface CreateCourseRequest {
    course: EntCourse;
}

export interface CreateEmployeeRequest {
    employee: ControllersEmployee;
}

export interface CreateEquipmentRequest {
    equipment: EntEquipment;
}

export interface CreateEquipmentrentalRequest {
    equipmentrental: EntEquipmentrental;
}

export interface CreateEquipmenttypeRequest {
    equipmenttype: EntEquipmenttype;
}

export interface CreateMemberRequest {
    member: EntMember;
}

export interface CreatePaymentRequest {
    payment: EntPayment;
}

export interface CreatePaymenttypeRequest {
    paymenttype: EntPaymenttype;
}

export interface CreatePositionRequest {
    position: EntPosition;
}

export interface CreatePromotionRequest {
    promotion: EntPromotion;
}

export interface CreatePromotionamountRequest {
    promotionamount: EntPromotionamount;
}

export interface CreatePromotiontypeRequest {
    promotiontype: EntPromotiontype;
}

export interface CreateSalaryRequest {
    salary: EntSalary;
}

export interface CreateZoneRequest {
    zone: EntZone;
}

export interface GetAgeRequest {
    id: number;
}

export interface GetBookcourseRequest {
    id: number;
}

export interface GetClassifierRequest {
    id: number;
}

export interface GetCourseRequest {
    id: number;
}

export interface GetEmployeeRequest {
    id: number;
}

export interface GetEquipmentRequest {
    id: number;
}

export interface GetEquipmentrentalRequest {
    id: number;
}

export interface GetEquipmenttypeRequest {
    id: number;
}

export interface GetGetBookcoursebyMemberRequest {
    id: number;
}

export interface GetGetEquipmentbyEmployeeRequest {
    id: number;
}

export interface GetGetEquipmentrentalbyMemberRequest {
    id: number;
}

export interface GetGetPaymentbyMemberRequest {
    id: number;
}

export interface GetMemberRequest {
    id: number;
}

export interface GetPaymentRequest {
    id: number;
}

export interface GetPaymenttypeRequest {
    id: number;
}

export interface GetPositionRequest {
    id: number;
}

export interface GetPromotionRequest {
    id: number;
}

export interface GetPromotionamountRequest {
    id: number;
}

export interface GetPromotiontypeRequest {
    id: number;
}

export interface GetSalaryRequest {
    id: number;
}

export interface GetZoneRequest {
    id: number;
}

export interface ListAgeRequest {
    limit?: number;
    offset?: number;
}

export interface ListBookcourseRequest {
    limit?: number;
    offset?: number;
}

export interface ListClassifierRequest {
    limit?: number;
    offset?: number;
}

export interface ListCourseRequest {
    limit?: number;
    offset?: number;
}

export interface ListEmployeeRequest {
    limit?: number;
    offset?: number;
}

export interface ListEquipmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListEquipmentrentalRequest {
    limit?: number;
    offset?: number;
}

export interface ListEquipmenttypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListMemberRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaymentRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaymenttypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListPositionRequest {
    limit?: number;
    offset?: number;
}

export interface ListPromotionRequest {
    limit?: number;
    offset?: number;
}

export interface ListPromotionamountRequest {
    limit?: number;
    offset?: number;
}

export interface ListPromotiontypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListSalaryRequest {
    limit?: number;
    offset?: number;
}

export interface ListZoneRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create age
     * Create age
     */
    async createAgeRaw(requestParameters: CreateAgeRequest): Promise<runtime.ApiResponse<EntAge>> {
        if (requestParameters.age === null || requestParameters.age === undefined) {
            throw new runtime.RequiredError('age','Required parameter requestParameters.age was null or undefined when calling createAge.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntAgeToJSON(requestParameters.age),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAgeFromJSON(jsonValue));
    }

    /**
     * Create age
     * Create age
     */
    async createAge(requestParameters: CreateAgeRequest): Promise<EntAge> {
        const response = await this.createAgeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create bookcourse
     * Create bookcourse
     */
    async createBookcourseRaw(requestParameters: CreateBookcourseRequest): Promise<runtime.ApiResponse<EntBookcourse>> {
        if (requestParameters.bookcourse === null || requestParameters.bookcourse === undefined) {
            throw new runtime.RequiredError('bookcourse','Required parameter requestParameters.bookcourse was null or undefined when calling createBookcourse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bookcourses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBookcourseToJSON(requestParameters.bookcourse),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookcourseFromJSON(jsonValue));
    }

    /**
     * Create bookcourse
     * Create bookcourse
     */
    async createBookcourse(requestParameters: CreateBookcourseRequest): Promise<EntBookcourse> {
        const response = await this.createBookcourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create classifier
     * Create classifier
     */
    async createClassifierRaw(requestParameters: CreateClassifierRequest): Promise<runtime.ApiResponse<EntClassifier>> {
        if (requestParameters.classifier === null || requestParameters.classifier === undefined) {
            throw new runtime.RequiredError('classifier','Required parameter requestParameters.classifier was null or undefined when calling createClassifier.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/classifiers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntClassifierToJSON(requestParameters.classifier),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClassifierFromJSON(jsonValue));
    }

    /**
     * Create classifier
     * Create classifier
     */
    async createClassifier(requestParameters: CreateClassifierRequest): Promise<EntClassifier> {
        const response = await this.createClassifierRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create course
     * Create course
     */
    async createCourseRaw(requestParameters: CreateCourseRequest): Promise<runtime.ApiResponse<EntCourse>> {
        if (requestParameters.course === null || requestParameters.course === undefined) {
            throw new runtime.RequiredError('course','Required parameter requestParameters.course was null or undefined when calling createCourse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCourseToJSON(requestParameters.course),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCourseFromJSON(jsonValue));
    }

    /**
     * Create course
     * Create course
     */
    async createCourse(requestParameters: CreateCourseRequest): Promise<EntCourse> {
        const response = await this.createCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployeeRaw(requestParameters: CreateEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling createEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersEmployeeToJSON(requestParameters.employee),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployee(requestParameters: CreateEmployeeRequest): Promise<EntEmployee> {
        const response = await this.createEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create equipment
     * Create equipment
     */
    async createEquipmentRaw(requestParameters: CreateEquipmentRequest): Promise<runtime.ApiResponse<EntEquipment>> {
        if (requestParameters.equipment === null || requestParameters.equipment === undefined) {
            throw new runtime.RequiredError('equipment','Required parameter requestParameters.equipment was null or undefined when calling createEquipment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/equipments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEquipmentToJSON(requestParameters.equipment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEquipmentFromJSON(jsonValue));
    }

    /**
     * Create equipment
     * Create equipment
     */
    async createEquipment(requestParameters: CreateEquipmentRequest): Promise<EntEquipment> {
        const response = await this.createEquipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create equipmentrental
     * Create equipmentrental
     */
    async createEquipmentrentalRaw(requestParameters: CreateEquipmentrentalRequest): Promise<runtime.ApiResponse<EntEquipmentrental>> {
        if (requestParameters.equipmentrental === null || requestParameters.equipmentrental === undefined) {
            throw new runtime.RequiredError('equipmentrental','Required parameter requestParameters.equipmentrental was null or undefined when calling createEquipmentrental.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/equipmentrentals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEquipmentrentalToJSON(requestParameters.equipmentrental),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEquipmentrentalFromJSON(jsonValue));
    }

    /**
     * Create equipmentrental
     * Create equipmentrental
     */
    async createEquipmentrental(requestParameters: CreateEquipmentrentalRequest): Promise<EntEquipmentrental> {
        const response = await this.createEquipmentrentalRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create equipmenttype
     * Create equipmenttype
     */
    async createEquipmenttypeRaw(requestParameters: CreateEquipmenttypeRequest): Promise<runtime.ApiResponse<EntEquipmenttype>> {
        if (requestParameters.equipmenttype === null || requestParameters.equipmenttype === undefined) {
            throw new runtime.RequiredError('equipmenttype','Required parameter requestParameters.equipmenttype was null or undefined when calling createEquipmenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/equipmenttypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEquipmenttypeToJSON(requestParameters.equipmenttype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEquipmenttypeFromJSON(jsonValue));
    }

    /**
     * Create equipmenttype
     * Create equipmenttype
     */
    async createEquipmenttype(requestParameters: CreateEquipmenttypeRequest): Promise<EntEquipmenttype> {
        const response = await this.createEquipmenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create member
     * Create member
     */
    async createMemberRaw(requestParameters: CreateMemberRequest): Promise<runtime.ApiResponse<EntMember>> {
        if (requestParameters.member === null || requestParameters.member === undefined) {
            throw new runtime.RequiredError('member','Required parameter requestParameters.member was null or undefined when calling createMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMemberToJSON(requestParameters.member),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMemberFromJSON(jsonValue));
    }

    /**
     * Create member
     * Create member
     */
    async createMember(requestParameters: CreateMemberRequest): Promise<EntMember> {
        const response = await this.createMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create payment
     * Create payment
     */
    async createPaymentRaw(requestParameters: CreatePaymentRequest): Promise<runtime.ApiResponse<EntPayment>> {
        if (requestParameters.payment === null || requestParameters.payment === undefined) {
            throw new runtime.RequiredError('payment','Required parameter requestParameters.payment was null or undefined when calling createPayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymentToJSON(requestParameters.payment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentFromJSON(jsonValue));
    }

    /**
     * Create payment
     * Create payment
     */
    async createPayment(requestParameters: CreatePaymentRequest): Promise<EntPayment> {
        const response = await this.createPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create paymenttype
     * Create paymenttype
     */
    async createPaymenttypeRaw(requestParameters: CreatePaymenttypeRequest): Promise<runtime.ApiResponse<EntPaymenttype>> {
        if (requestParameters.paymenttype === null || requestParameters.paymenttype === undefined) {
            throw new runtime.RequiredError('paymenttype','Required parameter requestParameters.paymenttype was null or undefined when calling createPaymenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/paymenttypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymenttypeToJSON(requestParameters.paymenttype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymenttypeFromJSON(jsonValue));
    }

    /**
     * Create paymenttype
     * Create paymenttype
     */
    async createPaymenttype(requestParameters: CreatePaymenttypeRequest): Promise<EntPaymenttype> {
        const response = await this.createPaymenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create position
     * Create position
     */
    async createPositionRaw(requestParameters: CreatePositionRequest): Promise<runtime.ApiResponse<EntPosition>> {
        if (requestParameters.position === null || requestParameters.position === undefined) {
            throw new runtime.RequiredError('position','Required parameter requestParameters.position was null or undefined when calling createPosition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/positions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPositionToJSON(requestParameters.position),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPositionFromJSON(jsonValue));
    }

    /**
     * Create position
     * Create position
     */
    async createPosition(requestParameters: CreatePositionRequest): Promise<EntPosition> {
        const response = await this.createPositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create promotion
     * Create promotion
     */
    async createPromotionRaw(requestParameters: CreatePromotionRequest): Promise<runtime.ApiResponse<EntPromotion>> {
        if (requestParameters.promotion === null || requestParameters.promotion === undefined) {
            throw new runtime.RequiredError('promotion','Required parameter requestParameters.promotion was null or undefined when calling createPromotion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/promotions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPromotionToJSON(requestParameters.promotion),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPromotionFromJSON(jsonValue));
    }

    /**
     * Create promotion
     * Create promotion
     */
    async createPromotion(requestParameters: CreatePromotionRequest): Promise<EntPromotion> {
        const response = await this.createPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create promotionamount
     * Create promotionamount
     */
    async createPromotionamountRaw(requestParameters: CreatePromotionamountRequest): Promise<runtime.ApiResponse<EntPromotionamount>> {
        if (requestParameters.promotionamount === null || requestParameters.promotionamount === undefined) {
            throw new runtime.RequiredError('promotionamount','Required parameter requestParameters.promotionamount was null or undefined when calling createPromotionamount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/promotionamounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPromotionamountToJSON(requestParameters.promotionamount),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPromotionamountFromJSON(jsonValue));
    }

    /**
     * Create promotionamount
     * Create promotionamount
     */
    async createPromotionamount(requestParameters: CreatePromotionamountRequest): Promise<EntPromotionamount> {
        const response = await this.createPromotionamountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create promotiontype
     * Create promotiontype
     */
    async createPromotiontypeRaw(requestParameters: CreatePromotiontypeRequest): Promise<runtime.ApiResponse<EntPromotiontype>> {
        if (requestParameters.promotiontype === null || requestParameters.promotiontype === undefined) {
            throw new runtime.RequiredError('promotiontype','Required parameter requestParameters.promotiontype was null or undefined when calling createPromotiontype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/promotiontypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPromotiontypeToJSON(requestParameters.promotiontype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPromotiontypeFromJSON(jsonValue));
    }

    /**
     * Create promotiontype
     * Create promotiontype
     */
    async createPromotiontype(requestParameters: CreatePromotiontypeRequest): Promise<EntPromotiontype> {
        const response = await this.createPromotiontypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create salary
     * Create salary
     */
    async createSalaryRaw(requestParameters: CreateSalaryRequest): Promise<runtime.ApiResponse<EntSalary>> {
        if (requestParameters.salary === null || requestParameters.salary === undefined) {
            throw new runtime.RequiredError('salary','Required parameter requestParameters.salary was null or undefined when calling createSalary.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/salarys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSalaryToJSON(requestParameters.salary),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSalaryFromJSON(jsonValue));
    }

    /**
     * Create salary
     * Create salary
     */
    async createSalary(requestParameters: CreateSalaryRequest): Promise<EntSalary> {
        const response = await this.createSalaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create zone
     * Create zone
     */
    async createZoneRaw(requestParameters: CreateZoneRequest): Promise<runtime.ApiResponse<EntZone>> {
        if (requestParameters.zone === null || requestParameters.zone === undefined) {
            throw new runtime.RequiredError('zone','Required parameter requestParameters.zone was null or undefined when calling createZone.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/zones`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntZoneToJSON(requestParameters.zone),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntZoneFromJSON(jsonValue));
    }

    /**
     * Create zone
     * Create zone
     */
    async createZone(requestParameters: CreateZoneRequest): Promise<EntZone> {
        const response = await this.createZoneRaw(requestParameters);
        return await response.value();
    }

    /**
     * get age by ID
     * Get a age entity by ID
     */
    async getAgeRaw(requestParameters: GetAgeRequest): Promise<runtime.ApiResponse<EntAge>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAge.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAgeFromJSON(jsonValue));
    }

    /**
     * get age by ID
     * Get a age entity by ID
     */
    async getAge(requestParameters: GetAgeRequest): Promise<EntAge> {
        const response = await this.getAgeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bookcourse by ID
     * Get a bookcourse entity by ID
     */
    async getBookcourseRaw(requestParameters: GetBookcourseRequest): Promise<runtime.ApiResponse<ControllersBookcourse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBookcourse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookcourses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBookcourseFromJSON(jsonValue));
    }

    /**
     * get bookcourse by ID
     * Get a bookcourse entity by ID
     */
    async getBookcourse(requestParameters: GetBookcourseRequest): Promise<ControllersBookcourse> {
        const response = await this.getBookcourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get classifier by ID
     * Get a classifier entity by ID
     */
    async getClassifierRaw(requestParameters: GetClassifierRequest): Promise<runtime.ApiResponse<EntClassifier>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClassifier.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/classifiers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClassifierFromJSON(jsonValue));
    }

    /**
     * get classifier by ID
     * Get a classifier entity by ID
     */
    async getClassifier(requestParameters: GetClassifierRequest): Promise<EntClassifier> {
        const response = await this.getClassifierRaw(requestParameters);
        return await response.value();
    }

    /**
     * get course by ID
     * Get a course entity by ID
     */
    async getCourseRaw(requestParameters: GetCourseRequest): Promise<runtime.ApiResponse<EntCourse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCourse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/courses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCourseFromJSON(jsonValue));
    }

    /**
     * get course by ID
     * Get a course entity by ID
     */
    async getCourse(requestParameters: GetCourseRequest): Promise<EntCourse> {
        const response = await this.getCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployeeRaw(requestParameters: GetEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployee(requestParameters: GetEmployeeRequest): Promise<EntEmployee> {
        const response = await this.getEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipment by ID
     * Get a equipment entity by ID
     */
    async getEquipmentRaw(requestParameters: GetEquipmentRequest): Promise<runtime.ApiResponse<EntEquipment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEquipment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEquipmentFromJSON(jsonValue));
    }

    /**
     * get equipment by ID
     * Get a equipment entity by ID
     */
    async getEquipment(requestParameters: GetEquipmentRequest): Promise<EntEquipment> {
        const response = await this.getEquipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipmentrental by ID
     * Get a equipmentrental entity by ID
     */
    async getEquipmentrentalRaw(requestParameters: GetEquipmentrentalRequest): Promise<runtime.ApiResponse<ControllersEquipmentrental>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEquipmentrental.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipmentrentals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersEquipmentrentalFromJSON(jsonValue));
    }

    /**
     * get equipmentrental by ID
     * Get a equipmentrental entity by ID
     */
    async getEquipmentrental(requestParameters: GetEquipmentrentalRequest): Promise<ControllersEquipmentrental> {
        const response = await this.getEquipmentrentalRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipmenttype by ID
     * Get a equipmenttype entity by ID
     */
    async getEquipmenttypeRaw(requestParameters: GetEquipmenttypeRequest): Promise<runtime.ApiResponse<EntEquipmenttype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEquipmenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipmenttypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEquipmenttypeFromJSON(jsonValue));
    }

    /**
     * get equipmenttype by ID
     * Get a equipmenttype entity by ID
     */
    async getEquipmenttype(requestParameters: GetEquipmenttypeRequest): Promise<EntEquipmenttype> {
        const response = await this.getEquipmenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get GetBookcoursebyMember by ID
     * Get a GetBookcoursebyMember entity by ID
     */
    async getGetBookcoursebyMemberRaw(requestParameters: GetGetBookcoursebyMemberRequest): Promise<runtime.ApiResponse<Array<EntBookcourse>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGetBookcoursebyMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookcoursebymembers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookcourseFromJSON));
    }

    /**
     * get GetBookcoursebyMember by ID
     * Get a GetBookcoursebyMember entity by ID
     */
    async getGetBookcoursebyMember(requestParameters: GetGetBookcoursebyMemberRequest): Promise<Array<EntBookcourse>> {
        const response = await this.getGetBookcoursebyMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * get GetEquipmentbyEmployee by ID
     * Get a GetEquipmentbyEmployee entity by ID
     */
    async getGetEquipmentbyEmployeeRaw(requestParameters: GetGetEquipmentbyEmployeeRequest): Promise<runtime.ApiResponse<Array<EntEquipment>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGetEquipmentbyEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipmentbyemployees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEquipmentFromJSON));
    }

    /**
     * get GetEquipmentbyEmployee by ID
     * Get a GetEquipmentbyEmployee entity by ID
     */
    async getGetEquipmentbyEmployee(requestParameters: GetGetEquipmentbyEmployeeRequest): Promise<Array<EntEquipment>> {
        const response = await this.getGetEquipmentbyEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get GetEquipmentrentalbyMember by ID
     * Get a GetEquipmentrentalbyMember entity by ID
     */
    async getGetEquipmentrentalbyMemberRaw(requestParameters: GetGetEquipmentrentalbyMemberRequest): Promise<runtime.ApiResponse<Array<EntEquipmentrental>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGetEquipmentrentalbyMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipmentrentalbymembers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEquipmentrentalFromJSON));
    }

    /**
     * get GetEquipmentrentalbyMember by ID
     * Get a GetEquipmentrentalbyMember entity by ID
     */
    async getGetEquipmentrentalbyMember(requestParameters: GetGetEquipmentrentalbyMemberRequest): Promise<Array<EntEquipmentrental>> {
        const response = await this.getGetEquipmentrentalbyMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * get GetPaymentbyMember by ID
     * Get a GetPaymentbyMember entity by ID
     */
    async getGetPaymentbyMemberRaw(requestParameters: GetGetPaymentbyMemberRequest): Promise<runtime.ApiResponse<Array<EntPayment>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGetPaymentbyMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymentsbymembers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaymentFromJSON));
    }

    /**
     * get GetPaymentbyMember by ID
     * Get a GetPaymentbyMember entity by ID
     */
    async getGetPaymentbyMember(requestParameters: GetGetPaymentbyMemberRequest): Promise<Array<EntPayment>> {
        const response = await this.getGetPaymentbyMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * get member by ID
     * Get a member entity by ID
     */
    async getMemberRaw(requestParameters: GetMemberRequest): Promise<runtime.ApiResponse<EntMember>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMemberFromJSON(jsonValue));
    }

    /**
     * get member by ID
     * Get a member entity by ID
     */
    async getMember(requestParameters: GetMemberRequest): Promise<EntMember> {
        const response = await this.getMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * get payment by ID
     * Get a payment entity by ID
     */
    async getPaymentRaw(requestParameters: GetPaymentRequest): Promise<runtime.ApiResponse<EntPayment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentFromJSON(jsonValue));
    }

    /**
     * get payment by ID
     * Get a payment entity by ID
     */
    async getPayment(requestParameters: GetPaymentRequest): Promise<EntPayment> {
        const response = await this.getPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get paymenttype by ID
     * Get a paymenttype entity by ID
     */
    async getPaymenttypeRaw(requestParameters: GetPaymenttypeRequest): Promise<runtime.ApiResponse<EntPaymenttype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPaymenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymenttypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymenttypeFromJSON(jsonValue));
    }

    /**
     * get paymenttype by ID
     * Get a paymenttype entity by ID
     */
    async getPaymenttype(requestParameters: GetPaymenttypeRequest): Promise<EntPaymenttype> {
        const response = await this.getPaymenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get position by ID
     * Get a position entity by ID
     */
    async getPositionRaw(requestParameters: GetPositionRequest): Promise<runtime.ApiResponse<EntPosition>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPosition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/positions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPositionFromJSON(jsonValue));
    }

    /**
     * get position by ID
     * Get a position entity by ID
     */
    async getPosition(requestParameters: GetPositionRequest): Promise<EntPosition> {
        const response = await this.getPositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get promotion by ID
     * Get a promotion entity by ID
     */
    async getPromotionRaw(requestParameters: GetPromotionRequest): Promise<runtime.ApiResponse<EntPromotion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPromotion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPromotionFromJSON(jsonValue));
    }

    /**
     * get promotion by ID
     * Get a promotion entity by ID
     */
    async getPromotion(requestParameters: GetPromotionRequest): Promise<EntPromotion> {
        const response = await this.getPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get promotionamount by ID
     * Get a promotionamount entity by ID
     */
    async getPromotionamountRaw(requestParameters: GetPromotionamountRequest): Promise<runtime.ApiResponse<ControllersPromotionamount>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPromotionamount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotionamounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersPromotionamountFromJSON(jsonValue));
    }

    /**
     * get promotionamount by ID
     * Get a promotionamount entity by ID
     */
    async getPromotionamount(requestParameters: GetPromotionamountRequest): Promise<ControllersPromotionamount> {
        const response = await this.getPromotionamountRaw(requestParameters);
        return await response.value();
    }

    /**
     * get promotiontype by ID
     * Get a promotiontype entity by ID
     */
    async getPromotiontypeRaw(requestParameters: GetPromotiontypeRequest): Promise<runtime.ApiResponse<ControllersPromotiontype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPromotiontype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotiontypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersPromotiontypeFromJSON(jsonValue));
    }

    /**
     * get promotiontype by ID
     * Get a promotiontype entity by ID
     */
    async getPromotiontype(requestParameters: GetPromotiontypeRequest): Promise<ControllersPromotiontype> {
        const response = await this.getPromotiontypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get salary by ID
     * Get a salary entity by ID
     */
    async getSalaryRaw(requestParameters: GetSalaryRequest): Promise<runtime.ApiResponse<EntSalary>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSalary.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/salarys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSalaryFromJSON(jsonValue));
    }

    /**
     * get salary by ID
     * Get a salary entity by ID
     */
    async getSalary(requestParameters: GetSalaryRequest): Promise<EntSalary> {
        const response = await this.getSalaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * get zone by ID
     * Get a zone entity by ID
     */
    async getZoneRaw(requestParameters: GetZoneRequest): Promise<runtime.ApiResponse<EntZone>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getZone.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/zones/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntZoneFromJSON(jsonValue));
    }

    /**
     * get zone by ID
     * Get a zone entity by ID
     */
    async getZone(requestParameters: GetZoneRequest): Promise<EntZone> {
        const response = await this.getZoneRaw(requestParameters);
        return await response.value();
    }

    /**
     * list age entities
     * List age entities
     */
    async listAgeRaw(requestParameters: ListAgeRequest): Promise<runtime.ApiResponse<Array<EntAge>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAgeFromJSON));
    }

    /**
     * list age entities
     * List age entities
     */
    async listAge(requestParameters: ListAgeRequest): Promise<Array<EntAge>> {
        const response = await this.listAgeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bookcourse entities
     * List bookcourse entities
     */
    async listBookcourseRaw(requestParameters: ListBookcourseRequest): Promise<runtime.ApiResponse<Array<EntBookcourse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookcourses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookcourseFromJSON));
    }

    /**
     * list bookcourse entities
     * List bookcourse entities
     */
    async listBookcourse(requestParameters: ListBookcourseRequest): Promise<Array<EntBookcourse>> {
        const response = await this.listBookcourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list classifier entities
     * List classifier entities
     */
    async listClassifierRaw(requestParameters: ListClassifierRequest): Promise<runtime.ApiResponse<Array<EntClassifier>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/classifiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClassifierFromJSON));
    }

    /**
     * list classifier entities
     * List classifier entities
     */
    async listClassifier(requestParameters: ListClassifierRequest): Promise<Array<EntClassifier>> {
        const response = await this.listClassifierRaw(requestParameters);
        return await response.value();
    }

    /**
     * list course entities
     * List course entities
     */
    async listCourseRaw(requestParameters: ListCourseRequest): Promise<runtime.ApiResponse<Array<EntCourse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/courses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCourseFromJSON));
    }

    /**
     * list course entities
     * List course entities
     */
    async listCourse(requestParameters: ListCourseRequest): Promise<Array<EntCourse>> {
        const response = await this.listCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployeeRaw(requestParameters: ListEmployeeRequest): Promise<runtime.ApiResponse<Array<EntEmployee>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEmployeeFromJSON));
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployee(requestParameters: ListEmployeeRequest): Promise<Array<EntEmployee>> {
        const response = await this.listEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list equipment entities
     * List equipment entities
     */
    async listEquipmentRaw(requestParameters: ListEquipmentRequest): Promise<runtime.ApiResponse<Array<EntEquipment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEquipmentFromJSON));
    }

    /**
     * list equipment entities
     * List equipment entities
     */
    async listEquipment(requestParameters: ListEquipmentRequest): Promise<Array<EntEquipment>> {
        const response = await this.listEquipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list equipmentrental entities
     * List equipmentrental entities
     */
    async listEquipmentrentalRaw(requestParameters: ListEquipmentrentalRequest): Promise<runtime.ApiResponse<Array<EntEquipmentrental>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipmentrentals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEquipmentrentalFromJSON));
    }

    /**
     * list equipmentrental entities
     * List equipmentrental entities
     */
    async listEquipmentrental(requestParameters: ListEquipmentrentalRequest): Promise<Array<EntEquipmentrental>> {
        const response = await this.listEquipmentrentalRaw(requestParameters);
        return await response.value();
    }

    /**
     * list equipmenttype entities
     * List equipmenttype entities
     */
    async listEquipmenttypeRaw(requestParameters: ListEquipmenttypeRequest): Promise<runtime.ApiResponse<Array<EntEquipmenttype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipmenttypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEquipmenttypeFromJSON));
    }

    /**
     * list equipmenttype entities
     * List equipmenttype entities
     */
    async listEquipmenttype(requestParameters: ListEquipmenttypeRequest): Promise<Array<EntEquipmenttype>> {
        const response = await this.listEquipmenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list member entities
     * List member entities
     */
    async listMemberRaw(requestParameters: ListMemberRequest): Promise<runtime.ApiResponse<Array<EntMember>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMemberFromJSON));
    }

    /**
     * list member entities
     * List member entities
     */
    async listMember(requestParameters: ListMemberRequest): Promise<Array<EntMember>> {
        const response = await this.listMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * list payment entities
     * List payment entities
     */
    async listPaymentRaw(requestParameters: ListPaymentRequest): Promise<runtime.ApiResponse<Array<EntPayment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaymentFromJSON));
    }

    /**
     * list payment entities
     * List payment entities
     */
    async listPayment(requestParameters: ListPaymentRequest): Promise<Array<EntPayment>> {
        const response = await this.listPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list paymenttype entities
     * List paymenttype entities
     */
    async listPaymenttypeRaw(requestParameters: ListPaymenttypeRequest): Promise<runtime.ApiResponse<Array<EntPaymenttype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymenttypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaymenttypeFromJSON));
    }

    /**
     * list paymenttype entities
     * List paymenttype entities
     */
    async listPaymenttype(requestParameters: ListPaymenttypeRequest): Promise<Array<EntPaymenttype>> {
        const response = await this.listPaymenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list position entities
     * List position entities
     */
    async listPositionRaw(requestParameters: ListPositionRequest): Promise<runtime.ApiResponse<Array<EntPosition>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/positions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPositionFromJSON));
    }

    /**
     * list position entities
     * List position entities
     */
    async listPosition(requestParameters: ListPositionRequest): Promise<Array<EntPosition>> {
        const response = await this.listPositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list promotion entities
     * List promotion entities
     */
    async listPromotionRaw(requestParameters: ListPromotionRequest): Promise<runtime.ApiResponse<Array<EntPromotion>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPromotionFromJSON));
    }

    /**
     * list promotion entities
     * List promotion entities
     */
    async listPromotion(requestParameters: ListPromotionRequest): Promise<Array<EntPromotion>> {
        const response = await this.listPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list promotionamount entities
     * List promotionamount entities
     */
    async listPromotionamountRaw(requestParameters: ListPromotionamountRequest): Promise<runtime.ApiResponse<Array<EntPromotionamount>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotionamounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPromotionamountFromJSON));
    }

    /**
     * list promotionamount entities
     * List promotionamount entities
     */
    async listPromotionamount(requestParameters: ListPromotionamountRequest): Promise<Array<EntPromotionamount>> {
        const response = await this.listPromotionamountRaw(requestParameters);
        return await response.value();
    }

    /**
     * list promotiontype entities
     * List promotiontype entities
     */
    async listPromotiontypeRaw(requestParameters: ListPromotiontypeRequest): Promise<runtime.ApiResponse<Array<EntPromotiontype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotiontypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPromotiontypeFromJSON));
    }

    /**
     * list promotiontype entities
     * List promotiontype entities
     */
    async listPromotiontype(requestParameters: ListPromotiontypeRequest): Promise<Array<EntPromotiontype>> {
        const response = await this.listPromotiontypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list salary entities
     * List salary entities
     */
    async listSalaryRaw(requestParameters: ListSalaryRequest): Promise<runtime.ApiResponse<Array<EntSalary>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/salarys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSalaryFromJSON));
    }

    /**
     * list salary entities
     * List salary entities
     */
    async listSalary(requestParameters: ListSalaryRequest): Promise<Array<EntSalary>> {
        const response = await this.listSalaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * list zone entities
     * List zone entities
     */
    async listZoneRaw(requestParameters: ListZoneRequest): Promise<runtime.ApiResponse<Array<EntZone>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/zones`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntZoneFromJSON));
    }

    /**
     * list zone entities
     * List zone entities
     */
    async listZone(requestParameters: ListZoneRequest): Promise<Array<EntZone>> {
        const response = await this.listZoneRaw(requestParameters);
        return await response.value();
    }

}
