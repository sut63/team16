"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
jest.mock('./get-consuming-root');
var path_1 = __importDefault(require("path"));
var has_config_1 = require("./has-config");
var getConsumingRoot = jest.requireMock('./get-consuming-root').getConsumingRoot;
describe('hasConfig', function () {
    beforeEach(function () {
        getConsumingRoot.mockReturnValue(path_1["default"].join(__dirname, '..', '__fixtures__', 'demo-lib'));
    });
    it('works for a file', function () {
        expect(has_config_1.hasConfig([{ type: 'file', pattern: 'tsconfig.json' }])).toBe(true);
    });
    it('works for a package.json property', function () {
        expect(has_config_1.hasConfig([{ type: 'package.json', property: 'name' }])).toBe(true);
    });
    it('works for a nested package.json property', function () {
        expect(has_config_1.hasConfig([
            { type: 'package.json', property: 'jest.collectCoverageFrom' },
        ])).toBe(true);
    });
    it('works for a dependency', function () {
        expect(has_config_1.hasConfig([{ type: 'dependency', dependency: 'react' }])).toBe(true);
    });
    it('works for a dev dependency', function () {
        expect(has_config_1.hasConfig([
            {
                type: 'dependency',
                dependency: '@testing-library/react',
                dependencyType: 'dev'
            },
        ])).toBe(true);
    });
    it('works for a peer dependency', function () {
        expect(has_config_1.hasConfig([
            {
                type: 'dependency',
                dependency: 'styled-components',
                dependencyType: 'peer'
            },
        ])).toBe(true);
    });
    it('works when some fail and some succeed', function () {
        expect(has_config_1.hasConfig([
            {
                type: 'dependency',
                dependency: 'react'
            },
            {
                type: 'dependency',
                dependency: 'react',
                dependencyType: 'peer'
            },
        ])).toBe(true);
    });
    it('fails when all fail', function () {
        expect(has_config_1.hasConfig([
            {
                type: 'dependency',
                dependency: 'angular'
            },
            {
                type: 'dependency',
                dependency: 'angular',
                dependencyType: 'peer'
            },
        ])).toBe(false);
    });
});
