/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Patient
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntClassifier,
    EntClassifierFromJSON,
    EntClassifierFromJSONTyped,
    EntClassifierToJSON,
    EntEmployee,
    EntEmployeeFromJSON,
    EntEmployeeFromJSONTyped,
    EntEmployeeToJSON,
    EntEquipmentrental,
    EntEquipmentrentalFromJSON,
    EntEquipmentrentalFromJSONTyped,
    EntEquipmentrentalToJSON,
    EntEquipmenttype,
    EntEquipmenttypeFromJSON,
    EntEquipmenttypeFromJSONTyped,
    EntEquipmenttypeToJSON,
    EntZone,
    EntZoneFromJSON,
    EntZoneFromJSONTyped,
    EntZoneToJSON,
} from './';

/**
 * 
 * @export
 * @interface EntEquipmentEdges
 */
export interface EntEquipmentEdges {
    /**
     * 
     * @type {EntClassifier}
     * @memberof EntEquipmentEdges
     */
    classifier?: EntClassifier;
    /**
     * 
     * @type {EntEmployee}
     * @memberof EntEquipmentEdges
     */
    employee?: EntEmployee;
    /**
     * Equipmentrental holds the value of the equipmentrental edge.
     * @type {Array<EntEquipmentrental>}
     * @memberof EntEquipmentEdges
     */
    equipmentrental?: Array<EntEquipmentrental>;
    /**
     * 
     * @type {EntEquipmenttype}
     * @memberof EntEquipmentEdges
     */
    equipmenttype?: EntEquipmenttype;
    /**
     * 
     * @type {EntZone}
     * @memberof EntEquipmentEdges
     */
    zone?: EntZone;
}

export function EntEquipmentEdgesFromJSON(json: any): EntEquipmentEdges {
    return EntEquipmentEdgesFromJSONTyped(json, false);
}

export function EntEquipmentEdgesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntEquipmentEdges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'classifier': !exists(json, 'classifier') ? undefined : EntClassifierFromJSON(json['classifier']),
        'employee': !exists(json, 'employee') ? undefined : EntEmployeeFromJSON(json['employee']),
        'equipmentrental': !exists(json, 'equipmentrental') ? undefined : ((json['equipmentrental'] as Array<any>).map(EntEquipmentrentalFromJSON)),
        'equipmenttype': !exists(json, 'equipmenttype') ? undefined : EntEquipmenttypeFromJSON(json['equipmenttype']),
        'zone': !exists(json, 'zone') ? undefined : EntZoneFromJSON(json['zone']),
    };
}

export function EntEquipmentEdgesToJSON(value?: EntEquipmentEdges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'classifier': EntClassifierToJSON(value.classifier),
        'employee': EntEmployeeToJSON(value.employee),
        'equipmentrental': value.equipmentrental === undefined ? undefined : ((value.equipmentrental as Array<any>).map(EntEquipmentrentalToJSON)),
        'equipmenttype': EntEquipmenttypeToJSON(value.equipmenttype),
        'zone': EntZoneToJSON(value.zone),
    };
}


