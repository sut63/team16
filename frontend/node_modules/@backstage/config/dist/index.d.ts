declare type JsonObject = {
    [key in string]?: JsonValue;
};
declare type JsonArray = JsonValue[];
declare type JsonValue = JsonObject | JsonArray | number | string | boolean | null;
declare type AppConfig = {
    context: string;
    data: JsonObject;
};
declare type Config = {
    keys(): string[];
    get(key: string): JsonValue;
    getOptional(key: string): JsonValue | undefined;
    getConfig(key: string): Config;
    getOptionalConfig(key: string): Config | undefined;
    getConfigArray(key: string): Config[];
    getOptionalConfigArray(key: string): Config[] | undefined;
    getNumber(key: string): number;
    getOptionalNumber(key: string): number | undefined;
    getBoolean(key: string): boolean;
    getOptionalBoolean(key: string): boolean | undefined;
    getString(key: string): string;
    getOptionalString(key: string): string | undefined;
    getStringArray(key: string): string[];
    getOptionalStringArray(key: string): string[] | undefined;
};

declare class ConfigReader implements Config {
    private readonly data;
    private readonly context;
    private readonly fallback?;
    private readonly prefix;
    static fromConfigs(configs: AppConfig[]): ConfigReader;
    constructor(data: JsonObject | undefined, context?: string, fallback?: ConfigReader | undefined, prefix?: string);
    keys(): string[];
    get(key: string): JsonValue;
    getOptional(key: string): JsonValue | undefined;
    getConfig(key: string): ConfigReader;
    getOptionalConfig(key: string): ConfigReader | undefined;
    getConfigArray(key: string): ConfigReader[];
    getOptionalConfigArray(key: string): ConfigReader[] | undefined;
    getNumber(key: string): number;
    getOptionalNumber(key: string): number | undefined;
    getBoolean(key: string): boolean;
    getOptionalBoolean(key: string): boolean | undefined;
    getString(key: string): string;
    getOptionalString(key: string): string | undefined;
    getStringArray(key: string): string[];
    getOptionalStringArray(key: string): string[] | undefined;
    private fullKey;
    private readConfigValue;
    private readValue;
}

export { AppConfig, Config, ConfigReader, JsonArray, JsonObject, JsonValue };
