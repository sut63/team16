'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var chalk2 = _interopDefault(require('chalk'));
var fs = _interopDefault(require('fs-extra'));
var path2 = require('path');
var path2__default = _interopDefault(path2);
var handlebars2 = _interopDefault(require('handlebars'));
var ora2 = _interopDefault(require('ora'));
var recursive = _interopDefault(require('recursive-readdir'));

const TASK_NAME_MAX_LENGTH = 14;
class Task {
  static log(name = "") {
    process.stdout.write(`${chalk2.green(name)}
`);
  }
  static error(message = "") {
    process.stdout.write(`
${chalk2.red(message)}

`);
  }
  static section(name) {
    const title = chalk2.green(`${name}:`);
    process.stdout.write(`
 ${title}
`);
  }
  static exit(code = 0) {
    process.exit(code);
  }
  static async forItem(task, item, taskFunc) {
    const paddedTask = chalk2.green(task.padEnd(TASK_NAME_MAX_LENGTH));
    const spinner = ora2({
      prefixText: chalk2.green(`  ${paddedTask}${chalk2.cyan(item)}`),
      spinner: "arc",
      color: "green"
    }).start();
    try {
      await taskFunc();
      spinner.succeed();
    } catch (error) {
      spinner.fail();
      throw error;
    }
  }
}
async function templatingTask(templateDir, destinationDir, context) {
  const files = await recursive(templateDir).catch((error) => {
    throw new Error(`Failed to read template directory: ${error.message}`);
  });
  for (const file of files) {
    const destinationFile = file.replace(templateDir, destinationDir);
    await fs.ensureDir(path2.dirname(destinationFile));
    if (file.endsWith(".hbs")) {
      await Task.forItem("templating", path2.basename(file), async () => {
        const destination = destinationFile.replace(/\.hbs$/, "");
        const template = await fs.readFile(file);
        const compiled = handlebars2.compile(template.toString());
        const contents = compiled({name: path2.basename(destination), ...context});
        await fs.writeFile(destination, contents).catch((error) => {
          throw new Error(`Failed to create file: ${destination}: ${error.message}`);
        });
      });
    } else {
      await Task.forItem("copying", path2.basename(file), async () => {
        await fs.copyFile(file, destinationFile).catch((error) => {
          const destination = destinationFile;
          throw new Error(`Failed to copy file to ${destination} : ${error.message}`);
        });
      });
    }
  }
}

exports.Task = Task;
exports.templatingTask = templatingTask;
