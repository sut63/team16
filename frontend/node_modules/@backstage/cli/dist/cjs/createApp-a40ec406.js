'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('commander');
var chalk2 = _interopDefault(require('chalk'));
var index = require('./index-efc4b836.js');
var fs = _interopDefault(require('fs-extra'));
var path2 = require('path');
var path2__default = _interopDefault(path2);
var util = require('util');
var inquirer2 = _interopDefault(require('inquirer'));
var child_process = require('child_process');
var os2 = require('os');
var os2__default = _interopDefault(os2);
require('handlebars');
require('ora');
require('recursive-readdir');
var tasks = require('./tasks-79e59c50.js');

const exec = util.promisify(child_process.exec);
async function checkExists(rootDir, name) {
  await tasks.Task.forItem("checking", name, async () => {
    const destination = path2.resolve(rootDir, name);
    if (await fs.pathExists(destination)) {
      const existing = chalk2.cyan(destination.replace(`${rootDir}/`, ""));
      throw new Error(`A directory with the same name already exists: ${existing}
Please try again with a different app name`);
    }
  });
}
async function createTemporaryAppFolder(tempDir) {
  await tasks.Task.forItem("creating", "temporary directory", async () => {
    try {
      await fs.mkdir(tempDir);
    } catch (error) {
      throw new Error(`Failed to create temporary app directory: ${error.message}`);
    }
  });
}
async function cleanUp(tempDir) {
  await tasks.Task.forItem("remove", "temporary directory", async () => {
    await fs.remove(tempDir);
  });
}
async function buildApp(appDir) {
  const runCmd = async (cmd) => {
    await tasks.Task.forItem("executing", cmd, async () => {
      process.chdir(appDir);
      await exec(cmd).catch((error) => {
        process.stdout.write(error.stderr);
        process.stdout.write(error.stdout);
        throw new Error(`Could not execute command ${chalk2.cyan(cmd)}`);
      });
    });
  };
  await runCmd("yarn install");
  await runCmd("yarn tsc");
  await runCmd("yarn build");
}
async function moveApp(tempDir, destination, id) {
  await tasks.Task.forItem("moving", id, async () => {
    await fs.move(tempDir, destination).catch((error) => {
      throw new Error(`Failed to move app from ${tempDir} to ${destination}: ${error.message}`);
    });
  });
}
var createApp = async (cmd) => {
  const questions = [
    {
      type: "input",
      name: "name",
      message: chalk2.blue("Enter a name for the app [required]"),
      validate: (value) => {
        if (!value) {
          return chalk2.red("Please enter a name for the app");
        } else if (!/^[a-z0-9]+(-[a-z0-9]+)*$/.test(value)) {
          return chalk2.red("App name must be kebab-cased and contain only letters, digits, and dashes.");
        }
        return true;
      }
    }
  ];
  const answers = await inquirer2.prompt(questions);
  const templateDir = index.paths.resolveOwn("templates/default-app");
  const tempDir = path2.resolve(os2__default.tmpdir(), answers.name);
  const appDir = path2.resolve(index.paths.targetDir, answers.name);
  tasks.Task.log();
  tasks.Task.log("Creating the app...");
  try {
    tasks.Task.section("Checking if the directory is available");
    await checkExists(index.paths.targetDir, answers.name);
    tasks.Task.section("Creating a temporary app directory");
    await createTemporaryAppFolder(tempDir);
    tasks.Task.section("Preparing files");
    await tasks.templatingTask(templateDir, tempDir, {...answers, version: index.version});
    tasks.Task.section("Moving to final location");
    await moveApp(tempDir, appDir, answers.name);
    if (!cmd.skipInstall) {
      tasks.Task.section("Building the app");
      await buildApp(appDir);
    }
    tasks.Task.log();
    tasks.Task.log(chalk2.green(`ðŸ¥‡  Successfully created ${chalk2.cyan(answers.name)}`));
    tasks.Task.log();
    tasks.Task.exit();
  } catch (error) {
    tasks.Task.error(error.message);
    tasks.Task.log("It seems that something went wrong when creating the app ðŸ¤”");
    tasks.Task.log("We are going to clean up, and then you can try again.");
    tasks.Task.section("Cleanup");
    await cleanUp(tempDir);
    tasks.Task.error("ðŸ”¥  Failed to create app!");
    tasks.Task.exit(1);
  }
};

exports.default = createApp;
