'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('commander');
require('chalk');
require('./index-efc4b836.js');
require('fs-extra');
require('path');
var configLoader = require('@backstage/config-loader');
var config = require('@backstage/config');
var webpack2 = _interopDefault(require('webpack'));
require('fork-ts-checker-webpack-plugin');
require('html-webpack-plugin');
require('react-dev-utils/ModuleScopePlugin');
require('start-server-webpack-plugin');
require('webpack-node-externals');
var paths = require('./paths-5bdff86a.js');
require('mini-css-extract-plugin');
require('./svgrTemplate-2930b0e1.js');

async function serveBackend(options) {
  const paths2 = paths.resolveBundlingPaths(options);
  const config2 = paths.createBackendConfig(paths2, {
    ...options,
    isDev: true
  });
  const compiler = webpack2(config2);
  const watcher = compiler.watch({
    poll: true
  }, (err) => {
    if (err) {
      console.error(err);
    } else
      console.log("Build succeeded");
  });
  const waitForExit = async () => {
    for (const signal of ["SIGINT", "SIGTERM"]) {
      process.on(signal, () => {
        watcher.close(() => console.log("Stopped watcher"));
        process.exit();
      });
    }
    return new Promise(() => {
    });
  };
  return waitForExit;
}

var dev = async (cmd) => {
  const appConfigs = await configLoader.loadConfig();
  const waitForExit = await serveBackend({
    entry: "src/index",
    checksEnabled: cmd.check,
    config: config.ConfigReader.fromConfigs(appConfigs),
    appConfigs
  });
  await waitForExit();
};

exports.default = dev;
