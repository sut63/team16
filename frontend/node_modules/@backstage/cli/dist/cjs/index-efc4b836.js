'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var program = _interopDefault(require('commander'));
var chalk2 = _interopDefault(require('chalk'));
var fs = _interopDefault(require('fs-extra'));
var path2 = require('path');
var path2__default = _interopDefault(path2);

class CustomError extends Error {
  get name() {
    return this.constructor.name;
  }
}
class ExitCodeError extends CustomError {
  constructor(code, command) {
    if (command) {
      super(`Command '${command}' exited with code ${code}`);
    } else {
      super(`Child exited with code ${code}`);
    }
    this.code = code;
  }
}
function exitWithError(error) {
  if (error instanceof ExitCodeError) {
    process.stderr.write(`
${chalk2.red(error.message)}

`);
    process.exit(error.code);
  } else {
    process.stderr.write(`
${chalk2.red(`${error}`)}

`);
    process.exit(1);
  }
}

function findRootPath(topPath) {
  let path2$1 = topPath;
  for (let i = 0; i < 1e3; i++) {
    const packagePath = path2.resolve(path2$1, "package.json");
    const exists = fs.pathExistsSync(packagePath);
    if (exists) {
      try {
        const data = fs.readJsonSync(packagePath);
        if (data.name === "root" || data.name.includes("backstage-e2e")) {
          return path2$1;
        }
      } catch (error) {
        throw new Error(`Failed to parse package.json file while searching for root, ${error}`);
      }
    }
    const newPath = path2.dirname(path2$1);
    if (newPath === path2$1) {
      throw new Error(`No package.json with name "root" found as a parent of ${topPath}`);
    }
    path2$1 = newPath;
  }
  throw new Error(`Iteration limit reached when searching for root package.json at ${topPath}`);
}
function findOwnDir() {
  const pathDist = "..";
  const pathDev = "../..";
  const pkgInDist = path2.resolve(__dirname, pathDist, "package.json");
  const isDist = fs.pathExistsSync(pkgInDist);
  const path2$1 = isDist ? pathDist : pathDev;
  return path2.resolve(__dirname, path2$1);
}
function findOwnRootPath(ownDir) {
  const isLocal = fs.pathExistsSync(path2.resolve(ownDir, "src"));
  if (!isLocal) {
    throw new Error("Tried to access monorepo package root dir outside of Backstage repository");
  }
  return path2.resolve(ownDir, "../..");
}
function findPaths() {
  const ownDir = findOwnDir();
  const targetDir = fs.realpathSync(process.cwd());
  let ownRoot = "";
  const getOwnRoot = () => {
    if (!ownRoot) {
      ownRoot = findOwnRootPath(ownDir);
    }
    return ownRoot;
  };
  let targetRoot = "";
  const getTargetRoot = () => {
    if (!targetRoot) {
      targetRoot = findRootPath(targetDir);
    }
    return targetRoot;
  };
  return {
    ownDir,
    get ownRoot() {
      return getOwnRoot();
    },
    targetDir,
    get targetRoot() {
      return getTargetRoot();
    },
    resolveOwn: (...paths2) => path2.resolve(ownDir, ...paths2),
    resolveOwnRoot: (...paths2) => path2.resolve(getOwnRoot(), ...paths2),
    resolveTarget: (...paths2) => path2.resolve(targetDir, ...paths2),
    resolveTargetRoot: (...paths2) => path2.resolve(getTargetRoot(), ...paths2)
  };
}
const paths = findPaths();

function findVersion() {
  const pkgContent = fs.readFileSync(paths.resolveOwn("package.json"), "utf8");
  return JSON.parse(pkgContent).version;
}
const version = findVersion();
const isDev = fs.pathExistsSync(paths.resolveOwn("src"));

const main = (argv) => {
  program.name("backstage-cli").version(version);
  program.command("create-app").description("Creates a new app in a new directory").option("--skip-install", "Skip the install and builds steps after creating the app").action(lazyAction(() => Promise.resolve().then(function () { return require('./createApp-a40ec406.js'); }), "default"));
  program.command("app:build").description("Build an app for a production release").option("--stats", "Write bundle stats to output directory").action(lazyAction(() => Promise.resolve().then(function () { return require('./build-89e21942.js'); }), "default"));
  program.command("app:serve").description("Serve an app for local development").option("--check", "Enable type checking and linting").action(lazyAction(() => Promise.resolve().then(function () { return require('./serve-922426f7.js'); }), "default"));
  program.command("backend:build").description("Build a backend plugin").action(lazyAction(() => Promise.resolve().then(function () { return require('./build-69db804b.js'); }), "default"));
  program.command("backend:build-image <image-tag>").description("Builds a docker image from the package, with all local deps included").action(lazyAction(() => Promise.resolve().then(function () { return require('./buildImage-a1c50e1f.js'); }), "default"));
  program.command("backend:dev").description("Start local development server with HMR for the backend").option("--check", "Enable type checking and linting").action(lazyAction(() => Promise.resolve().then(function () { return require('./dev-2a72f1a0.js'); }), "default"));
  program.command("app:diff").option("--check", "Fail if changes are required").option("--yes", "Apply all changes").description("Diff an existing app with the creation template").action(lazyAction(() => Promise.resolve().then(function () { return require('./diff-991dd6c4.js'); }), "default"));
  program.command("create-plugin").description("Creates a new plugin in the current repository").action(lazyAction(() => Promise.resolve().then(function () { return require('./createPlugin-b51de590.js'); }), "default"));
  program.command("remove-plugin").description("Removes plugin in the current repository").action(lazyAction(() => Promise.resolve().then(function () { return require('./removePlugin-e4e70ea2.js'); }), "default"));
  program.command("plugin:build").description("Build a plugin").action(lazyAction(() => Promise.resolve().then(function () { return require('./build-c5c7b137.js'); }), "default"));
  program.command("plugin:serve").description("Serves the dev/ folder of a plugin").option("--check", "Enable type checking and linting").action(lazyAction(() => Promise.resolve().then(function () { return require('./serve-bdbd240a.js'); }), "default"));
  program.command("plugin:export").description("Exports the dev/ folder of a plugin").option("--stats", "Write bundle stats to output directory").action(lazyAction(() => Promise.resolve().then(function () { return require('./export-099ce8d4.js'); }), "default"));
  program.command("plugin:diff").option("--check", "Fail if changes are required").option("--yes", "Apply all changes").description("Diff an existing plugin with the creation template").action(lazyAction(() => Promise.resolve().then(function () { return require('./diff-a62daa53.js'); }), "default"));
  program.command("build").description("Build a package for publishing").option("--outputs <formats>", "List of formats to output [types,cjs,esm]").action(lazyAction(() => Promise.resolve().then(function () { return require('./build-9b5c21e7.js'); }), "default"));
  program.command("lint").option("--fix", "Attempt to automatically fix violations").description("Lint a package").action(lazyAction(() => Promise.resolve().then(function () { return require('./lint-5c87bcb1.js'); }), "default"));
  program.command("test").allowUnknownOption(true).helpOption(", --backstage-cli-help").description("Run tests, forwarding args to Jest, defaulting to watch mode").action(lazyAction(() => Promise.resolve().then(function () { return require('./testCommand-729e5e66.js'); }), "default"));
  program.command("prepack").description("Prepares a package for packaging before publishing").action(lazyAction(() => Promise.resolve().then(function () { return require('./pack-9e8e4380.js'); }), "pre"));
  program.command("postpack").description("Restores the changes made by the prepack command").action(lazyAction(() => Promise.resolve().then(function () { return require('./pack-9e8e4380.js'); }), "post"));
  program.command("clean").description("Delete cache directories").action(lazyAction(() => Promise.resolve().then(function () { return require('./clean-109fc2fb.js'); }), "default"));
  program.command("build-workspace <workspace-dir> ...<packages>").description("Builds a temporary dist workspace from the provided packages").action(lazyAction(() => Promise.resolve().then(function () { return require('./buildWorkspace-cbc25282.js'); }), "default"));
  program.on("command:*", () => {
    console.log();
    console.log(chalk2.red(`Invalid command: ${chalk2.cyan(program.args.join(" "))}`));
    console.log(chalk2.red("See --help for a list of available commands."));
    console.log();
    process.exit(1);
  });
  if (!process.argv.slice(2).length) {
    program.outputHelp(chalk2.yellow);
  }
  program.parse(argv);
};
function lazyAction(actionRequireFunc, exportName) {
  return async (...args) => {
    try {
      const module = await actionRequireFunc();
      const actionFunc = module[exportName];
      await actionFunc(...args);
      process.exit(0);
    } catch (error) {
      exitWithError(error);
    }
  };
}
process.on("unhandledRejection", (rejection) => {
  if (rejection instanceof Error) {
    exitWithError(rejection);
  } else {
    exitWithError(new Error(`Unknown rejection: '${rejection}'`));
  }
});
main(process.argv);

exports.ExitCodeError = ExitCodeError;
exports.paths = paths;
exports.version = version;
