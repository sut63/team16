import { ErrorApi, ApiRef, ErrorContext, Observable, StorageApi, StorageValueChange } from '@backstage/core-api';
import { ComponentType, ReactNode, ReactElement } from 'react';
import { RenderResult } from '@testing-library/react';
export * from '@backstage/test-utils-core';

declare type Options = {
    collect?: boolean;
};
declare type ErrorWithContext = {
    error: Error;
    context?: ErrorContext;
};
declare class MockErrorApi implements ErrorApi {
    private readonly options;
    static factory: {
        implements: ApiRef<ErrorApi>;
        deps: {};
        factory: () => MockErrorApi;
    };
    private readonly errors;
    private readonly waiters;
    constructor(options?: Options);
    post(error: Error, context?: ErrorContext): void;
    error$(): Observable<{
        error: Error;
        context?: ErrorContext;
    }>;
    getErrors(): ErrorWithContext[];
    waitForError(pattern: RegExp, timeoutMs?: number): Promise<ErrorWithContext>;
}

declare type MockStorageBucket = {
    [key: string]: any;
};
declare class MockStorageApi implements StorageApi {
    static factory: {
        implements: ApiRef<StorageApi>;
        deps: {};
        factory: () => MockStorageApi;
    };
    private readonly namespace;
    private readonly data;
    private constructor();
    static create(data?: MockStorageBucket): MockStorageApi;
    forBucket(name: string): StorageApi;
    get<T>(key: string): T | undefined;
    set<T>(key: string, data: T): Promise<void>;
    remove(key: string): Promise<void>;
    observe$<T>(key: string): Observable<StorageValueChange<T>>;
    private getKeyName;
    private notifyChanges;
    private subscribers;
    private readonly observable;
}

declare type Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';
declare function mockBreakpoint(initialBreakpoint?: Breakpoint): {
    set(breakpoint: Breakpoint): void;
    remove(): void;
};

/**
 * Options to customize the behavior of the test app wrapper.
 */
declare type TestAppOptions = {
    /**
     * Initial route entries to pass along as `initialEntries` to the router.
     */
    routeEntries?: string[];
};
/**
 * Wraps a component inside a Backstage test app, providing a mocked theme
 * and app context, along with mocked APIs.
 *
 * @param Component - A component or react node to render inside the test app.
 * @param options - Additional options for the rendering.
 */
declare function wrapInTestApp(Component: ComponentType | ReactNode, options?: TestAppOptions): ReactElement;
/**
 * Renders a component inside a Backstage test app, providing a mocked theme
 * and app context, along with mocked APIs.
 *
 * The render executes async effects similar to `renderWithEffects`. To avoid this
 * behavior, use a regular `render()` + `wrapInTestApp()` instead.
 *
 * @param Component - A component or react node to render inside the test app.
 * @param options - Additional options for the rendering.
 */
declare function renderInTestApp(Component: ComponentType | ReactNode, options?: TestAppOptions): Promise<RenderResult>;

export { MockErrorApi, MockStorageApi, MockStorageBucket, mockBreakpoint, renderInTestApp, wrapInTestApp };
