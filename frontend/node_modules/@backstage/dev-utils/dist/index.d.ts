import { ReactNode, ComponentType } from 'react';
import { ApiFactory, createPlugin } from '@backstage/core';

declare type BackstagePlugin = ReturnType<typeof createPlugin>;
/**
 * DevApp builder that is similar to the App builder API, but creates an App
 * with the purpose of developing one or more plugins inside it.
 */
declare class DevAppBuilder {
    private readonly plugins;
    private readonly factories;
    private readonly rootChildren;
    /**
     * Register one or more plugins to render in the dev app
     */
    registerPlugin(...plugins: BackstagePlugin[]): DevAppBuilder;
    /**
     * Register an API factory to add to the app
     */
    registerApiFactory<Api, Impl, Deps>(factory: ApiFactory<Api, Impl, Deps>): DevAppBuilder;
    /**
     * Adds a React node to place just inside the App Provider.
     *
     * Useful for adding more global components like the AlertDisplay.
     */
    addRootChild(node: ReactNode): DevAppBuilder;
    /**
     * Build a DevApp component using the resources registered so far
     */
    build(): ComponentType<{}>;
    /**
     * Build and render directory to #root element, with react hot loading.
     */
    render(): void;
    private setupSidebar;
    private setupApiRegistry;
    private findPluginPaths;
}
/**
 * Creates a dev app for rendering one or more plugins and exposing the touchpoints of the plugin.
 */
declare function createDevApp(): DevAppBuilder;

export { createDevApp };
