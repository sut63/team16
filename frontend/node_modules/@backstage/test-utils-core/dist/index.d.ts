import { ReactElement } from 'react';
import { RenderResult } from '@testing-library/react';

declare class Keyboard {
    static type(target: any, input: any): Promise<void>;
    static typeDebug(target: any, input: any): Promise<void>;
    static toReadableInput(chars: any): any;
    static fromReadableInput(input: any): any;
    constructor(target: any, { debug }?: {
        debug?: boolean | undefined;
    });
    debug: boolean;
    document: any;
    toString(): string;
    _log(message: any, ...args: any[]): void;
    _pretty(element: any): string;
    get focused(): any;
    type(input: any): Promise<void>;
    send(chars: any): Promise<void>;
    click(): Promise<void>;
    tab(): Promise<void>;
    enter(value: any): Promise<void>;
    escape(): Promise<void>;
    _sendKey(key: any, charCode: any, action: any): Promise<void>;
}

declare type LogFuncs = 'log' | 'warn' | 'error';
declare type AsyncLogCollector = () => Promise<void>;
declare type SyncLogCollector = () => void;
declare type LogCollector = AsyncLogCollector | SyncLogCollector;
declare type CollectedLogs<T extends LogFuncs> = {
    [key in T]: string[];
};
declare function withLogCollector(callback: AsyncLogCollector): Promise<CollectedLogs<LogFuncs>>;
declare function withLogCollector(callback: SyncLogCollector): CollectedLogs<LogFuncs>;
declare function withLogCollector<T extends LogFuncs>(logsToCollect: T[], callback: AsyncLogCollector): Promise<CollectedLogs<T>>;
declare function withLogCollector<T extends LogFuncs>(logsToCollect: T[], callback: SyncLogCollector): CollectedLogs<T>;

declare function renderWithEffects(nodes: ReactElement): Promise<RenderResult>;

export { AsyncLogCollector, CollectedLogs, Keyboard, LogCollector, LogFuncs, SyncLogCollector, renderWithEffects, withLogCollector };
