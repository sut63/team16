import privateExports__default, { ApiRegistry, defaultSystemIcons, useApi, alertApiRef, errorApiRef, storageApiRef, oauthRequestApiRef, appThemeApiRef, SessionState, identityApiRef, googleAuthApiRef, githubAuthApiRef, gitlabAuthApiRef, oktaAuthApiRef, oauth2ApiRef, useApiHolder, configApiRef } from '@backstage/core-api';
export * from '@backstage/core-api';
import React, { useState, useEffect, useRef, useCallback, useLayoutEffect, useMemo, Component as Component$6, Children, isValidElement, useContext, Fragment, forwardRef, createContext } from 'react';
import { BrowserRouter, MemoryRouter, Link as Link$2, NavLink } from 'react-router-dom';
import { makeStyles, Grid, Typography, Link as Link$1, LinearProgress, Snackbar, IconButton, Button as Button$1, useTheme, Tooltip, ClickAwayListener, ListItem, ListItemAvatar, ListItemText, Dialog, DialogTitle, DialogContent, List, DialogActions, Divider, ListItemIcon, withStyles, CardHeader, CardActions, Card, CardContent, Stepper, Step, StepLabel, StepContent, TableCell, createStyles, Table as Table$1, TableBody, TableRow, Popover, Tab, Tabs as Tabs$1, AppBar, Badge, TextField, styled, Collapse, Avatar, FormControl, FormHelperText, Chip } from '@material-ui/core';
import { makeStyles as makeStyles$1 } from '@material-ui/core/styles';
import { useNavigate } from 'react-router';
import { lightTheme, darkTheme } from '@backstage/theme';
import CloseIcon from '@material-ui/icons/Close';
import { Alert } from '@material-ui/lab';
import PropTypes from 'prop-types';
import SyntaxHighlighter from 'react-syntax-highlighter';
import { dark, docco } from 'react-syntax-highlighter/dist/cjs/styles/hljs';
import CopyIcon from '@material-ui/icons/FileCopy';
import { useObservable, useWindowSize, useLocalStorage } from 'react-use';
import classNames from 'classnames';
import Snackbar2 from '@material-ui/core/Snackbar';
import SnackbarContent2 from '@material-ui/core/SnackbarContent';
import IconButton2 from '@material-ui/core/IconButton';
import { createPortal } from 'react-dom';
import ChevronLeftIcon from '@material-ui/icons/ChevronLeft';
import ChevronRight2 from '@material-ui/icons/ChevronRight';
import ArrowIcon from '@material-ui/icons/ArrowForward';
import Box2 from '@material-ui/core/Box';
import { Circle, Line } from 'rc-progress';
import startCase2 from 'lodash/startCase';
import GroupIcon from '@material-ui/icons/Group';
import HelpIcon from '@material-ui/icons/Help';
import AddBox2 from '@material-ui/icons/AddBox';
import ArrowUpward2 from '@material-ui/icons/ArrowUpward';
import Check2 from '@material-ui/icons/Check';
import Clear2 from '@material-ui/icons/Clear';
import DeleteOutline2 from '@material-ui/icons/DeleteOutline';
import Edit2 from '@material-ui/icons/Edit';
import FilterList2 from '@material-ui/icons/FilterList';
import FirstPage2 from '@material-ui/icons/FirstPage';
import LastPage2 from '@material-ui/icons/LastPage';
import Remove2 from '@material-ui/icons/Remove';
import SaveAlt2 from '@material-ui/icons/SaveAlt';
import Search2 from '@material-ui/icons/Search';
import ViewColumn2 from '@material-ui/icons/ViewColumn';
import MTable, { MTableHeader, MTableToolbar } from 'material-table';
import NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';
import NavigateNextIcon from '@material-ui/icons/NavigateNext';
import { Sparklines, SparklinesLine } from 'react-sparklines';
import ErrorOutline2 from '@material-ui/icons/ErrorOutline';
import { Helmet } from 'react-helmet';
import clsx2 from 'clsx';
import DoubleArrowIcon from '@material-ui/icons/DoubleArrow';
import LightIcon from '@material-ui/icons/WbSunny';
import DarkIcon from '@material-ui/icons/Brightness2';
import AutoIcon from '@material-ui/icons/BrightnessAuto';
import Collapse2 from '@material-ui/core/Collapse';
import SignOutIcon from '@material-ui/icons/MeetingRoom';
import Star2 from '@material-ui/icons/Star';
import StarBorder2 from '@material-ui/icons/StarBorder';
import PowerButton from '@material-ui/icons/PowerSettingsNew';
import ExpandLess2 from '@material-ui/icons/ExpandLess';
import ExpandMore2 from '@material-ui/icons/ExpandMore';
import { useForm } from 'react-hook-form';
import isEmpty2 from 'lodash/isEmpty';

const img = require('./mic-drop.svg');

const useStyles = makeStyles({
  micDrop: {
    maxWidth: "60%",
    bottom: 10,
    right: 10,
    position: "absolute"
  }
});
const MicDrop = () => {
  const classes = useStyles();
  return /* @__PURE__ */ React.createElement("img", {
    src: img,
    className: classes.micDrop,
    alt: ""
  });
};

const useStyles$1 = makeStyles$1((theme2) => ({
  container: {
    padding: theme2.spacing(8)
  },
  title: {
    paddingBottom: theme2.spacing(5)
  },
  subtitle: {
    color: theme2.palette.textSubtle
  }
}));
const ErrorPage = ({status, statusMessage}) => {
  const classes = useStyles$1();
  const navigate = useNavigate();
  return /* @__PURE__ */ React.createElement(Grid, {
    container: true,
    className: classes.container
  }, /* @__PURE__ */ React.createElement(MicDrop, null), /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12,
    sm: 4
  }, /* @__PURE__ */ React.createElement(Typography, {
    variant: "body1",
    className: classes.subtitle
  }, "ERROR ", status, ": ", statusMessage), /* @__PURE__ */ React.createElement(Typography, {
    variant: "h2",
    className: classes.title
  }, "Looks like someone dropped the mic!"), /* @__PURE__ */ React.createElement(Typography, {
    variant: "h6"
  }, /* @__PURE__ */ React.createElement(Link$1, {
    "data-testid": "go-back-link",
    onClick: () => navigate(-1)
  }, "Go back"), "... or if you think this is a bug, please file an", " ", /* @__PURE__ */ React.createElement(Link$1, {
    href: "https://github.com/spotify/backstage/issues"
  }, "issue."))));
};

const Progress = (props) => {
  const [isVisible, setIsVisible] = useState(false);
  useEffect(() => {
    const handle = setTimeout(() => setIsVisible(true), 250);
    return () => clearTimeout(handle);
  }, []);
  return isVisible ? /* @__PURE__ */ React.createElement(LinearProgress, {
    ...props,
    "data-testid": "progress"
  }) : /* @__PURE__ */ React.createElement("div", {
    style: {display: "none"},
    "data-testid": "progress"
  });
};

const {PrivateAppImpl} = privateExports__default;
const defaultConfigLoader = async (runtimeConfigJson = "__APP_INJECTED_RUNTIME_CONFIG__") => {
  const appConfig = process.env.APP_CONFIG;
  if (!appConfig) {
    throw new Error("No static configuration provided");
  }
  if (!Array.isArray(appConfig)) {
    throw new Error("Static configuration has invalid format");
  }
  const configs = appConfig.slice();
  if (runtimeConfigJson !== "__app_injected_runtime_config__".toUpperCase()) {
    try {
      const data = JSON.parse(runtimeConfigJson);
      configs.unshift({data, context: "env"});
    } catch (error) {
      throw new Error(`Failed to load runtime configuration, ${error}`);
    }
  }
  return configs;
};
function createApp(options) {
  var _a, _b, _c, _d;
  const DefaultNotFoundPage = () => /* @__PURE__ */ React.createElement(ErrorPage, {
    status: "404",
    statusMessage: "PAGE NOT FOUND"
  });
  const DefaultBootErrorPage = ({step, error}) => {
    let message = "";
    if (step === "load-config") {
      message = `The configuration failed to load, someone should have a look at this error: ${error.message}`;
    }
    return /* @__PURE__ */ React.createElement(MemoryRouter, null, /* @__PURE__ */ React.createElement(ErrorPage, {
      status: "501",
      statusMessage: message
    }));
  };
  const apis = (_a = options == null ? void 0 : options.apis) != null ? _a : ApiRegistry.from([]);
  const icons = {...defaultSystemIcons, ...options == null ? void 0 : options.icons};
  const plugins = (_b = options == null ? void 0 : options.plugins) != null ? _b : [];
  const components = {
    NotFoundErrorPage: DefaultNotFoundPage,
    BootErrorPage: DefaultBootErrorPage,
    Progress: Progress,
    Router: BrowserRouter,
    ...options == null ? void 0 : options.components
  };
  const themes = (_c = options == null ? void 0 : options.themes) != null ? _c : [
    {
      id: "light",
      title: "Light Theme",
      variant: "light",
      theme: lightTheme
    },
    {
      id: "dark",
      title: "Dark Theme",
      variant: "dark",
      theme: darkTheme
    }
  ];
  const configLoader = (_d = options == null ? void 0 : options.configLoader) != null ? _d : defaultConfigLoader;
  const app = new PrivateAppImpl({
    apis,
    icons,
    plugins,
    components,
    themes,
    configLoader
  });
  app.verify();
  return app;
}

const AlertDisplay = () => {
  const [messages, setMessages] = useState([]);
  const alertApi = useApi(alertApiRef);
  useEffect(() => {
    const subscription = alertApi.alert$().subscribe((message) => setMessages((msgs) => msgs.concat(message)));
    return () => {
      subscription.unsubscribe();
    };
  }, [alertApi]);
  if (messages.length === 0) {
    return null;
  }
  const [firstMessage] = messages;
  const handleClose = () => {
    setMessages((msgs) => msgs.filter((msg) => msg !== firstMessage));
  };
  return /* @__PURE__ */ React.createElement(Snackbar, {
    open: true,
    message: firstMessage.message.toString(),
    anchorOrigin: {vertical: "top", horizontal: "center"}
  }, /* @__PURE__ */ React.createElement(Alert, {
    action: /* @__PURE__ */ React.createElement(IconButton, {
      color: "inherit",
      size: "small",
      onClick: handleClose,
      "data-testid": "error-button-close"
    }, /* @__PURE__ */ React.createElement(CloseIcon, null)),
    severity: firstMessage.severity
  }, firstMessage.message.toString()));
};

const Button = React.forwardRef((props, ref) => /* @__PURE__ */ React.createElement(Button$1, {
  ref,
  component: Link$2,
  ...props
}));

const defaultProps = {
  showLineNumbers: false
};
const CodeSnippet = (props) => {
  const {text, language, showLineNumbers} = {
    ...defaultProps,
    ...props
  };
  const theme2 = useTheme();
  const mode = theme2.palette.type === "dark" ? dark : docco;
  return /* @__PURE__ */ React.createElement(SyntaxHighlighter, {
    language,
    style: mode,
    showLineNumbers
  }, text);
};
CodeSnippet.propTypes = {
  text: PropTypes.string.isRequired,
  language: PropTypes.string.isRequired,
  showLineNumbers: PropTypes.bool
};

const useStyles$2 = makeStyles((theme2) => ({
  button: {
    "&:hover": {
      backgroundColor: theme2.palette.highlight,
      cursor: "pointer"
    }
  }
}));
const defaultProps$1 = {
  tooltipDelay: 1e3,
  tooltipText: "Text copied to clipboard"
};
const CopyTextButton = (props) => {
  const {text, tooltipDelay, tooltipText} = {
    ...defaultProps$1,
    ...props
  };
  const classes = useStyles$2(props);
  const errorApi = useApi(errorApiRef);
  const inputRef = useRef(null);
  const [open, setOpen] = useState(false);
  const handleCopyClick = (e) => {
    e.stopPropagation();
    setOpen(true);
    try {
      if (inputRef.current) {
        inputRef.current.select();
        document.execCommand("copy");
      }
    } catch (error) {
      errorApi.post(error);
    }
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("input", {
    ref: inputRef,
    type: "text",
    style: {position: "absolute", top: -9999, left: 9999},
    defaultValue: text
  }), /* @__PURE__ */ React.createElement(Tooltip, {
    id: "copy-test-tooltip",
    title: tooltipText,
    placement: "top",
    leaveDelay: tooltipDelay,
    onClose: () => setOpen(false),
    open
  }, /* @__PURE__ */ React.createElement(IconButton, {
    onClick: handleCopyClick,
    className: classes.button
  }, /* @__PURE__ */ React.createElement(CopyIcon, null))));
};
CopyTextButton.propTypes = {
  text: PropTypes.string.isRequired,
  tooltipDelay: PropTypes.number,
  tooltipText: PropTypes.string
};

const useStyles$3 = makeStyles((theme2) => ({
  root: {
    position: "relative",
    padding: theme2.spacing(0),
    marginBottom: theme2.spacing(6),
    marginTop: -theme2.spacing(3),
    display: "flex",
    flexFlow: "row nowrap",
    zIndex: "unset"
  },
  icon: {
    fontSize: 20
  },
  content: {
    width: "100%",
    maxWidth: "inherit"
  },
  message: {
    display: "flex",
    alignItems: "center"
  },
  info: {
    backgroundColor: theme2.palette.banner.info
  },
  error: {
    backgroundColor: theme2.palette.banner.error
  }
}));
const DismissableBanner = ({variant, message, id}) => {
  var _a;
  const classes = useStyles$3();
  const storageApi = useApi(storageApiRef);
  const notificationsStore = storageApi.forBucket("notifications");
  const rawDismissedBanners = (_a = notificationsStore.get("dismissedBanners")) != null ? _a : [];
  const [dismissedBanners, setDismissedBanners] = useState(new Set(rawDismissedBanners));
  const observedItems = useObservable(notificationsStore.observe$("dismissedBanners"));
  useEffect(() => {
    var _a2;
    if (observedItems == null ? void 0 : observedItems.newValue) {
      const currentValue = (_a2 = observedItems == null ? void 0 : observedItems.newValue) != null ? _a2 : [];
      setDismissedBanners(new Set(currentValue));
    }
  }, [observedItems == null ? void 0 : observedItems.newValue]);
  const handleClick = () => {
    notificationsStore.set("dismissedBanners", [...dismissedBanners, id]);
  };
  return /* @__PURE__ */ React.createElement(Snackbar2, {
    anchorOrigin: {vertical: "top", horizontal: "center"},
    open: !dismissedBanners.has(id),
    classes: {root: classes.root}
  }, /* @__PURE__ */ React.createElement(SnackbarContent2, {
    classes: {
      root: classNames(classes.content, classes[variant]),
      message: classes.message
    },
    message,
    action: [
      /* @__PURE__ */ React.createElement(IconButton2, {
        key: "dismiss",
        title: "Permanently dismiss this message",
        color: "inherit",
        onClick: handleClick
      }, /* @__PURE__ */ React.createElement(CloseIcon, {
        className: classes.icon
      }))
    ]
  }));
};

function createRootElement(id) {
  const rootContainer = document.createElement("div");
  rootContainer.setAttribute("id", id);
  return rootContainer;
}
function addRootElement(rootElem) {
  document.body.insertBefore(rootElem, document.body.lastElementChild.nextElementSibling);
}
function usePortal(id) {
  const rootElemRef = useRef(null);
  useEffect(function setupElement() {
    const existingParent = document.querySelector(`#${id}`);
    const parentElem = existingParent || createRootElement(id);
    if (!existingParent) {
      addRootElement(parentElem);
    }
    parentElem.appendChild(rootElemRef.current);
    return function removeElement() {
      rootElemRef.current.remove();
      if (parentElem.childNodes.length === -1) {
        parentElem.remove();
      }
    };
  }, [id]);
  function getRootElem() {
    if (!rootElemRef.current) {
      rootElemRef.current = document.createElement("div");
    }
    return rootElemRef.current;
  }
  return getRootElem();
}

const STATES_LOCAL_STORAGE_KEY = "core.calloutSeen";
function useCalloutStates() {
  const [states, setStates] = useState(() => {
    const raw = localStorage.getItem(STATES_LOCAL_STORAGE_KEY);
    return raw ? JSON.parse(raw) : {};
  });
  const setState = useCallback((key, value) => {
    const raw = localStorage.getItem(STATES_LOCAL_STORAGE_KEY);
    const oldStates = raw ? JSON.parse(raw) : {};
    const newStates = {...oldStates, [key]: value};
    setStates(newStates);
    localStorage.setItem(STATES_LOCAL_STORAGE_KEY, JSON.stringify(newStates));
  }, []);
  return {states, setState};
}
function useCalloutHasBeenSeen(featureId) {
  const {states, setState} = useCalloutStates();
  const markSeen = useCallback(() => {
    setState(featureId, true);
  }, [setState, featureId]);
  return {seen: states[featureId] === true, markSeen};
}
function useShowCallout(featureId) {
  const {seen, markSeen} = useCalloutHasBeenSeen(featureId);
  return {show: seen === false, hide: markSeen};
}

const useStyles$4 = makeStyles({
  "@keyframes pulsateSlightly": {
    "0%": {transform: "scale(1.0)"},
    "100%": {transform: "scale(1.1)"}
  },
  "@keyframes pulsateAndFade": {
    "0%": {transform: "scale(1.0)", opacity: 0.9},
    "100%": {transform: "scale(1.5)", opacity: 0}
  },
  featureWrapper: {
    position: "relative"
  },
  backdrop: {
    zIndex: 2e3,
    position: "fixed",
    overflow: "hidden",
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  },
  dot: {
    position: "absolute",
    backgroundColor: "transparent",
    borderRadius: "100%",
    border: "1px solid rgba(103, 146, 180, 0.98)",
    boxShadow: "0px 0px 0px 20000px rgba(0, 0, 0, 0.5)",
    zIndex: 2001,
    transformOrigin: "center center",
    animation: "$pulsateSlightly 1744ms 1.2s cubic-bezier(0.4, 0, 0.2, 1) alternate infinite"
  },
  pulseCircle: {
    width: "100%",
    height: "100%",
    backgroundColor: "transparent",
    borderRadius: "100%",
    border: "2px solid white",
    zIndex: 2001,
    transformOrigin: "center center",
    animation: "$pulsateAndFade 872ms 1.2s cubic-bezier(0.4, 0, 0.2, 1) infinite"
  },
  text: {
    position: "absolute",
    color: "white",
    zIndex: 2003
  }
});
const FeatureCalloutCircular = ({
  featureId,
  title,
  description,
  children
}) => {
  const {show, hide} = useShowCallout(featureId);
  const portalElement = usePortal("core.callout");
  const wrapperRef = useRef(null);
  const [placement, setPlacement] = useState();
  const classes = useStyles$4();
  const update = useCallback(() => {
    if (wrapperRef.current) {
      const wrapperBounds = wrapperRef.current.getBoundingClientRect();
      const longest = Math.max(wrapperBounds.width, wrapperBounds.height);
      const borderWidth = 800;
      const dotLeft = wrapperBounds.x - (longest - wrapperBounds.width) / 2 - borderWidth;
      const dotTop = wrapperBounds.y - (longest - wrapperBounds.height) / 2 - borderWidth;
      const dotSize = longest + 2 * borderWidth;
      const textWidth = 450;
      const textLeft = wrapperBounds.x + wrapperBounds.width / 2 - textWidth;
      const textTop = wrapperBounds.y - (longest - wrapperBounds.height) / 2 + longest + 20;
      setPlacement({
        dotLeft,
        dotTop,
        dotSize,
        borderWidth,
        textTop,
        textLeft,
        textWidth
      });
    }
  }, []);
  useEffect(() => {
    window.addEventListener("resize", update);
    window.addEventListener("scroll", update);
    return () => {
      window.removeEventListener("resize", update);
      window.removeEventListener("scroll", update);
    };
  }, [update]);
  useLayoutEffect(update, [wrapperRef.current, update]);
  if (!show) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
    className: classes.featureWrapper,
    ref: wrapperRef
  }, children), createPortal(/* @__PURE__ */ React.createElement("div", {
    className: classes.backdrop
  }, /* @__PURE__ */ React.createElement(ClickAwayListener, {
    onClickAway: hide
  }, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
    className: classes.dot,
    style: {
      left: placement == null ? void 0 : placement.dotLeft,
      top: placement == null ? void 0 : placement.dotTop,
      width: placement == null ? void 0 : placement.dotSize,
      height: placement == null ? void 0 : placement.dotSize,
      borderWidth: placement == null ? void 0 : placement.borderWidth
    },
    onClick: hide,
    onKeyDown: hide,
    role: "button",
    tabIndex: 0
  }, /* @__PURE__ */ React.createElement("div", {
    className: classes.pulseCircle
  })), /* @__PURE__ */ React.createElement("div", {
    className: classes.text,
    style: {
      left: placement == null ? void 0 : placement.textLeft,
      top: placement == null ? void 0 : placement.textTop,
      width: placement == null ? void 0 : placement.textWidth
    }
  }, /* @__PURE__ */ React.createElement(Typography, {
    variant: "h2",
    paragraph: true
  }, title), /* @__PURE__ */ React.createElement(Typography, null, description))))), portalElement));
};

const generateGradientStops = (themeType) => {
  const luminance = themeType === "dark" ? "16%" : "97%";
  return `
    hsl(0, 0%, ${luminance}) 0%,
    hsla(0, 0%, ${luminance}, 0.987) 8.1%,
    hsla(0, 0%, ${luminance}, 0.951) 15.5%,
    hsla(0, 0%, ${luminance}, 0.896) 22.5%,
    hsla(0, 0%, ${luminance}, 0.825) 29%,
    hsla(0, 0%, ${luminance}, 0.741) 35.3%,
    hsla(0, 0%, ${luminance}, 0.648) 41.2%,
    hsla(0, 0%, ${luminance}, 0.55) 47.1%,
    hsla(0, 0%, ${luminance}, 0.45) 52.9%,
    hsla(0, 0%, ${luminance}, 0.352) 58.8%,
    hsla(0, 0%, ${luminance}, 0.259) 64.7%,
    hsla(0, 0%, ${luminance}, 0.175) 71%,
    hsla(0, 0%, ${luminance}, 0.104) 77.5%,
    hsla(0, 0%, ${luminance}, 0.049) 84.5%,
    hsla(0, 0%, ${luminance}, 0.013) 91.9%,
    hsla(0, 0%, ${luminance}, 0) 100%
  `;
};
const fadeSize = 100;
const fadePadding = 10;
const useStyles$5 = makeStyles((theme) => ({
  root: {
    position: "relative",
    display: "flex",
    flexFlow: "row nowrap",
    alignItems: "center"
  },
  container: {
    overflow: "auto",
    scrollbarWidth: 0,
    "&::-webkit-scrollbar": {
      display: "none"
    }
  },
  fade: {
    position: "absolute",
    width: fadeSize,
    height: `calc(100% + ${fadePadding}px)`,
    transition: "opacity 300ms",
    pointerEvents: "none"
  },
  fadeLeft: {
    left: -fadePadding,
    background: `linear-gradient(90deg, ${generateGradientStops(theme.palette.type)})`
  },
  fadeRight: {
    right: -fadePadding,
    background: `linear-gradient(270deg, ${generateGradientStops(theme.palette.type)})`
  },
  fadeHidden: {
    opacity: 0
  },
  button: {
    position: "absolute"
  },
  buttonLeft: {
    left: -theme.spacing(2)
  },
  buttonRight: {
    right: -theme.spacing(2)
  }
}));
function useScrollDistance(ref) {
  const [[scrollLeft, scrollRight], setScroll] = React.useState([0, 0]);
  React.useLayoutEffect(() => {
    const el = ref.current;
    if (!el) {
      setScroll([0, 0]);
      return;
    }
    const handleUpdate = () => {
      const left = el.scrollLeft;
      const right = el.scrollWidth - el.offsetWidth - el.scrollLeft;
      setScroll([left, right]);
    };
    handleUpdate();
    el.addEventListener("scroll", handleUpdate);
    window.addEventListener("resize", handleUpdate);
    return () => {
      el.removeEventListener("scroll", handleUpdate);
      window.removeEventListener("resize", handleUpdate);
    };
  }, [ref]);
  return [scrollLeft, scrollRight];
}
function useSmoothScroll(ref, speed, minDistance) {
  const [scrollTarget, setScrollTarget] = React.useState(0);
  React.useLayoutEffect(() => {
    if (scrollTarget === 0) {
      return;
    }
    const startTime = performance.now();
    const id = requestAnimationFrame((frameTime) => {
      if (!ref.current) {
        return;
      }
      const frameDuration = frameTime - startTime;
      const scrollDistance = Math.abs(scrollTarget) * frameDuration / speed;
      const cappedScrollDistance = Math.max(minDistance, scrollDistance);
      const scrollAmount = cappedScrollDistance * Math.sign(scrollTarget);
      ref.current.scrollBy({left: scrollAmount});
      const newScrollTarget = scrollTarget - scrollAmount;
      if (Math.sign(scrollTarget) !== Math.sign(newScrollTarget)) {
        setScrollTarget(0);
      } else {
        setScrollTarget(newScrollTarget);
      }
    });
    return () => cancelAnimationFrame(id);
  }, [ref, scrollTarget, speed, minDistance]);
  return setScrollTarget;
}
const HorizontalScrollGrid = (props) => {
  const {
    scrollStep = 100,
    scrollSpeed = 50,
    minScrollDistance = 5,
    children,
    ...otherProps
  } = props;
  const classes = useStyles$5(props);
  const ref = React.useRef();
  const [scrollLeft, scrollRight] = useScrollDistance(ref);
  const setScrollTarget = useSmoothScroll(ref, scrollSpeed, minScrollDistance);
  const handleScrollClick = (forwards) => {
    const el = ref.current;
    if (!el) {
      return;
    }
    setScrollTarget(forwards ? scrollStep : -scrollStep);
  };
  return /* @__PURE__ */ React.createElement("div", {
    ...otherProps,
    className: classes.root
  }, /* @__PURE__ */ React.createElement(Grid, {
    container: true,
    direction: "row",
    wrap: "nowrap",
    className: classes.container,
    ref
  }, children), /* @__PURE__ */ React.createElement("div", {
    className: classNames(classes.fade, classes.fadeLeft, {
      [classes.fadeHidden]: scrollLeft === 0
    })
  }), /* @__PURE__ */ React.createElement("div", {
    className: classNames(classes.fade, classes.fadeRight, {
      [classes.fadeHidden]: scrollRight === 0
    })
  }), scrollLeft > 0 && /* @__PURE__ */ React.createElement(IconButton, {
    title: "Scroll Left",
    onClick: () => handleScrollClick(false),
    className: classNames(classes.button, classes.buttonLeft, {})
  }, /* @__PURE__ */ React.createElement(ChevronLeftIcon, null)), scrollRight > 0 && /* @__PURE__ */ React.createElement(IconButton, {
    title: "Scroll Right",
    onClick: () => handleScrollClick(true),
    className: classNames(classes.button, classes.buttonRight, {})
  }, /* @__PURE__ */ React.createElement(ChevronRight2, null)));
};

const useStyles$6 = makeStyles({
  alpha: {
    color: "#d00150",
    fontFamily: "serif",
    fontWeight: "normal",
    fontStyle: "italic"
  },
  beta: {
    color: "#4d65cc",
    fontFamily: "serif",
    fontWeight: "normal",
    fontStyle: "italic"
  }
});
const Lifecycle = (props) => {
  const classes = useStyles$6(props);
  const {shorthand, alpha} = props;
  return shorthand ? /* @__PURE__ */ React.createElement("span", {
    className: classes[alpha ? "alpha" : "beta"],
    style: {fontSize: "120%"}
  }, alpha ? /* @__PURE__ */ React.createElement(React.Fragment, null, "α") : /* @__PURE__ */ React.createElement(React.Fragment, null, "β")) : /* @__PURE__ */ React.createElement("span", {
    className: classes[alpha ? "alpha" : "beta"]
  }, alpha ? "Alpha" : "Beta");
};

const Link = React.forwardRef((props, ref) => /* @__PURE__ */ React.createElement(Link$1, {
  ref,
  component: Link$2,
  ...props
}));

const useItemStyles = makeStyles((theme) => ({
  root: {
    paddingLeft: theme.spacing(3)
  }
}));
const LoginRequestListItem = ({request, busy, setBusy}) => {
  const classes = useItemStyles();
  const [error, setError] = useState();
  const handleContinue = async () => {
    setBusy(true);
    try {
      await request.trigger();
    } catch (e) {
      setError(e);
    } finally {
      setBusy(false);
    }
  };
  const IconComponent = request.provider.icon;
  return /* @__PURE__ */ React.createElement(ListItem, {
    button: true,
    disabled: busy,
    onClick: handleContinue,
    classes: {root: classes.root}
  }, /* @__PURE__ */ React.createElement(ListItemAvatar, null, /* @__PURE__ */ React.createElement(IconComponent, {
    fontSize: "large"
  })), /* @__PURE__ */ React.createElement(ListItemText, {
    primary: request.provider.title,
    secondary: error && /* @__PURE__ */ React.createElement(Typography, {
      color: "error"
    }, error.message || "An unspecified error occurred")
  }));
};

const useStyles$7 = makeStyles((theme) => ({
  dialog: {
    paddingTop: theme.spacing(1)
  },
  title: {
    minWidth: 0
  },
  contentList: {
    padding: 0
  }
}));
const OAuthRequestDialog = () => {
  const classes = useStyles$7();
  const [busy, setBusy] = useState(false);
  const oauthRequestApi = useApi(oauthRequestApiRef);
  const requests = useObservable(useMemo(() => oauthRequestApi.authRequest$(), [oauthRequestApi]), []);
  const handleRejectAll = () => {
    requests.forEach((request) => request.reject());
  };
  return /* @__PURE__ */ React.createElement(Dialog, {
    open: Boolean(requests.length),
    fullWidth: true,
    maxWidth: "xs",
    classes: {paper: classes.dialog}
  }, /* @__PURE__ */ React.createElement(DialogTitle, {
    classes: {root: classes.title}
  }, "Login Required"), /* @__PURE__ */ React.createElement(DialogContent, {
    classes: {root: classes.contentList}
  }, /* @__PURE__ */ React.createElement(List, null, requests.map((request) => /* @__PURE__ */ React.createElement(LoginRequestListItem, {
    key: request.provider.title,
    request,
    busy,
    setBusy
  })))), /* @__PURE__ */ React.createElement(DialogActions, null, /* @__PURE__ */ React.createElement(Button$1, {
    onClick: handleRejectAll
  }, "Reject All")));
};

const ErrorBoundary = class ErrorBoundary2 extends Component$6 {
  constructor(props) {
    super(props);
    this.state = {
      error: void 0,
      errorInfo: void 0
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error(`ErrorBoundary, error: ${error}, info: ${errorInfo}`);
    this.setState({error, errorInfo});
  }
  render() {
    const {slackChannel} = this.props;
    const {error, errorInfo} = this.state;
    if (!errorInfo) {
      return this.props.children;
    }
    return /* @__PURE__ */ React.createElement(Error$1, {
      error,
      slackChannel
    });
  }
};
const Error$1 = ({slackChannel}) => {
  return /* @__PURE__ */ React.createElement("div", null, "Something went wrong here.", " ", slackChannel && /* @__PURE__ */ React.createElement(React.Fragment, null, "Please contact ", slackChannel, " for help."));
};

const useStyles$8 = makeStyles((theme2) => ({
  root: {
    maxWidth: "fit-content",
    padding: theme2.spacing(2, 2, 2, 2.5)
  },
  boxTitle: {
    margin: 0,
    color: theme2.palette.textSubtle
  },
  arrow: {
    color: theme2.palette.textSubtle
  }
}));
const BottomLink = ({link, title, onClick}) => {
  const classes = useStyles$8();
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(Link$1, {
    href: link,
    onClick,
    underline: "none"
  }, /* @__PURE__ */ React.createElement(ListItem, {
    className: classes.root
  }, /* @__PURE__ */ React.createElement(ListItemText, null, /* @__PURE__ */ React.createElement(Box2, {
    className: classes.boxTitle,
    fontWeight: "fontWeightBold",
    m: 1
  }, title)), /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(ArrowIcon, {
    className: classes.arrow
  })))));
};

const useStyles$9 = makeStyles((theme) => ({
  header: {
    padding: theme.spacing(2, 2, 2, 2.5)
  },
  noPadding: {
    padding: 0,
    "&:last-child": {
      paddingBottom: 0
    }
  }
}));
const BoldHeader = withStyles((theme) => ({
  title: {fontWeight: 700},
  subheader: {paddingTop: theme.spacing(1)}
}))(CardHeader);
const CardActionsTopRight = withStyles((theme) => ({
  root: {
    display: "inline-block",
    padding: theme.spacing(8, 8, 0, 0),
    float: "right"
  }
}))(CardActions);
const VARIANT_STYLES = {
  card: {
    flex: {
      display: "flex",
      flexDirection: "column"
    },
    fullHeight: {
      height: "100%"
    },
    height100: {
      display: "flex",
      flexDirection: "column",
      height: "calc(100% - 10px)",
      marginBottom: "10px"
    },
    contentheader: {
      height: "calc(100% - 40px)"
    },
    contentheadertabs: {
      height: "calc(100% - 97px)"
    },
    noShrink: {
      flexShrink: 0
    },
    minheight300: {
      minHeight: 300,
      overflow: "initial"
    }
  },
  cardContent: {
    fullHeight: {
      height: "calc(100% - 50px)"
    },
    height100: {
      height: "calc(100% - 50px)"
    },
    contentRow: {
      display: "flex",
      flexDirection: "row"
    }
  }
};
const InfoCard = ({
  title,
  subheader,
  divider,
  deepLink,
  slackChannel = "#backstage",
  variant,
  children,
  headerStyle,
  headerProps,
  actionsClassName,
  actions,
  cardClassName,
  actionsTopRight,
  className,
  noPadding
}) => {
  const classes = useStyles$9();
  let calculatedStyle = {};
  let calculatedCardStyle = {};
  if (variant) {
    const variants = variant.split(/[\s]+/g);
    variants.forEach((name) => {
      calculatedStyle = {
        ...calculatedStyle,
        ...VARIANT_STYLES.card[name]
      };
      calculatedCardStyle = {
        ...calculatedCardStyle,
        ...VARIANT_STYLES.cardContent[name]
      };
    });
  }
  return /* @__PURE__ */ React.createElement(Card, {
    style: calculatedStyle,
    className
  }, /* @__PURE__ */ React.createElement(ErrorBoundary, {
    slackChannel
  }, title && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(BoldHeader, {
    className: classes.header,
    title,
    subheader,
    style: {display: "inline-block", ...headerStyle},
    ...headerProps
  }), /* @__PURE__ */ React.createElement(Divider, null)), actionsTopRight && /* @__PURE__ */ React.createElement(CardActionsTopRight, null, actionsTopRight), divider && /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(CardContent, {
    className: classNames(cardClassName, {
      [classes.noPadding]: noPadding
    }),
    style: calculatedCardStyle
  }, children), actions && /* @__PURE__ */ React.createElement(CardActions, {
    className: actionsClassName
  }, actions), deepLink && /* @__PURE__ */ React.createElement(BottomLink, {
    ...deepLink
  })));
};

const useStyles$a = makeStyles((theme2) => ({
  root: {
    position: "relative",
    lineHeight: 0
  },
  overlay: {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -60%)",
    fontSize: 45,
    fontWeight: "bold",
    color: theme2.palette.textContrast
  },
  circle: {
    width: "80%",
    transform: "translate(10%, 0)"
  },
  colorUnknown: {}
}));
const defaultProps$2 = {
  fractional: true,
  inverse: false,
  unit: "%",
  max: 100
};
function getProgressColor(palette, value, inverse, max) {
  if (isNaN(value)) {
    return "#ddd";
  }
  const actualMax = max ? max : defaultProps$2.max;
  const actualValue = inverse ? actualMax - value : value;
  if (actualValue < actualMax / 3) {
    return palette.status.error;
  } else if (actualValue < actualMax * (2 / 3)) {
    return palette.status.warning;
  }
  return palette.status.ok;
}
const CircleProgress = (props) => {
  const classes = useStyles$a(props);
  const theme2 = useTheme();
  const {value, fractional, inverse, unit, max} = {
    ...defaultProps$2,
    ...props
  };
  const asPercentage = fractional ? Math.round(value * max) : value;
  const asActual = max !== 100 ? Math.round(value) : asPercentage;
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.root
  }, /* @__PURE__ */ React.createElement(Circle, {
    strokeLinecap: "butt",
    percent: asPercentage,
    strokeWidth: 12,
    trailWidth: 12,
    strokeColor: getProgressColor(theme2.palette, asActual, inverse, max),
    className: classes.circle
  }), /* @__PURE__ */ React.createElement("div", {
    className: classes.overlay
  }, isNaN(value) ? "N/A" : `${asActual}${unit}`));
};

const useStyles$b = makeStyles({
  root: {
    height: "100%",
    width: 250
  }
});
const ProgressCard = (props) => {
  const classes = useStyles$b(props);
  const {title, subheader, progress, deepLink, variant} = props;
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.root
  }, /* @__PURE__ */ React.createElement(InfoCard, {
    title,
    subheader,
    deepLink,
    variant
  }, /* @__PURE__ */ React.createElement(CircleProgress, {
    value: progress
  })));
};

const HorizontalProgress = ({value}) => {
  const theme2 = useTheme();
  if (isNaN(value)) {
    return null;
  }
  let percent = Math.round(value * 100 * 100) / 100;
  if (percent > 100) {
    percent = 100;
  }
  const strokeColor = getProgressColor(theme2.palette, percent, false, 100);
  return /* @__PURE__ */ React.createElement(Tooltip, {
    title: `${percent}%`
  }, /* @__PURE__ */ React.createElement(Line, {
    percent,
    strokeWidth: 4,
    trailWidth: 4,
    strokeColor
  }));
};

const noop = () => {
};
const VerticalStepperContext = React.createContext({
  stepperLength: 0,
  stepIndex: 0,
  setStepIndex: noop,
  stepHistory: [],
  setStepHistory: noop,
  onStepChange: noop
});
const SimpleStepper = ({
  children,
  elevated,
  onStepChange,
  activeStep = 0
}) => {
  const [stepIndex, setStepIndex] = useState(activeStep);
  const [stepHistory, setStepHistory] = useState([0]);
  useEffect(() => {
    setStepIndex(activeStep);
  }, [activeStep]);
  const steps = [];
  let endStep;
  Children.forEach(children, (child) => {
    if (isValidElement(child)) {
      if (child.props.end) {
        endStep = child;
      } else {
        steps.push(child);
      }
    }
  });
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(VerticalStepperContext.Provider, {
    value: {
      stepIndex,
      setStepIndex,
      stepHistory,
      setStepHistory,
      onStepChange,
      stepperLength: Children.count(children)
    }
  }, /* @__PURE__ */ React.createElement(Stepper, {
    activeStep: stepIndex,
    orientation: "vertical",
    elevation: elevated ? 2 : 0
  }, steps)), stepIndex >= Children.count(children) - 1 && endStep);
};

const useStyles$c = makeStyles((theme) => ({
  root: {
    marginTop: theme.spacing(3),
    "& button": {
      marginRight: theme.spacing(1)
    }
  }
}));
const RestartBtn = ({text, handleClick}) => /* @__PURE__ */ React.createElement(Button$1, {
  onClick: handleClick
}, text || "Reset");
const NextBtn = ({text, handleClick, disabled, last, stepIndex}) => /* @__PURE__ */ React.createElement(Button$1, {
  variant: "contained",
  color: "primary",
  disabled,
  "data-testid": `nextButton-${stepIndex}`,
  onClick: handleClick
}, text || (last ? "Finish" : "Next"));
const BackBtn = ({text, handleClick, disabled, stepIndex}) => /* @__PURE__ */ React.createElement(Button$1, {
  onClick: handleClick,
  "data-testid": `backButton-${stepIndex}`,
  disabled
}, text || "Back");
const SimpleStepperFooter = ({
  actions = {},
  children
}) => {
  const classes = useStyles$c();
  const {
    stepperLength,
    stepIndex,
    setStepIndex,
    stepHistory,
    setStepHistory,
    onStepChange
  } = useContext(VerticalStepperContext);
  const onChange = (newIndex, callback) => {
    if (callback) {
      callback();
    }
    if (onStepChange) {
      onStepChange(stepIndex, newIndex);
    }
    setStepIndex(newIndex);
  };
  const handleNext = () => {
    const newIndex = actions.nextStep ? actions.nextStep(stepIndex, stepperLength - 1) : stepIndex + 1;
    onChange(newIndex, actions.onNext);
    setStepHistory([...stepHistory, newIndex]);
  };
  const handleBack = () => {
    stepHistory.pop();
    onChange(stepHistory[stepHistory.length - 1], actions.onBack);
    setStepHistory([...stepHistory]);
  };
  const handleRestart = () => {
    onChange(0, actions.onRestart);
    setStepHistory([0]);
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.root
  }, [void 0, true].includes(actions.showBack) && stepIndex !== 0 && /* @__PURE__ */ React.createElement(BackBtn, {
    text: actions.backText,
    handleClick: handleBack,
    disabled: stepIndex === 0,
    stepIndex
  }), [void 0, true].includes(actions.showNext) && /* @__PURE__ */ React.createElement(NextBtn, {
    text: actions.nextText,
    handleClick: handleNext,
    disabled: !!stepperLength && stepIndex >= stepperLength || !!actions.canNext && !actions.canNext(),
    stepIndex
  }), actions.showRestart && stepIndex !== 0 && /* @__PURE__ */ React.createElement(RestartBtn, {
    text: actions.restartText,
    handleClick: handleRestart,
    stepIndex
  }), children);
};

const useStyles$d = makeStyles((theme) => ({
  end: {
    padding: theme.spacing(3)
  }
}));
const SimpleStepperStep = ({
  title,
  children,
  end,
  actions,
  ...muiProps
}) => {
  const classes = useStyles$d();
  return end ? /* @__PURE__ */ React.createElement("div", {
    className: classes.end
  }, /* @__PURE__ */ React.createElement(Typography, {
    variant: "h6"
  }, title), children, /* @__PURE__ */ React.createElement(SimpleStepperFooter, {
    actions: {...actions || {}, showNext: false}
  })) : /* @__PURE__ */ React.createElement(Step, {
    ...muiProps
  }, /* @__PURE__ */ React.createElement(StepLabel, null, /* @__PURE__ */ React.createElement(Typography, {
    variant: "h6"
  }, title)), /* @__PURE__ */ React.createElement(StepContent, null, children, /* @__PURE__ */ React.createElement(SimpleStepperFooter, {
    actions
  })));
};

const useStyles$e = makeStyles((theme2) => ({
  status: {
    fontWeight: 500,
    "&::before": {
      width: "0.7em",
      height: "0.7em",
      display: "inline-block",
      marginRight: 8,
      borderRadius: "50%",
      content: '""'
    }
  },
  ok: {
    "&::before": {
      backgroundColor: theme2.palette.status.ok
    }
  },
  warning: {
    "&::before": {
      backgroundColor: theme2.palette.status.warning
    }
  },
  error: {
    "&::before": {
      backgroundColor: theme2.palette.status.error
    }
  },
  pending: {
    "&::before": {
      backgroundColor: theme2.palette.status.pending
    }
  },
  running: {
    "&::before": {
      backgroundColor: theme2.palette.status.running
    }
  },
  aborted: {
    "&::before": {
      backgroundColor: theme2.palette.status.aborted
    }
  }
}));
const StatusOK = (props) => {
  const classes = useStyles$e(props);
  return /* @__PURE__ */ React.createElement("span", {
    className: classNames(classes.status, classes.ok),
    ...props
  });
};
const StatusWarning = (props) => {
  const classes = useStyles$e(props);
  return /* @__PURE__ */ React.createElement("span", {
    className: classNames(classes.status, classes.warning),
    ...props
  });
};
const StatusError = (props) => {
  const classes = useStyles$e(props);
  return /* @__PURE__ */ React.createElement("span", {
    className: classNames(classes.status, classes.error),
    ...props
  });
};
const StatusPending = (props) => {
  const classes = useStyles$e(props);
  return /* @__PURE__ */ React.createElement("span", {
    className: classNames(classes.status, classes.pending),
    "aria-label": "Status pending",
    ...props
  });
};
const StatusRunning = (props) => {
  const classes = useStyles$e(props);
  return /* @__PURE__ */ React.createElement("span", {
    className: classNames(classes.status, classes.running),
    "aria-label": "Status running",
    ...props
  });
};
const StatusAborted = (props) => {
  const classes = useStyles$e(props);
  return /* @__PURE__ */ React.createElement("span", {
    className: classNames(classes.status, classes.aborted),
    "aria-label": "Status aborted",
    ...props
  });
};

const tableTitleCellStyles = (theme) => createStyles({
  root: {
    fontWeight: "bolder",
    whiteSpace: "nowrap",
    paddingRight: theme.spacing(4),
    border: "0",
    verticalAlign: "top"
  }
});
const tableContentCellStyles = {
  root: {
    border: "0",
    verticalAlign: "top"
  }
};
const listStyles = (theme) => createStyles({
  root: {
    listStyle: "none",
    margin: theme.spacing(0, 0, -1, 0),
    padding: "0"
  }
});
const listItemStyles = (theme) => createStyles({
  root: {
    padding: theme.spacing(0, 0, 1, 0)
  },
  random: {}
});
const TitleCell = withStyles(tableTitleCellStyles)(TableCell);
const ContentCell = withStyles(tableContentCellStyles)(TableCell);
const MetadataTable = ({
  dense,
  children
}) => /* @__PURE__ */ React.createElement(Table$1, null, !dense && /* @__PURE__ */ React.createElement("colgroup", null, /* @__PURE__ */ React.createElement("col", {
  style: {width: "auto"}
}), /* @__PURE__ */ React.createElement("col", {
  style: {width: "100%"}
})), /* @__PURE__ */ React.createElement(TableBody, null, children));
const MetadataTableItem = ({
  title,
  children,
  ...rest
}) => /* @__PURE__ */ React.createElement(TableRow, null, title && /* @__PURE__ */ React.createElement(TitleCell, null, title), /* @__PURE__ */ React.createElement(ContentCell, {
  colSpan: title ? 1 : 2,
  ...rest
}, children));
const MetadataList = withStyles(listStyles)(({classes, children}) => /* @__PURE__ */ React.createElement("ul", {
  className: classes.root
}, children));
const MetadataListItem = withStyles(listItemStyles)(({classes, children}) => /* @__PURE__ */ React.createElement("li", {
  className: classes.root
}, children));

const listStyle = createStyles({
  root: {
    margin: "0 0",
    listStyleType: "none"
  }
});
const nestedListStyle = (theme) => createStyles({
  root: {
    ...listStyle.root,
    paddingLeft: theme.spacing(1)
  }
});
function renderList(list, nested) {
  const values = list.map((item, index) => /* @__PURE__ */ React.createElement(MetadataListItem, {
    key: index
  }, toValue(item)));
  return nested ? /* @__PURE__ */ React.createElement(StyledNestedList, null, values) : /* @__PURE__ */ React.createElement(StyledList, null, values);
}
function renderMap(map, nested, options) {
  const values = Object.keys(map).map((key) => {
    const value = toValue(map[key], true);
    const fmtKey = options && options.titleFormat ? options.titleFormat(key) : startCase2(key);
    return /* @__PURE__ */ React.createElement(MetadataListItem, {
      key
    }, `${fmtKey}: `, value);
  });
  return nested ? /* @__PURE__ */ React.createElement(StyledNestedList, null, values) : /* @__PURE__ */ React.createElement(StyledList, null, values);
}
function toValue(value, options, nested) {
  if (React.isValidElement(value)) {
    return /* @__PURE__ */ React.createElement(Fragment, null, value);
  }
  if (typeof value === "object" && !Array.isArray(value)) {
    return renderMap(value, options, nested);
  }
  if (Array.isArray(value)) {
    return renderList(value, nested);
  }
  return /* @__PURE__ */ React.createElement(Fragment, null, value);
}
function mapToItems(info, options) {
  return Object.keys(info).map((key) => /* @__PURE__ */ React.createElement(TableItem, {
    key,
    title: key,
    value: info[key],
    options
  }));
}
const StyledList = withStyles(listStyle)(({classes, children}) => /* @__PURE__ */ React.createElement(MetadataList, {
  classes
}, children));
const StyledNestedList = withStyles(nestedListStyle)(({classes, children}) => /* @__PURE__ */ React.createElement(MetadataList, {
  classes
}, children));
const ItemValue = ({value, options}) => /* @__PURE__ */ React.createElement(Fragment, null, toValue(value, options));
const TableItem = ({
  title,
  value,
  options
}) => {
  return /* @__PURE__ */ React.createElement(MetadataTableItem, {
    title: options && options.titleFormat ? options.titleFormat(title) : startCase2(title)
  }, /* @__PURE__ */ React.createElement(ItemValue, {
    value,
    options
  }));
};
class StructuredMetadataTable extends Component$6 {
  render() {
    const {metadata, dense, options} = this.props;
    const metadataItems = mapToItems(metadata, options || {});
    return /* @__PURE__ */ React.createElement(MetadataTable, {
      dense
    }, metadataItems);
  }
}

const useStyles$f = makeStyles((theme) => ({
  leftIcon: {
    marginRight: theme.spacing(1)
  },
  popoverList: {
    minWidth: 260,
    maxWidth: 320
  }
}));
const SupportButton = ({
  slackChannel = "#backstage",
  email = [],
  children
}) => {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);
  const classes = useStyles$f();
  const onClickHandler = (event) => {
    setAnchorEl(event.currentTarget);
    setPopoverOpen(true);
  };
  const popoverCloseHandler = () => {
    setPopoverOpen(false);
  };
  const slackChannels = Array.isArray(slackChannel) ? slackChannel : [slackChannel];
  const contactEmails = Array.isArray(email) ? email : [email];
  return /* @__PURE__ */ React.createElement(Fragment, null, /* @__PURE__ */ React.createElement(Button$1, {
    "data-testid": "support-button",
    color: "primary",
    onClick: onClickHandler
  }, /* @__PURE__ */ React.createElement(HelpIcon, {
    className: classes.leftIcon
  }), "Support"), /* @__PURE__ */ React.createElement(Popover, {
    "data-testid": "support-button-popover",
    open: popoverOpen,
    anchorEl,
    anchorOrigin: {
      vertical: "bottom",
      horizontal: "right"
    },
    transformOrigin: {
      vertical: "top",
      horizontal: "right"
    },
    onClose: popoverCloseHandler
  }, /* @__PURE__ */ React.createElement(List, {
    className: classes.popoverList
  }, React.Children.map(children, (child, i) => /* @__PURE__ */ React.createElement(ListItem, {
    alignItems: "flex-start",
    key: i
  }, child)), slackChannels && /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(GroupIcon, null)), /* @__PURE__ */ React.createElement(ListItemText, {
    disableTypography: true,
    primary: /* @__PURE__ */ React.createElement(Typography, null, "Support"),
    secondary: /* @__PURE__ */ React.createElement("div", null, slackChannels.map((channel, i) => /* @__PURE__ */ React.createElement(Link$1, {
      key: i
    }, channel)))
  })), contactEmails.length > 0 && /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(GroupIcon, null)), /* @__PURE__ */ React.createElement(ListItemText, {
    disableTypography: true,
    primary: /* @__PURE__ */ React.createElement(Typography, null, "Contact"),
    secondary: /* @__PURE__ */ React.createElement("div", null, contactEmails.map((em, index) => /* @__PURE__ */ React.createElement(Typography, {
      key: index
    }, /* @__PURE__ */ React.createElement(Link$1, null, em))))
  })))));
};

const tableIcons = {
  Add: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(AddBox2, {
    ...props,
    ref
  })),
  Check: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(Check2, {
    ...props,
    ref
  })),
  Clear: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(Clear2, {
    ...props,
    ref
  })),
  Delete: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(DeleteOutline2, {
    ...props,
    ref
  })),
  DetailPanel: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(ChevronRight2, {
    ...props,
    ref
  })),
  Edit: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(Edit2, {
    ...props,
    ref
  })),
  Export: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(SaveAlt2, {
    ...props,
    ref
  })),
  Filter: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(FilterList2, {
    ...props,
    ref
  })),
  FirstPage: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(FirstPage2, {
    ...props,
    ref
  })),
  LastPage: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(LastPage2, {
    ...props,
    ref
  })),
  NextPage: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(ChevronRight2, {
    ...props,
    ref
  })),
  PreviousPage: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(ChevronLeftIcon, {
    ...props,
    ref
  })),
  ResetSearch: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(Clear2, {
    ...props,
    ref
  })),
  Search: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(Search2, {
    ...props,
    ref
  })),
  SortArrow: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(ArrowUpward2, {
    ...props,
    ref
  })),
  ThirdStateCheck: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(Remove2, {
    ...props,
    ref
  })),
  ViewColumn: forwardRef((props, ref) => /* @__PURE__ */ React.createElement(ViewColumn2, {
    ...props,
    ref
  }))
};
const useHeaderStyles = makeStyles((theme2) => ({
  header: {
    padding: theme2.spacing(1, 2, 1, 2.5),
    borderTop: `1px solid ${theme2.palette.grey.A100}`,
    borderBottom: `1px solid ${theme2.palette.grey.A100}`,
    color: theme2.palette.textSubtle,
    fontWeight: theme2.typography.fontWeightBold,
    position: "static",
    wordBreak: "normal"
  }
}));
const useToolbarStyles = makeStyles((theme2) => ({
  root: {
    padding: theme2.spacing(3, 0, 2.5, 2.5)
  },
  title: {
    "& > h6": {
      fontWeight: "bold"
    }
  },
  searchField: {
    paddingRight: theme2.spacing(2)
  }
}));
function convertColumns(columns, theme2) {
  return columns.map((column) => {
    const headerStyle = {};
    const cellStyle = {};
    if (column.highlight) {
      headerStyle.color = theme2.palette.textContrast;
      cellStyle.fontWeight = theme2.typography.fontWeightBold;
    }
    return {
      ...column,
      headerStyle,
      cellStyle
    };
  });
}
function Table({
  columns,
  options,
  title,
  subtitle,
  ...props
}) {
  const headerClasses = useHeaderStyles();
  const toolbarClasses = useToolbarStyles();
  const theme2 = useTheme();
  const MTColumns = convertColumns(columns, theme2);
  const defaultOptions = {
    headerStyle: {
      textTransform: "uppercase"
    }
  };
  return /* @__PURE__ */ React.createElement(MTable, {
    components: {
      Header: (headerProps) => /* @__PURE__ */ React.createElement(MTableHeader, {
        classes: headerClasses,
        ...headerProps
      }),
      Toolbar: (toolbarProps) => /* @__PURE__ */ React.createElement(MTableToolbar, {
        classes: toolbarClasses,
        ...toolbarProps
      })
    },
    options: {...defaultOptions, ...options},
    columns: MTColumns,
    icons: tableIcons,
    title: /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, {
      variant: "h5"
    }, title), subtitle && /* @__PURE__ */ React.createElement(Typography, {
      color: "textSecondary",
      variant: "body1"
    }, subtitle)),
    ...props
  });
}

const useSubvalueCellStyles = makeStyles((theme2) => ({
  value: {
    marginBottom: "6px"
  },
  subvalue: {
    color: theme2.palette.textSubtle,
    fontWeight: "normal"
  }
}));
const SubvalueCell = ({value, subvalue}) => {
  const classes = useSubvalueCellStyles();
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
    className: classes.value
  }, value), /* @__PURE__ */ React.createElement("div", {
    className: classes.subvalue
  }, subvalue));
};

const chunkArray = (myArray, chunkSize) => {
  const results = [];
  while (myArray.length) {
    results.push(myArray.splice(0, chunkSize));
  }
  return results;
};

const TabPanel = (props) => {
  const {children, value, index, ...other} = props;
  return /* @__PURE__ */ React.createElement("div", {
    role: "tabpanel",
    hidden: value !== index,
    "aria-labelledby": `scrollable-auto-tab-${index}`,
    ...other
  }, value === index && /* @__PURE__ */ React.createElement(Box2, {
    p: 3
  }, children));
};

const useStyles$g = makeStyles(() => ({
  root: {
    color: "#6E6E6E",
    overflow: "visible",
    fontSize: "1.5rem",
    textAlign: "center",
    borderRadius: "50%",
    backgroundColor: "#E6E6E6",
    marginLeft: (props) => props.isNext ? "auto" : "0",
    marginRight: (props) => props.isNext ? "0" : "10px",
    "&:hover": {
      backgroundColor: "#E6E6E6",
      opacity: "1"
    }
  }
}));
const StyledIcon = (props) => {
  const classes = useStyles$g(props);
  const {ariaLabel, onClick} = props;
  return /* @__PURE__ */ React.createElement(IconButton, {
    onClick,
    className: classes.root,
    size: "small",
    disableRipple: true,
    disableFocusRipple: true,
    "aria-label": ariaLabel
  }, props.children);
};

const tabMarginLeft = (isFirstNav, isFirstIndex) => {
  if (isFirstIndex) {
    if (isFirstNav) {
      return "20px";
    }
    return "0";
  }
  return "40px";
};
const useStyles$h = makeStyles((theme2) => ({
  root: {
    textTransform: "none",
    height: "64px",
    fontWeight: theme2.typography.fontWeightBold,
    fontSize: theme2.typography.pxToRem(13),
    color: theme2.palette.textSubtle,
    marginLeft: (props) => tabMarginLeft(props.isFirstNav, props.isFirstIndex),
    width: "130px",
    minWidth: "130px",
    "&:hover": {
      outline: "none",
      backgroundColor: "transparent",
      color: theme2.palette.textSubtle
    }
  }
}));
const StyledTab = (props) => {
  const classes = useStyles$h(props);
  const {isFirstNav, isFirstIndex, ...rest} = props;
  return /* @__PURE__ */ React.createElement(Tab, {
    className: classes.root,
    disableRipple: true,
    ...rest
  });
};

const useStyles$i = makeStyles((theme2) => ({
  indicator: {
    display: "flex",
    justifyContent: "center",
    backgroundColor: theme2.palette.tabbar.indicator,
    height: "4px"
  },
  flexContainer: {
    alignItems: "center"
  },
  root: {
    "&:last-child": {
      marginLeft: "auto"
    }
  }
}));
const StyledTabs = (props) => {
  const classes = useStyles$i(props);
  return /* @__PURE__ */ React.createElement(Tabs$1, {
    classes,
    ...props,
    TabIndicatorProps: {children: /* @__PURE__ */ React.createElement("span", null)}
  });
};

const useStyles$j = makeStyles$1((theme2) => ({
  root: {
    flexGrow: 1,
    width: "100%"
  },
  styledTabs: {
    backgroundColor: theme2.palette.background.paper
  },
  appbar: {
    boxShadow: "none",
    backgroundColor: theme2.palette.background.paper,
    paddingLeft: "10px",
    paddingRight: "10px"
  }
}));
const Tabs = ({tabs}) => {
  const classes = useStyles$j();
  const [value, setValue] = useState([0, 0]);
  const [navIndex, setNavIndex] = useState(0);
  const [numberOfChunkedElement, setNumberOfChunkedElement] = useState(0);
  const [chunkedTabs, setChunkedTabs] = useState([[]]);
  const wrapper = useRef();
  const {width} = useWindowSize();
  const handleChange = (_, newValue) => {
    setValue([navIndex, newValue]);
  };
  const navigateToPrevChunk = () => {
    setNavIndex(navIndex - 1);
  };
  const navigateToNextChunk = () => {
    setNavIndex(navIndex + 1);
  };
  const hasNextNavIndex = () => navIndex + 1 < chunkedTabs.length;
  useEffect(() => {
    const padding = 20;
    const numberOfTabIcons = navIndex === 0 ? 1 : 2;
    const wrapperWidth = wrapper.current.offsetWidth - padding - numberOfTabIcons * 30;
    const flattenIndex = value[0] * numberOfChunkedElement + value[1];
    const newChunkedElementSize = Math.floor(wrapperWidth / 170);
    setNumberOfChunkedElement(newChunkedElementSize);
    setChunkedTabs(chunkArray([...tabs], newChunkedElementSize));
    setValue([
      Math.floor(flattenIndex / newChunkedElementSize),
      flattenIndex % newChunkedElementSize
    ]);
  }, [width, tabs]);
  const currentIndex = navIndex === value[0] ? value[1] : false;
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.root
  }, /* @__PURE__ */ React.createElement(AppBar, {
    ref: wrapper,
    className: classes.appbar,
    position: "static"
  }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(StyledTabs, {
    value: currentIndex,
    onChange: handleChange
  }, navIndex !== 0 && /* @__PURE__ */ React.createElement(StyledIcon, {
    onClick: navigateToPrevChunk,
    ariaLabel: "navigate-before"
  }, /* @__PURE__ */ React.createElement(NavigateBeforeIcon, null)), chunkedTabs[navIndex].map((tab, index) => /* @__PURE__ */ React.createElement(StyledTab, {
    value: index,
    isFirstIndex: index === 0,
    isFirstNav: navIndex === 0,
    key: index,
    icon: tab.icon || void 0,
    label: tab.label || void 0
  })), hasNextNavIndex() && /* @__PURE__ */ React.createElement(StyledIcon, {
    isNext: true,
    onClick: navigateToNextChunk,
    ariaLabel: "navigate-next"
  }, /* @__PURE__ */ React.createElement(NavigateNextIcon, null))))), currentIndex !== false ? chunkedTabs[navIndex].map((tab, index) => /* @__PURE__ */ React.createElement(TabPanel, {
    key: index,
    value: index,
    index: currentIndex
  }, tab.content)) : /* @__PURE__ */ React.createElement(TabPanel, {
    key: "panel_outside_chunked_array",
    value: value[1],
    index: value[1]
  }, chunkedTabs[value[0]][value[1]].content));
};

function color(data, theme2) {
  const lastNum = data[data.length - 1];
  if (!lastNum)
    return void 0;
  if (lastNum >= 0.9)
    return theme2.palette.status.ok;
  if (lastNum >= 0.5)
    return theme2.palette.status.warning;
  return theme2.palette.status.error;
}
const TrendLine = (props) => {
  const theme2 = useTheme();
  if (!props.data)
    return null;
  return /* @__PURE__ */ React.createElement(Sparklines, {
    width: 120,
    height: 30,
    min: 0,
    max: 1,
    ...props
  }, props.title && /* @__PURE__ */ React.createElement("title", null, props.title), /* @__PURE__ */ React.createElement(SparklinesLine, {
    color: color(props.data, theme2)
  }));
};

const useErrorOutlineStyles = makeStyles((theme2) => ({
  root: {
    marginRight: theme2.spacing(1),
    fill: theme2.palette.warningText
  }
}));
const ErrorOutlineStyled = () => {
  const classes = useErrorOutlineStyles();
  return /* @__PURE__ */ React.createElement(ErrorOutline2, {
    classes
  });
};
const useStyles$k = makeStyles((theme2) => ({
  message: {
    display: "flex",
    flexDirection: "column",
    padding: theme2.spacing(1.5),
    backgroundColor: theme2.palette.warningBackground,
    color: theme2.palette.warningText,
    verticalAlign: "middle"
  },
  header: {
    display: "flex",
    flexDirection: "row",
    marginBottom: theme2.spacing(1)
  },
  headerText: {
    color: theme2.palette.warningText
  },
  messageText: {
    color: theme2.palette.warningText
  }
}));
const WarningPanel = (props) => {
  const classes = useStyles$k(props);
  const {title, message, children} = props;
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.message
  }, /* @__PURE__ */ React.createElement("div", {
    className: classes.header
  }, /* @__PURE__ */ React.createElement(ErrorOutlineStyled, null), /* @__PURE__ */ React.createElement(Typography, {
    className: classes.headerText,
    variant: "subtitle1"
  }, title)), message && /* @__PURE__ */ React.createElement(Typography, {
    className: classes.messageText,
    variant: "body2"
  }, message), children);
};

const useStyles$l = makeStyles((theme) => ({
  root: {
    gridArea: "pageContent",
    minWidth: 0,
    paddingTop: theme.spacing(3),
    paddingBottom: theme.spacing(3),
    ...theme.mixins.gutters({})
  },
  stretch: {
    display: "flex",
    flexDirection: "column",
    flexGrow: 1
  },
  noPadding: {
    padding: 0
  }
}));
const Content = ({
  className,
  stretch,
  noPadding,
  children,
  ...props
}) => {
  const classes = useStyles$l();
  return /* @__PURE__ */ React.createElement("article", {
    ...props,
    className: classNames(classes.root, className, {
      [classes.stretch]: stretch,
      [classes.noPadding]: noPadding
    })
  }, children);
};

const useStyles$m = makeStyles((theme) => ({
  container: {
    width: "100%",
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "flex-end",
    alignItems: "center",
    marginBottom: theme.spacing(1)
  },
  leftItemsBox: {
    flex: "1 1 auto",
    marginBottom: theme.spacing(1),
    minWidth: 0,
    overflow: "visible"
  },
  rightItemsBox: {
    flex: "0 1 auto",
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    alignItems: "center",
    marginLeft: theme.spacing(1),
    marginBottom: theme.spacing(1),
    minWidth: 0,
    overflow: "visible"
  },
  description: {},
  title: {
    display: "inline-flex"
  }
}));
const DefaultTitle = ({
  title = "Unknown page",
  className
}) => /* @__PURE__ */ React.createElement(Typography, {
  variant: "h4",
  className,
  "data-testid": "header-title"
}, title);
const ContentHeader = ({
  description,
  title,
  titleComponent: TitleComponent = void 0,
  children
}) => {
  const classes = useStyles$m();
  const renderedTitle = TitleComponent ? /* @__PURE__ */ React.createElement(TitleComponent, null) : /* @__PURE__ */ React.createElement(DefaultTitle, {
    title,
    className: classes.title
  });
  return /* @__PURE__ */ React.createElement(Fragment, null, /* @__PURE__ */ React.createElement(Helmet, {
    title
  }), /* @__PURE__ */ React.createElement("div", {
    className: classes.container
  }, /* @__PURE__ */ React.createElement("div", {
    className: classes.leftItemsBox
  }, renderedTitle, description && /* @__PURE__ */ React.createElement(Typography, {
    className: classes.description,
    variant: "body2"
  }, description)), /* @__PURE__ */ React.createElement("div", {
    className: classes.rightItemsBox
  }, children)));
};

const gradients = {
  darkGrey: {
    colors: ["#171717", "#383838"],
    waveColor: "#757575",
    opacity: ["1.0", "0.0"]
  },
  marineBlue: {
    colors: ["#00759A", "#004EAC"],
    waveColor: "#BDDBFF",
    opacity: ["0.72", "0.0"]
  },
  veryBlue: {
    colors: ["#0B2B9C", "#311288"],
    waveColor: "#8960FD",
    opacity: ["0.72", "0.0"]
  },
  rubyRed: {
    colors: ["#A4284B", "#8D1134"],
    waveColor: "#FFBFF5",
    opacity: ["0.28", "0.10"]
  },
  toastyOrange: {
    colors: ["#CC3707", "#9A2500"],
    waveColor: "#FF784E",
    opacity: ["0.72", "0.0"]
  },
  purpleSky: {
    colors: ["#AF29F8", "#4100F4"],
    waveColor: "#AF29F8",
    opacity: ["0.72", "0.0"]
  },
  eveningSea: {
    colors: ["#00FFF2", "#035355"],
    waveColor: "",
    opacity: ["0.72", "0.0"]
  },
  teal: {
    colors: ["#005E4D", "#004E40"],
    waveColor: "#9BF0E1",
    opacity: ["0.72", "0.0"]
  }
};
const pageTheme = {
  home: {
    gradient: gradients.teal
  },
  documentation: {
    gradient: gradients.eveningSea
  },
  tool: {
    gradient: gradients.purpleSky
  },
  service: {
    gradient: gradients.marineBlue
  },
  website: {
    gradient: gradients.veryBlue
  },
  library: {
    gradient: gradients.rubyRed
  },
  other: {
    gradient: gradients.darkGrey
  },
  app: {
    gradient: gradients.toastyOrange
  }
};

const Theme = React.createContext(pageTheme.home);
const useStyles$n = makeStyles(() => ({
  root: {
    display: "grid",
    gridTemplateAreas: "'pageHeader pageHeader pageHeader' 'pageSubheader pageSubheader pageSubheader' 'pageNav pageContent pageSidebar'",
    gridTemplateRows: "auto auto 1fr",
    gridTemplateColumns: "auto 1fr auto",
    minHeight: "100vh"
  }
}));
const Page = ({theme = pageTheme.home, children}) => {
  const classes = useStyles$n();
  return /* @__PURE__ */ React.createElement(Theme.Provider, {
    value: theme
  }, /* @__PURE__ */ React.createElement("div", {
    className: classes.root
  }, children));
};

const useStyles$o = makeStyles({
  wave: {
    position: "absolute",
    height: "100%",
    width: "100%",
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    zIndex: -1
  }
});
const Waves = ({theme}) => {
  const classes = useStyles$o();
  const [backgroundColor1, backgroundColor2] = theme.gradient.colors;
  const waveColor = theme.gradient.waveColor;
  const [opacityStart, opacityStop] = theme.gradient.opacity;
  return /* @__PURE__ */ React.createElement("svg", {
    viewBox: "0 0 1440 94",
    preserveAspectRatio: "xMinYMin slice",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    className: classes.wave,
    "data-testid": "wave-svg"
  }, /* @__PURE__ */ React.createElement("rect", {
    width: "1440",
    height: "94",
    fill: "url(#headerGradient)"
  }), /* @__PURE__ */ React.createElement("g", {
    opacity: "0.8"
  }, /* @__PURE__ */ React.createElement("mask", {
    id: "mask0",
    "mask-type": "alpha",
    maskUnits: "userSpaceOnUse",
    x: "0",
    y: "0",
    width: "1440",
    height: "94"
  }, /* @__PURE__ */ React.createElement("rect", {
    width: "1440",
    height: "94",
    fill: "#1F8A77"
  })), /* @__PURE__ */ React.createElement("g", {
    mask: "url(#mask0)"
  }, /* @__PURE__ */ React.createElement("path", {
    d: "M710.947 14.3685C605.39 154.457 195.464 165.759 92 154.301V210.649L2330 287V222.126C1516.52 222.126 1394.17 80.1091 1161.6 -40.9544C926.122 -163.528 768.278 -61.7182 710.947 14.3685Z",
    fill: "url(#paint1_linear)"
  }), /* @__PURE__ */ React.createElement("path", {
    d: "M1163.25 124.34C1058.49 -16.113 651.678 -27.4441 549 -15.9565V-72.4504L2770 -149V-83.9579C1962.69 -83.9579 1841.28 58.4283 1610.47 179.806C1376.79 302.698 1220.14 200.624 1163.25 124.34Z",
    fill: "url(#paint2_linear)"
  }), /* @__PURE__ */ React.createElement("path", {
    d: "M-104.701 -5.00477C-224.644 62.3106 -690.435 67.7413 -808 62.2356V89.3117L1735 126V94.827C810.651 94.827 671.63 26.5849 407.363 -31.5885C139.798 -90.4876 -39.557 -41.5659 -104.701 -5.00477Z",
    fill: "url(#paint3_linear)"
  }), /* @__PURE__ */ React.createElement("path", {
    d: "M-247.511 -32.6315C-338.493 107.457 -691.821 118.759 -781 107.301V163.649L1148 240V175.126C446.833 175.126 341.378 33.1091 140.917 -87.9544C-62.0447 -210.528 -198.095 -108.718 -247.511 -32.6315Z",
    fill: "url(#paint4_linear)"
  }))), /* @__PURE__ */ React.createElement("defs", null, /* @__PURE__ */ React.createElement("linearGradient", {
    id: "headerGradient"
  }, /* @__PURE__ */ React.createElement("stop", {
    offset: "0%",
    stopColor: backgroundColor1
  }), /* @__PURE__ */ React.createElement("stop", {
    offset: "100",
    stopColor: backgroundColor2
  })), /* @__PURE__ */ React.createElement("linearGradient", {
    id: "paint0_linear",
    x1: "7.21415e-07",
    y1: "61",
    x2: "1649",
    y2: "59.5001",
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React.createElement("stop", {
    stopColor: waveColor,
    stopOpacity: opacityStart
  }), /* @__PURE__ */ React.createElement("stop", {
    offset: "1",
    stopColor: waveColor,
    stopOpacity: opacityStop
  })), /* @__PURE__ */ React.createElement("linearGradient", {
    id: "paint1_linear",
    x1: "1318.25",
    y1: "-285.884",
    x2: "1311.42",
    y2: "241.925",
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React.createElement("stop", {
    stopColor: waveColor,
    stopOpacity: opacityStart
  }), /* @__PURE__ */ React.createElement("stop", {
    offset: "1",
    stopColor: waveColor,
    stopOpacity: opacityStop
  })), /* @__PURE__ */ React.createElement("linearGradient", {
    id: "paint2_linear",
    x1: "1765.93",
    y1: "425.372",
    x2: "1759.02",
    y2: "-103.806",
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React.createElement("stop", {
    stopColor: waveColor,
    stopOpacity: opacityStart
  }), /* @__PURE__ */ React.createElement("stop", {
    offset: "1",
    stopColor: waveColor,
    stopOpacity: opacityStop
  })), /* @__PURE__ */ React.createElement("linearGradient", {
    id: "paint3_linear",
    x1: "585.365",
    y1: "-149.282",
    x2: "583.977",
    y2: "104.375",
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React.createElement("stop", {
    stopColor: waveColor,
    stopOpacity: opacityStart
  }), /* @__PURE__ */ React.createElement("stop", {
    offset: "1",
    stopColor: waveColor,
    stopOpacity: opacityStop
  })), /* @__PURE__ */ React.createElement("linearGradient", {
    id: "paint4_linear",
    x1: "275.941",
    y1: "-332.884",
    x2: "268.016",
    y2: "194.894",
    gradientUnits: "userSpaceOnUse"
  }, /* @__PURE__ */ React.createElement("stop", {
    stopColor: waveColor,
    stopOpacity: opacityStart
  }), /* @__PURE__ */ React.createElement("stop", {
    offset: "1",
    stopColor: waveColor,
    stopOpacity: opacityStop
  }))));
};

const useStyles$p = makeStyles((theme2) => ({
  header: {
    gridArea: "pageHeader",
    padding: theme2.spacing(3),
    minHeight: 118,
    width: "100%",
    boxShadow: "0 0 8px 3px rgba(20, 20, 20, 0.3)",
    position: "relative",
    zIndex: 100,
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "flex-end",
    alignItems: "center"
  },
  leftItemsBox: {
    flex: "1 1 auto"
  },
  rightItemsBox: {
    flex: "0 1 auto",
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    alignItems: "center",
    marginRight: theme2.spacing(1)
  },
  title: {
    color: theme2.palette.bursts.fontColor,
    lineHeight: "1.0em",
    wordBreak: "break-all",
    fontSize: "calc(24px + 6 * ((100vw - 320px) / 680))",
    marginBottom: theme2.spacing(1)
  },
  subtitle: {
    color: "rgba(255, 255, 255, 0.8)",
    lineHeight: "1.0em"
  },
  type: {
    textTransform: "uppercase",
    fontSize: 11,
    opacity: 0.8,
    marginBottom: theme2.spacing(1),
    color: theme2.palette.bursts.fontColor
  }
}));
const TypeFragment = ({type, typeLink, classes}) => {
  if (!type) {
    return null;
  }
  if (!typeLink) {
    return /* @__PURE__ */ React.createElement(Typography, {
      className: classes.type
    }, type);
  }
  return /* @__PURE__ */ React.createElement(Typography, {
    className: classes.type
  }, type);
};
const TitleFragment = ({
  pageTitle,
  classes,
  tooltip
}) => {
  const FinalTitle = /* @__PURE__ */ React.createElement(Typography, {
    className: classes.title,
    variant: "h4"
  }, pageTitle);
  if (!tooltip) {
    return FinalTitle;
  }
  return /* @__PURE__ */ React.createElement(Tooltip, {
    title: tooltip,
    placement: "top-start"
  }, FinalTitle);
};
const SubtitleFragment = ({classes, subtitle}) => {
  if (!subtitle) {
    return null;
  }
  if (typeof subtitle !== "string") {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, subtitle);
  }
  return /* @__PURE__ */ React.createElement(Typography, {
    className: classes.subtitle,
    variant: "subtitle2"
  }, subtitle);
};
const Header = ({
  children,
  pageTitleOverride,
  style,
  subtitle,
  title,
  tooltip,
  type,
  typeLink
}) => {
  const classes = useStyles$p();
  const documentTitle = pageTitleOverride || title;
  const pageTitle = title || pageTitleOverride;
  const titleTemplate = `${documentTitle} | %s | Backstage`;
  const defaultTitle = `${documentTitle} | Backstage`;
  return /* @__PURE__ */ React.createElement(Fragment, null, /* @__PURE__ */ React.createElement(Helmet, {
    titleTemplate,
    defaultTitle
  }), /* @__PURE__ */ React.createElement(Theme.Consumer, null, (theme2) => /* @__PURE__ */ React.createElement("header", {
    style,
    className: classes.header
  }, /* @__PURE__ */ React.createElement(Waves, {
    theme: theme2
  }), /* @__PURE__ */ React.createElement("div", {
    className: classes.leftItemsBox
  }, /* @__PURE__ */ React.createElement(TypeFragment, {
    classes,
    type,
    typeLink
  }), /* @__PURE__ */ React.createElement(TitleFragment, {
    classes,
    pageTitle,
    tooltip
  }), /* @__PURE__ */ React.createElement(SubtitleFragment, {
    classes,
    subtitle
  })), /* @__PURE__ */ React.createElement("div", {
    className: classes.rightItemsBox
  }, children))));
};

const useStyles$q = makeStyles((theme) => ({
  root: {
    textAlign: "left",
    margin: theme.spacing(2),
    display: "inline-block"
  },
  label: {
    color: "#FFFFFF",
    fontWeight: "bold",
    lineHeight: "16px",
    letterSpacing: 0,
    fontSize: 14,
    height: "16px",
    marginBottom: 2
  },
  value: {
    color: "rgba(255, 255, 255, 0.8)",
    lineHeight: "16px",
    fontSize: 14,
    height: "16px"
  }
}));
const HeaderLabelContent = ({
  value,
  className
}) => /* @__PURE__ */ React.createElement(Typography, {
  className
}, value);
const HeaderLabel = ({label, value, url}) => {
  const classes = useStyles$q();
  const content = /* @__PURE__ */ React.createElement(HeaderLabelContent, {
    className: classes.value,
    value: value || "<Unknown>"
  });
  return /* @__PURE__ */ React.createElement("span", {
    className: classes.root
  }, /* @__PURE__ */ React.createElement(Typography, {
    className: classes.label
  }, label), url ? /* @__PURE__ */ React.createElement(Link$1, {
    href: url
  }, content) : content);
};

const timeFormat = {hour: "2-digit", minute: "2-digit"};
const utcOptions = {timeZone: "UTC", ...timeFormat};
const nycOptions = {timeZone: "America/New_York", ...timeFormat};
const tyoOptions = {timeZone: "Asia/Tokyo", ...timeFormat};
const stoOptions = {timeZone: "Europe/Stockholm", ...timeFormat};
const defaultTimes = {
  timeNY: "",
  timeUTC: "",
  timeTYO: "",
  timeSTO: ""
};
function getTimes() {
  const d = new Date();
  const lang = window.navigator.language;
  const timeNY = d.toLocaleTimeString(lang, nycOptions);
  const timeUTC = d.toLocaleTimeString(lang, utcOptions);
  const timeTYO = d.toLocaleTimeString(lang, tyoOptions);
  const timeSTO = d.toLocaleTimeString(lang, stoOptions);
  return {timeNY, timeUTC, timeTYO, timeSTO};
}
const HomepageTimer = () => {
  const [{timeNY, timeUTC, timeTYO, timeSTO}, setTimes] = React.useState(defaultTimes);
  React.useEffect(() => {
    setTimes(getTimes());
    const intervalId = setInterval(() => {
      setTimes(getTimes());
    }, 1e3);
    return () => {
      clearInterval(intervalId);
    };
  }, []);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(HeaderLabel, {
    label: "NYC",
    value: timeNY
  }), /* @__PURE__ */ React.createElement(HeaderLabel, {
    label: "UTC",
    value: timeUTC
  }), /* @__PURE__ */ React.createElement(HeaderLabel, {
    label: "STO",
    value: timeSTO
  }), /* @__PURE__ */ React.createElement(HeaderLabel, {
    label: "TYO",
    value: timeTYO
  }));
};

const drawerWidthClosed = 72;
const iconPadding = 24;
const userBadgePadding = 18;
const sidebarConfig = {
  drawerWidthClosed,
  drawerWidthOpen: 224,
  defaultOpenDelayMs: 300,
  defaultCloseDelayMs: 0,
  defaultFadeDuration: 200,
  logoHeight: 32,
  iconContainerWidth: drawerWidthClosed,
  iconSize: drawerWidthClosed - iconPadding * 2,
  iconPadding,
  selectedIndicatorWidth: 3,
  userBadgePadding,
  userBadgeDiameter: drawerWidthClosed - userBadgePadding * 2
};
const SIDEBAR_INTRO_LOCAL_STORAGE = "@backstage/core/sidebar-intro-dismissed";
const SidebarContext = createContext({
  isOpen: false
});

var LocalStorageKeys;
(function(LocalStorageKeys2) {
  LocalStorageKeys2["SIDEBAR_PIN_STATE"] = "sidebarPinState";
})(LocalStorageKeys || (LocalStorageKeys = {}));
const LocalStorage = {
  getSidebarPinState() {
    let value;
    try {
      value = JSON.parse(window.localStorage.getItem(LocalStorageKeys.SIDEBAR_PIN_STATE) || "false");
    } catch {
      return false;
    }
    return !!value;
  },
  setSidebarPinState(state) {
    return window.localStorage.setItem(LocalStorageKeys.SIDEBAR_PIN_STATE, JSON.stringify(state));
  }
};

const useStyles$r = makeStyles({
  root: {
    width: "100%",
    minHeight: "100%",
    transition: "padding-left 0.1s ease-out",
    paddingLeft: ({isPinned}) => isPinned ? sidebarConfig.drawerWidthOpen : sidebarConfig.drawerWidthClosed
  }
});
const SidebarPinStateContext = createContext({
  isPinned: false,
  toggleSidebarPinState: () => {
  }
});
const SidebarPage = (props) => {
  const [isPinned, setIsPinned] = useState(LocalStorage.getSidebarPinState());
  useEffect(() => {
    LocalStorage.setSidebarPinState(isPinned);
  }, [isPinned]);
  const toggleSidebarPinState = () => setIsPinned(!isPinned);
  const classes = useStyles$r({isPinned});
  return /* @__PURE__ */ React.createElement(SidebarPinStateContext.Provider, {
    value: {
      isPinned,
      toggleSidebarPinState
    }
  }, /* @__PURE__ */ React.createElement("div", {
    className: classes.root
  }, props.children));
};

const useStyles$s = makeStyles((theme2) => ({
  root: {
    zIndex: 1e3,
    position: "relative",
    overflow: "visible",
    width: theme2.spacing(7) + 1
  },
  drawer: {
    display: "flex",
    flexFlow: "column nowrap",
    alignItems: "flex-start",
    position: "fixed",
    left: 0,
    top: 0,
    bottom: 0,
    padding: 0,
    background: theme2.palette.sidebar,
    overflowX: "hidden",
    width: sidebarConfig.drawerWidthClosed,
    transition: theme2.transitions.create("width", {
      easing: theme2.transitions.easing.sharp,
      duration: theme2.transitions.duration.shortest
    }),
    "& > *": {
      flexShrink: 0
    }
  },
  drawerOpen: {
    width: sidebarConfig.drawerWidthOpen,
    transition: theme2.transitions.create("width", {
      easing: theme2.transitions.easing.sharp,
      duration: theme2.transitions.duration.shorter
    })
  },
  drawerPeek: {
    width: sidebarConfig.drawerWidthClosed + 4
  }
}));
var State;
(function(State2) {
  State2[State2["Closed"] = 0] = "Closed";
  State2[State2["Peek"] = 1] = "Peek";
  State2[State2["Open"] = 2] = "Open";
})(State || (State = {}));
const Sidebar = ({
  openDelayMs = sidebarConfig.defaultOpenDelayMs,
  closeDelayMs = sidebarConfig.defaultCloseDelayMs,
  children
}) => {
  const classes = useStyles$s();
  const [state, setState] = useState(0);
  const hoverTimerRef = useRef();
  const {isPinned} = useContext(SidebarPinStateContext);
  const handleOpen = () => {
    if (isPinned) {
      return;
    }
    if (hoverTimerRef.current) {
      clearTimeout(hoverTimerRef.current);
      hoverTimerRef.current = void 0;
    }
    if (state !== 2) {
      hoverTimerRef.current = window.setTimeout(() => {
        hoverTimerRef.current = void 0;
        setState(2);
      }, openDelayMs);
      setState(1);
    }
  };
  const handleClose = () => {
    if (isPinned) {
      return;
    }
    if (hoverTimerRef.current) {
      clearTimeout(hoverTimerRef.current);
      hoverTimerRef.current = void 0;
    }
    if (state === 1) {
      setState(0);
    } else if (state === 2) {
      hoverTimerRef.current = window.setTimeout(() => {
        hoverTimerRef.current = void 0;
        setState(0);
      }, closeDelayMs);
    }
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.root,
    onMouseEnter: handleOpen,
    onFocus: handleOpen,
    onMouseLeave: handleClose,
    onBlur: handleClose,
    "data-testid": "sidebar-root"
  }, /* @__PURE__ */ React.createElement(SidebarContext.Provider, {
    value: {
      isOpen: state === 2 || isPinned
    }
  }, /* @__PURE__ */ React.createElement("div", {
    className: clsx2(classes.drawer, {
      [classes.drawerPeek]: state === 1,
      [classes.drawerOpen]: state === 2 || isPinned
    })
  }, children)));
};

const useStyles$t = makeStyles((theme) => {
  const {
    selectedIndicatorWidth,
    drawerWidthClosed,
    drawerWidthOpen,
    iconContainerWidth,
    iconSize
  } = sidebarConfig;
  return {
    root: {
      color: "#b5b5b5",
      display: "flex",
      flexFlow: "row nowrap",
      alignItems: "center",
      height: 48,
      cursor: "pointer"
    },
    closed: {
      width: drawerWidthClosed,
      justifyContent: "center"
    },
    open: {
      width: drawerWidthOpen
    },
    label: {
      fontWeight: "bold",
      whiteSpace: "nowrap",
      lineHeight: "auto",
      flex: "3 1 auto",
      width: "110px",
      overflow: "hidden",
      "text-overflow": "ellipsis"
    },
    iconContainer: {
      boxSizing: "border-box",
      height: "100%",
      width: iconContainerWidth,
      marginRight: -theme.spacing(2),
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    icon: {
      width: iconSize,
      height: iconSize
    },
    searchRoot: {
      marginBottom: 12
    },
    searchField: {
      color: "#b5b5b5",
      fontWeight: "bold",
      fontSize: theme.typography.fontSize
    },
    searchContainer: {
      width: drawerWidthOpen - iconContainerWidth
    },
    secondaryAction: {
      width: theme.spacing(6),
      textAlign: "center",
      marginRight: theme.spacing(1)
    },
    selected: {
      "&$root": {
        borderLeft: `solid ${selectedIndicatorWidth}px #9BF0E1`,
        color: "#ffffff"
      },
      "&$closed": {
        width: drawerWidthClosed - selectedIndicatorWidth
      },
      "& $iconContainer": {
        marginLeft: -selectedIndicatorWidth
      }
    }
  };
});
const SidebarItem = ({
  icon: Icon,
  text,
  to,
  hasNotifications = false,
  onClick,
  children
}) => {
  const classes = useStyles$t();
  const {isOpen} = useContext(SidebarContext);
  const itemIcon = /* @__PURE__ */ React.createElement(Badge, {
    color: "secondary",
    variant: "dot",
    overlap: "circle",
    invisible: !hasNotifications
  }, /* @__PURE__ */ React.createElement(Icon, {
    fontSize: "small",
    className: classes.icon
  }));
  const childProps = {
    onClick,
    className: clsx2(classes.root, isOpen ? classes.open : classes.closed)
  };
  if (!isOpen) {
    if (to === void 0) {
      return /* @__PURE__ */ React.createElement("div", {
        ...childProps
      }, itemIcon);
    }
    return /* @__PURE__ */ React.createElement(NavLink, {
      ...childProps,
      activeClassName: classes.selected,
      to,
      end: true
    }, itemIcon);
  }
  const content = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
    "data-testid": "login-button",
    className: classes.iconContainer
  }, itemIcon), text && /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle2",
    className: classes.label
  }, text), /* @__PURE__ */ React.createElement("div", {
    className: classes.secondaryAction
  }, children));
  if (to === void 0) {
    return /* @__PURE__ */ React.createElement("div", {
      ...childProps
    }, content);
  }
  return /* @__PURE__ */ React.createElement(NavLink, {
    ...childProps,
    activeClassName: classes.selected,
    to,
    end: true
  }, content);
};
const SidebarSearchField = (props) => {
  const [input, setInput] = useState("");
  const classes = useStyles$t();
  const handleEnter = (ev) => {
    if (ev.key === "Enter") {
      props.onSearch(input);
    }
  };
  const handleInput = (ev) => {
    setInput(ev.target.value);
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.searchRoot
  }, /* @__PURE__ */ React.createElement(SidebarItem, {
    icon: Search2
  }, /* @__PURE__ */ React.createElement(TextField, {
    placeholder: "Search",
    onChange: handleInput,
    onKeyDown: handleEnter,
    className: classes.searchContainer,
    InputProps: {
      disableUnderline: true,
      className: classes.searchField
    }
  })));
};
const SidebarSpace = styled("div")({
  flex: 1
});
const SidebarSpacer = styled("div")({
  height: 8
});
const SidebarDivider = styled("hr")({
  height: 1,
  width: "100%",
  background: "#383838",
  border: "none",
  margin: "12px 0px"
});

const useStyles$u = makeStyles((theme2) => ({
  introCard: {
    color: "#b5b5b5",
    fontSize: 12,
    width: sidebarConfig.drawerWidthOpen,
    marginTop: 18,
    marginBottom: 12,
    paddingLeft: sidebarConfig.iconPadding,
    paddingRight: sidebarConfig.iconPadding
  },
  introDismiss: {
    display: "flex",
    justifyContent: "flex-end",
    alignItems: "center",
    marginTop: 12
  },
  introDismissLink: {
    color: "#dddddd",
    display: "flex",
    alignItems: "center",
    marginBottom: 4,
    "&:hover": {
      color: theme2.palette.linkHover,
      transition: theme2.transitions.create("color", {
        easing: theme2.transitions.easing.sharp,
        duration: theme2.transitions.duration.shortest
      })
    }
  },
  introDismissText: {
    fontSize: "0.7rem",
    fontWeight: "bold",
    textTransform: "uppercase",
    letterSpacing: 1
  },
  introDismissIcon: {
    width: 18,
    height: 18,
    marginRight: 12
  }
}));
const IntroCard = (props) => {
  const classes = useStyles$u();
  const {text, onClose} = props;
  const handleClose = () => onClose();
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.introCard
  }, /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle2"
  }, text), /* @__PURE__ */ React.createElement("div", {
    className: classes.introDismiss
  }, /* @__PURE__ */ React.createElement(Link$1, {
    component: "button",
    onClick: handleClose,
    underline: "none",
    className: classes.introDismissLink
  }, /* @__PURE__ */ React.createElement(CloseIcon, {
    className: classes.introDismissIcon
  }), /* @__PURE__ */ React.createElement(Typography, {
    component: "span",
    className: classes.introDismissText
  }, "Dismiss"))));
};
const SidebarIntroCard = (props) => {
  const {text, onDismiss} = props;
  const [collapsing, setCollapsing] = useState(false);
  const startDismissing = () => {
    setCollapsing(true);
  };
  return /* @__PURE__ */ React.createElement(Collapse, {
    in: !collapsing,
    onExited: onDismiss
  }, /* @__PURE__ */ React.createElement(IntroCard, {
    text,
    onClose: startDismissing
  }));
};
const starredIntroText = `Fun fact! As you explore all the awesome plugins in Backstage, you can actually pin them to this side nav.
Keep an eye out for the little star icon (⭐) next to the plugin name and give it a click!`;
const recentlyViewedIntroText = "And your recently viewed plugins will pop up here!";
const SidebarIntro = () => {
  const {isOpen} = useContext(SidebarContext);
  const [
    {starredItemsDismissed, recentlyViewedItemsDismissed},
    setDismissedIntro
  ] = useLocalStorage(SIDEBAR_INTRO_LOCAL_STORAGE, {
    starredItemsDismissed: false,
    recentlyViewedItemsDismissed: false
  });
  const dismissStarred = () => {
    setDismissedIntro((state) => ({...state, starredItemsDismissed: true}));
  };
  const dismissRecentlyViewed = () => {
    setDismissedIntro((state) => ({
      ...state,
      recentlyViewedItemsDismissed: true
    }));
  };
  if (!isOpen) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, !starredItemsDismissed && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(SidebarIntroCard, {
    text: starredIntroText,
    onDismiss: dismissStarred
  }), /* @__PURE__ */ React.createElement(SidebarDivider, null)), !recentlyViewedItemsDismissed && /* @__PURE__ */ React.createElement(SidebarIntroCard, {
    text: recentlyViewedIntroText,
    onDismiss: dismissRecentlyViewed
  }));
};

const ARROW_BUTTON_SIZE = 20;
const useStyles$v = makeStyles((theme2) => {
  return {
    root: {
      position: "relative",
      alignSelf: "stretch"
    },
    arrowButtonWrapper: {
      position: "absolute",
      right: 0,
      width: ARROW_BUTTON_SIZE,
      height: ARROW_BUTTON_SIZE,
      top: -(theme2.spacing(6) + ARROW_BUTTON_SIZE) / 2,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: "2px 0px 0px 2px",
      background: theme2.palette.pinSidebarButton.background,
      color: theme2.palette.pinSidebarButton.icon,
      border: "none",
      outline: "none",
      cursor: "pointer"
    },
    arrowButtonIcon: {
      transform: ({isPinned}) => isPinned ? "rotate(180deg)" : "none"
    }
  };
});
const SidebarPinButton = () => {
  const {isOpen} = useContext(SidebarContext);
  const {isPinned, toggleSidebarPinState} = useContext(SidebarPinStateContext);
  const classes = useStyles$v({isPinned});
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.root
  }, isOpen && /* @__PURE__ */ React.createElement("button", {
    className: classes.arrowButtonWrapper,
    onClick: toggleSidebarPinState
  }, /* @__PURE__ */ React.createElement(DoubleArrowIcon, {
    className: classes.arrowButtonIcon,
    style: {fontSize: 14}
  })));
};

const SidebarThemeToggle = () => {
  const appThemeApi = useApi(appThemeApiRef);
  const themeId = useObservable(appThemeApi.activeThemeId$(), appThemeApi.getActiveThemeId());
  let text = "Auto";
  let icon = AutoIcon;
  switch (themeId) {
    case "dark":
      text = "Dark mode";
      icon = DarkIcon;
      break;
    case "light":
      text = "Light mode";
      icon = LightIcon;
      break;
  }
  const handleToggle = () => {
    if (!themeId) {
      appThemeApi.setActiveThemeId("light");
    } else if (themeId === "light") {
      appThemeApi.setActiveThemeId("dark");
    } else {
      appThemeApi.setActiveThemeId(void 0);
    }
  };
  return /* @__PURE__ */ React.createElement(SidebarItem, {
    text,
    onClick: handleToggle,
    icon
  });
};

const ProviderSettingsItem = ({title, icon, signedIn, api, signInHandler}) => {
  return /* @__PURE__ */ React.createElement(SidebarItem, {
    key: title,
    text: title,
    icon: icon != null ? icon : StarBorder2
  }, /* @__PURE__ */ React.createElement(IconButton, {
    onClick: () => signedIn ? api.logout() : signInHandler()
  }, /* @__PURE__ */ React.createElement(Tooltip, {
    placement: "top",
    arrow: true,
    title: signedIn ? `Sign out from ${title}` : `Sign in to ${title}`
  }, /* @__PURE__ */ React.createElement(PowerButton, {
    color: signedIn ? "secondary" : "primary"
  }))));
};

const OAuthProviderSettings = ({
  title,
  icon,
  apiRef
}) => {
  const api = useApi(apiRef);
  const [signedIn, setSignedIn] = useState(false);
  useEffect(() => {
    let didCancel = false;
    const checkSession = async () => {
      const session = await api.getAccessToken("", {optional: true});
      if (!didCancel) {
        setSignedIn(!!session);
      }
    };
    let subscription;
    const observeSession = () => {
      subscription = api.sessionState$().subscribe((sessionState) => {
        if (!didCancel) {
          setSignedIn(sessionState === SessionState.SignedIn);
        }
      });
    };
    checkSession();
    observeSession();
    return () => {
      didCancel = true;
      subscription.unsubscribe();
    };
  }, [api]);
  return /* @__PURE__ */ React.createElement(ProviderSettingsItem, {
    title,
    icon,
    signedIn,
    api,
    signInHandler: () => api.getAccessToken()
  });
};

const OIDCProviderSettings = ({
  title,
  icon,
  apiRef
}) => {
  const api = useApi(apiRef);
  const [signedIn, setSignedIn] = useState(false);
  useEffect(() => {
    let didCancel = false;
    const checkSession = async () => {
      const session = await api.getIdToken({optional: true});
      if (!didCancel) {
        setSignedIn(!!session);
      }
    };
    let subscription;
    const observeSession = () => {
      subscription = api.sessionState$().subscribe((sessionState) => {
        if (!didCancel) {
          setSignedIn(sessionState === SessionState.SignedIn);
        }
      });
    };
    checkSession();
    observeSession();
    return () => {
      didCancel = true;
      subscription.unsubscribe();
    };
  }, [api]);
  return /* @__PURE__ */ React.createElement(ProviderSettingsItem, {
    title,
    icon,
    signedIn,
    api,
    signInHandler: () => api.getIdToken()
  });
};

const useStyles$w = makeStyles({
  avatar: {
    width: 24,
    height: 24
  }
});
const UserProfile = ({
  open,
  setOpen
}) => {
  var _a;
  const ref = useRef();
  const classes = useStyles$w();
  const identityApi = useApi(identityApiRef);
  const handleClick = () => {
    setOpen(!open);
    setTimeout(() => {
      var _a2;
      return (_a2 = ref.current) == null ? void 0 : _a2.scrollIntoView({behavior: "smooth"});
    }, 300);
  };
  const userId = identityApi.getUserId();
  const profile = identityApi.getProfile();
  const displayName = (_a = profile.displayName) != null ? _a : userId;
  const SignInAvatar = () => /* @__PURE__ */ React.createElement(Avatar, {
    src: profile.picture,
    className: classes.avatar
  }, displayName[0]);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Divider, {
    innerRef: ref
  }), /* @__PURE__ */ React.createElement(SidebarItem, {
    text: displayName,
    onClick: handleClick,
    icon: SignInAvatar
  }, open ? /* @__PURE__ */ React.createElement(ExpandMore2, null) : /* @__PURE__ */ React.createElement(ExpandLess2, null)));
};

function SidebarUserSettings() {
  const {isOpen: sidebarOpen} = useContext(SidebarContext);
  const [open, setOpen] = React.useState(false);
  const identityApi = useApi(identityApiRef);
  useEffect(() => {
    if (!sidebarOpen && open)
      setOpen(false);
  }, [open, sidebarOpen]);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(UserProfile, {
    open,
    setOpen
  }), /* @__PURE__ */ React.createElement(Collapse2, {
    in: open,
    timeout: "auto"
  }, /* @__PURE__ */ React.createElement(OIDCProviderSettings, {
    title: "Google",
    apiRef: googleAuthApiRef,
    icon: Star2
  }), /* @__PURE__ */ React.createElement(OAuthProviderSettings, {
    title: "Github",
    apiRef: githubAuthApiRef,
    icon: Star2
  }), /* @__PURE__ */ React.createElement(OAuthProviderSettings, {
    title: "Gitlab",
    apiRef: gitlabAuthApiRef,
    icon: Star2
  }), /* @__PURE__ */ React.createElement(OIDCProviderSettings, {
    title: "Okta",
    apiRef: oktaAuthApiRef,
    icon: Star2
  }), /* @__PURE__ */ React.createElement(OIDCProviderSettings, {
    title: "YourOrg",
    apiRef: oauth2ApiRef,
    icon: Star2
  }), /* @__PURE__ */ React.createElement(SidebarItem, {
    icon: SignOutIcon,
    text: "Sign Out",
    onClick: () => identityApi.logout()
  })));
}

const result = {
  userId: "guest",
  profile: {
    email: "guest@example.com",
    displayName: "Guest"
  }
};
const Component = ({onResult}) => /* @__PURE__ */ React.createElement(Grid, {
  item: true
}, /* @__PURE__ */ React.createElement(InfoCard, {
  title: "Guest",
  actions: /* @__PURE__ */ React.createElement(Button$1, {
    color: "primary",
    variant: "outlined",
    onClick: () => onResult(result)
  }, "Enter")
}, /* @__PURE__ */ React.createElement(Typography, {
  variant: "body1"
}, "Enter as a Guest User.", /* @__PURE__ */ React.createElement("br", null), "You will not have a verified identity,", /* @__PURE__ */ React.createElement("br", null), "meaning some features might be unavailable.")));
const loader = async () => {
  return result;
};
const guestProvider = {Component, loader};

const Component$1 = ({onResult}) => {
  const googleAuthApi = useApi(googleAuthApiRef);
  const errorApi = useApi(errorApiRef);
  const handleLogin = async () => {
    try {
      const identity = await googleAuthApi.getBackstageIdentity({
        instantPopup: true
      });
      const profile = await googleAuthApi.getProfile();
      onResult({
        userId: identity.id,
        profile,
        getIdToken: () => googleAuthApi.getBackstageIdentity().then((i) => i.idToken),
        logout: async () => {
          await googleAuthApi.logout();
        }
      });
    } catch (error) {
      errorApi.post(error);
    }
  };
  return /* @__PURE__ */ React.createElement(Grid, {
    item: true
  }, /* @__PURE__ */ React.createElement(InfoCard, {
    title: "Google",
    actions: /* @__PURE__ */ React.createElement(Button$1, {
      color: "primary",
      variant: "outlined",
      onClick: handleLogin
    }, "Sign In")
  }, /* @__PURE__ */ React.createElement(Typography, {
    variant: "body1"
  }, "Sign In using Google")));
};
const loader$1 = async (apis) => {
  const googleAuthApi = apis.get(googleAuthApiRef);
  const identity = await googleAuthApi.getBackstageIdentity({
    optional: true
  });
  if (!identity) {
    return void 0;
  }
  const profile = await googleAuthApi.getProfile();
  return {
    userId: identity.id,
    profile,
    getIdToken: () => googleAuthApi.getBackstageIdentity().then((i) => i.idToken),
    logout: async () => {
      await googleAuthApi.logout();
    }
  };
};
const googleProvider = {Component: Component$1, loader: loader$1};

const ID_TOKEN_REGEX = /^[a-z0-9+/]+\.[a-z0-9+/]+\.[a-z0-9+/]+$/i;
const useFormStyles = makeStyles((theme) => ({
  form: {
    display: "flex",
    flexFlow: "column nowrap"
  },
  button: {
    alignSelf: "center",
    marginTop: theme.spacing(2)
  }
}));
const Component$2 = ({onResult}) => {
  const classes = useFormStyles();
  const {register, handleSubmit, errors, formState} = useForm({
    mode: "onChange"
  });
  const handleResult = ({userId, idToken}) => {
    onResult({
      userId,
      profile: {
        email: `${userId}@example.com`
      },
      getIdToken: idToken ? async () => idToken : void 0
    });
  };
  return /* @__PURE__ */ React.createElement(Grid, {
    item: true
  }, /* @__PURE__ */ React.createElement(InfoCard, {
    title: "Custom User"
  }, /* @__PURE__ */ React.createElement(Typography, {
    variant: "body1"
  }, "Enter your own User ID and credentials.", /* @__PURE__ */ React.createElement("br", null), "This selection will not be stored."), /* @__PURE__ */ React.createElement("form", {
    className: classes.form,
    onSubmit: handleSubmit(handleResult)
  }, /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(TextField, {
    name: "userId",
    label: "User ID",
    margin: "normal",
    error: Boolean(errors.userId),
    inputRef: register({required: true})
  }), errors.userId && /* @__PURE__ */ React.createElement(FormHelperText, {
    error: true
  }, errors.userId.message)), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(TextField, {
    name: "idToken",
    label: "ID Token (optional)",
    margin: "normal",
    autoComplete: "off",
    error: Boolean(errors.idToken),
    inputRef: register({
      required: false,
      validate: (token) => !token || ID_TOKEN_REGEX.test(token) || "Token is not a valid OpenID Connect JWT Token"
    })
  }), errors.idToken && /* @__PURE__ */ React.createElement(FormHelperText, {
    error: true
  }, errors.idToken.message)), /* @__PURE__ */ React.createElement(Button$1, {
    type: "submit",
    color: "primary",
    variant: "outlined",
    className: classes.button,
    disabled: !(formState == null ? void 0 : formState.dirty) || !isEmpty2(errors)
  }, "Continue"))));
};
const loader$2 = async () => void 0;
const customProvider = {Component: Component$2, loader: loader$2};

const Component$3 = ({onResult}) => {
  const gitlabAuthApi = useApi(gitlabAuthApiRef);
  const errorApi = useApi(errorApiRef);
  const handleLogin = async () => {
    try {
      const identity = await gitlabAuthApi.getBackstageIdentity({
        instantPopup: true
      });
      const profile = await gitlabAuthApi.getProfile();
      onResult({
        userId: identity.id,
        profile,
        getIdToken: () => gitlabAuthApi.getBackstageIdentity().then((i) => i.idToken),
        logout: async () => {
          await gitlabAuthApi.logout();
        }
      });
    } catch (error) {
      errorApi.post(error);
    }
  };
  return /* @__PURE__ */ React.createElement(Grid, {
    item: true
  }, /* @__PURE__ */ React.createElement(InfoCard, {
    title: "Gitlab",
    actions: /* @__PURE__ */ React.createElement(Button$1, {
      color: "primary",
      variant: "outlined",
      onClick: handleLogin
    }, "Sign In")
  }, /* @__PURE__ */ React.createElement(Typography, {
    variant: "body1"
  }, "Sign In using Gitlab")));
};
const loader$3 = async (apis) => {
  const gitlabAuthApi = apis.get(gitlabAuthApiRef);
  const identity = await gitlabAuthApi.getBackstageIdentity({
    optional: true
  });
  if (!identity) {
    return void 0;
  }
  const profile = await gitlabAuthApi.getProfile();
  return {
    userId: identity.id,
    profile,
    getIdToken: () => gitlabAuthApi.getBackstageIdentity().then((i) => i.idToken),
    logout: async () => {
      await gitlabAuthApi.logout();
    }
  };
};
const gitlabProvider = {Component: Component$3, loader: loader$3};

const Component$4 = ({onResult}) => {
  const oktaAuthApi = useApi(oktaAuthApiRef);
  const errorApi = useApi(errorApiRef);
  const handleLogin = async () => {
    try {
      const identity = await oktaAuthApi.getBackstageIdentity({
        instantPopup: true
      });
      const profile = await oktaAuthApi.getProfile();
      onResult({
        userId: identity.id,
        profile,
        getIdToken: () => oktaAuthApi.getBackstageIdentity().then((i) => i.idToken),
        logout: async () => {
          await oktaAuthApi.logout();
        }
      });
    } catch (error) {
      errorApi.post(error);
    }
  };
  return /* @__PURE__ */ React.createElement(Grid, {
    item: true
  }, /* @__PURE__ */ React.createElement(InfoCard, {
    title: "Okta",
    actions: /* @__PURE__ */ React.createElement(Button$1, {
      color: "primary",
      variant: "outlined",
      onClick: handleLogin
    }, "Sign In")
  }, /* @__PURE__ */ React.createElement(Typography, {
    variant: "body1"
  }, "Sign In using Okta")));
};
const loader$4 = async (apis) => {
  const oktaAuthApi = apis.get(oktaAuthApiRef);
  const identity = await oktaAuthApi.getBackstageIdentity({
    optional: true
  });
  if (!identity) {
    return void 0;
  }
  const profile = await oktaAuthApi.getProfile();
  return {
    userId: identity.id,
    profile,
    getIdToken: () => oktaAuthApi.getBackstageIdentity().then((i) => i.idToken),
    logout: async () => {
      await oktaAuthApi.logout();
    }
  };
};
const oktaProvider = {Component: Component$4, loader: loader$4};

const Component$5 = ({onResult}) => {
  const githubAuthApi = useApi(githubAuthApiRef);
  const errorApi = useApi(errorApiRef);
  const handleLogin = async () => {
    try {
      const identity = await githubAuthApi.getBackstageIdentity({
        instantPopup: true
      });
      const profile = await githubAuthApi.getProfile();
      onResult({
        userId: identity.id,
        profile,
        getIdToken: () => {
          return githubAuthApi.getBackstageIdentity().then((i) => i.idToken);
        },
        logout: async () => {
          await githubAuthApi.logout();
        }
      });
    } catch (error) {
      errorApi.post(error);
    }
  };
  return /* @__PURE__ */ React.createElement(Grid, {
    item: true
  }, /* @__PURE__ */ React.createElement(InfoCard, {
    title: "Github",
    actions: /* @__PURE__ */ React.createElement(Button$1, {
      color: "primary",
      variant: "outlined",
      onClick: handleLogin
    }, "Sign In")
  }, /* @__PURE__ */ React.createElement(Typography, {
    variant: "body1"
  }, "Sign In using Github")));
};
const loader$5 = async (apis) => {
  const githubAuthApi = apis.get(githubAuthApiRef);
  const identity = await githubAuthApi.getBackstageIdentity({
    optional: true
  });
  if (!identity) {
    return void 0;
  }
  const profile = await githubAuthApi.getProfile();
  return {
    userId: identity.id,
    profile,
    getIdToken: () => githubAuthApi.getBackstageIdentity().then((i) => i.idToken),
    logout: async () => {
      await githubAuthApi.logout();
    }
  };
};
const githubProvider = {Component: Component$5, loader: loader$5};

const PROVIDER_STORAGE_KEY = "@backstage/core:SignInPage:provider";
const signInProviders = {
  guest: guestProvider,
  google: googleProvider,
  gitlab: gitlabProvider,
  custom: customProvider,
  okta: oktaProvider,
  github: githubProvider
};
const useSignInProviders = (providers, onResult) => {
  const errorApi = useApi(errorApiRef);
  const apiHolder = useApiHolder();
  const [loading, setLoading] = useState(true);
  const handleWrappedResult = useCallback((result) => {
    onResult({
      ...result,
      logout: async () => {
        var _a;
        localStorage.removeItem(PROVIDER_STORAGE_KEY);
        await ((_a = result.logout) == null ? void 0 : _a.call(result));
      }
    });
  }, [onResult]);
  useLayoutEffect(() => {
    if (!loading) {
      return void 0;
    }
    const selectedProvider = localStorage.getItem(PROVIDER_STORAGE_KEY);
    if (selectedProvider === null) {
      setLoading(false);
      return void 0;
    }
    const provider = signInProviders[selectedProvider];
    if (!provider) {
      setLoading(false);
      return void 0;
    }
    let didCancel = false;
    provider.loader(apiHolder).then((result) => {
      if (didCancel) {
        return;
      }
      if (result) {
        handleWrappedResult(result);
      } else {
        setLoading(false);
      }
    }).catch((error) => {
      if (didCancel) {
        return;
      }
      errorApi.post(error);
      setLoading(false);
    });
    return () => {
      didCancel = true;
    };
  }, [loading, errorApi, onResult, apiHolder, providers, handleWrappedResult]);
  const elements = useMemo(() => providers.map((providerId) => {
    const provider = signInProviders[providerId];
    if (!provider) {
      throw new Error(`Unknown sign-in provider: ${providerId}`);
    }
    const {Component} = provider;
    const handleResult = (result) => {
      localStorage.setItem(PROVIDER_STORAGE_KEY, providerId);
      handleWrappedResult(result);
    };
    return /* @__PURE__ */ React.createElement(Component, {
      key: providerId,
      onResult: handleResult
    });
  }), [providers, handleWrappedResult]);
  return [loading, elements];
};

const SignInPage = ({onResult, providers: providers2}) => {
  const configApi = useApi(configApiRef);
  const [loading, providerElements] = useSignInProviders(providers2, onResult);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  return /* @__PURE__ */ React.createElement(Page, null, /* @__PURE__ */ React.createElement(Header, {
    title: configApi.getString("app.title")
  }), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(ContentHeader, {
    title: "Select a sign-in method"
  }), /* @__PURE__ */ React.createElement(Grid, {
    container: true
  }, providerElements)));
};

const useTabsStyles = makeStyles((theme) => ({
  root: {
    padding: theme.spacing(0, 2, 0, 2.5),
    minHeight: theme.spacing(3)
  },
  indicator: {
    backgroundColor: theme.palette.info.main,
    height: theme.spacing(0.3)
  }
}));
const BoldHeader$1 = withStyles((theme) => ({
  root: {padding: theme.spacing(2, 2, 2, 2.5), display: "inline-block"},
  title: {fontWeight: 700},
  subheader: {paddingTop: theme.spacing(1)}
}))(CardHeader);
const TabbedCard = ({
  slackChannel = "#backstage",
  children,
  title,
  deepLink,
  value,
  onChange
}) => {
  const tabsClasses = useTabsStyles();
  const [selectedIndex, selectIndex] = useState(0);
  const handleChange = onChange ? onChange : (_ev, newSelectedIndex) => selectIndex(newSelectedIndex);
  let selectedTabContent;
  if (!value) {
    React.Children.map(children, (child, index) => {
      if (index === selectedIndex)
        selectedTabContent = child == null ? void 0 : child.props.children;
    });
  } else {
    React.Children.map(children, (child) => {
      if ((child == null ? void 0 : child.props.value) === value)
        selectedTabContent = child == null ? void 0 : child.props.children;
    });
  }
  return /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(ErrorBoundary, {
    slackChannel
  }, title && /* @__PURE__ */ React.createElement(BoldHeader$1, {
    title
  }), /* @__PURE__ */ React.createElement(Tabs$1, {
    classes: tabsClasses,
    value: value || selectedIndex,
    onChange: handleChange
  }, children), /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(CardContent, null, selectedTabContent), deepLink && /* @__PURE__ */ React.createElement(BottomLink, {
    ...deepLink
  })));
};
const useCardTabStyles = makeStyles((theme) => ({
  root: {
    minWidth: theme.spacing(6),
    minHeight: theme.spacing(3),
    margin: theme.spacing(0, 2, 0, 0),
    padding: theme.spacing(0.5, 0, 0.5, 0),
    textTransform: "none"
  },
  selected: {
    fontWeight: "bold"
  }
}));
const CardTab = ({children, ...props}) => {
  const classes = useCardTabStyles();
  return /* @__PURE__ */ React.createElement(Tab, {
    disableRipple: true,
    classes,
    ...props
  });
};

const useStyles$x = makeStyles((theme) => ({
  tabsWrapper: {
    gridArea: "pageSubheader",
    backgroundColor: theme.palette.background.paper,
    paddingLeft: theme.spacing(3)
  },
  defaultTab: {
    padding: theme.spacing(3, 3),
    ...theme.typography.caption,
    textTransform: "uppercase",
    fontWeight: "bold",
    color: theme.palette.text.secondary
  },
  selected: {
    color: theme.palette.text.primary
  }
}));
const HeaderTabs = ({tabs, onChange}) => {
  const [selectedTab, setSelectedTab] = useState(0);
  const styles = useStyles$x();
  const handleChange = (_, index) => {
    setSelectedTab(index);
    if (onChange)
      onChange(index);
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: styles.tabsWrapper
  }, /* @__PURE__ */ React.createElement(Tabs$1, {
    indicatorColor: "primary",
    textColor: "inherit",
    variant: "scrollable",
    scrollButtons: "auto",
    "aria-label": "scrollable auto tabs example",
    onChange: handleChange,
    value: selectedTab
  }, tabs.map((tab, index) => /* @__PURE__ */ React.createElement(Tab, {
    label: tab.label,
    key: tab.id,
    value: index,
    className: styles.defaultTab,
    classes: {selected: styles.selected}
  }))));
};

const useStyles$y = makeStyles((theme) => ({
  header: {
    color: theme.palette.common.white,
    padding: theme.spacing(2, 2, 6),
    backgroundImage: "linear-gradient(-137deg, rgb(25, 230, 140) 0%, rgb(29, 127, 110) 100%)"
  },
  content: {
    padding: theme.spacing(2)
  },
  description: {
    height: 175,
    overflow: "hidden",
    textOverflow: "ellipsis"
  },
  footer: {
    display: "flex",
    flexDirection: "row-reverse"
  }
}));
const ItemCard = ({
  description,
  tags,
  title,
  type,
  label,
  onClick
}) => {
  const classes = useStyles$y();
  return /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement("div", {
    className: classes.header
  }, type != null ? type : /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle2"
  }, type), /* @__PURE__ */ React.createElement(Typography, {
    variant: "h6"
  }, title)), /* @__PURE__ */ React.createElement("div", {
    className: classes.content
  }, tags == null ? void 0 : tags.map((tag) => /* @__PURE__ */ React.createElement(Chip, {
    label: tag,
    key: tag
  })), /* @__PURE__ */ React.createElement(Typography, {
    variant: "body2",
    paragraph: true,
    className: classes.description
  }, description), /* @__PURE__ */ React.createElement("div", {
    className: classes.footer
  }, /* @__PURE__ */ React.createElement(Button$1, {
    onClick,
    color: "primary"
  }, label))));
};

export { AlertDisplay, Button, CardTab, CircleProgress, CodeSnippet, Content, ContentHeader, CopyTextButton, DismissableBanner, ErrorBoundary, FeatureCalloutCircular, Header, HeaderLabel, HeaderTabs, HomepageTimer, HorizontalProgress, HorizontalScrollGrid, InfoCard, IntroCard, ItemCard, Lifecycle, Link, OAuthProviderSettings, OAuthRequestDialog, OIDCProviderSettings, Page, Progress, ProgressCard, ProviderSettingsItem, SIDEBAR_INTRO_LOCAL_STORAGE, Sidebar, SidebarContext, SidebarDivider, SidebarIntro, SidebarItem, SidebarPage, SidebarPinButton, SidebarPinStateContext, SidebarSearchField, SidebarSpace, SidebarSpacer, SidebarThemeToggle, SidebarUserSettings, SignInPage, SimpleStepper, SimpleStepperStep, StatusAborted, StatusError, StatusOK, StatusPending, StatusRunning, StatusWarning, StructuredMetadataTable, SubvalueCell, SupportButton, TabbedCard, Table, Tabs, TrendLine, UserProfile, WarningPanel, createApp, gradients, pageTheme, sidebarConfig };
